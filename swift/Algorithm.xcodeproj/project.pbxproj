// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 56;
	objects = {

/* Begin PBXBuildFile section */
		0298F96EDD1C0CEE2F678853 /* 2121. Find if Path Exists in Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */; };
		04449173453B83164B7F6907 /* 2373. Largest Local Values in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */; };
		04BBC7F80E4CDDD129B927E7 /* 2103. Find All Groups of Farmland.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */; };
		05BB03033C19747B0BDDA1DC /* 85. Maximal Rectangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */; };
		065FB6159E74C405D97C95C8 /* 310. Minimum Height Trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */; };
		07D7B9C5E5B026AC397512F8 /* BOJ1010Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 93F79F456DF0F686DC7D37F3 /* BOJ1010Tests.swift */; };
		081303FE1C1151966DE5A514 /* 861. Score After Flipping Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */; };
		123BD5BD04CDA4F92E20C728 /* BOJ2110Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */; };
		13B2FC575BC0C08C5F7E88D3 /* BOJ1927Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */; };
		14002FD4EB3CA0FC5590AD59 /* LeetCode226Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */; };
		150F01B1AFE39E6872990BCE /* LeetCode979Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */; };
		15A8637E4077E16D9675D702 /* 53. Maximum Subarray.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */; };
		15FEB4185CB82F43AE345640 /* 104. Maximum Depth of Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */; };
		1799268B03B55CF7E545D978 /* 10844. number of easy stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */; };
		18FF4EE16FC147EAA1A00EA3 /* 165. Compare Version Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */; };
		197093287BFABCAD763F943A /* 20366. Do you want to build a snowman?.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */; };
		1CCF5051F633FF411388A34C /* LeetCode217Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */; };
		1DEA772E676BD75354229402 /* BOJ2580Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */; };
		2110AFABEB88CF65E9C1822D /* BOJ11286Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */; };
		244905F7EE87422AD3260F09 /* LeetCode121Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */; };
		246764F8389A24E26E4F8BA5 /* 347. Top K Frequent Elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */; };
		24ABAE9803AC8108CAE8F7B9 /* 3197. The Lake of Swan.swift in Sources */ = {isa = PBXBuildFile; fileRef = 577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */; };
		24BF6E356DC21458CC75D808 /* LeetCode1915Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */; };
		25EE03CC12D4D87C0E24DB06 /* 834. Sum of Distances in Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */; };
		261265B42F0696E0300B0DAD /* 10775. Airport.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1BD96A68B432584E37757B6A /* 10775. Airport.swift */; };
		273AF78AB87FD153CE94E361 /* LeetCode2812Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */; };
		276AFFC688E963A4CE1C5424 /* 1289. Minimum Falling Path Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */; };
		2814DA6A2FCECAA8CEDE6FE1 /* 1005. ACM Craft.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */; };
		2E89C89BAC6807AC1DB6BE1F /* LeetCode104Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */; };
		2EBAAA36C5A141AE714E507C /* 11286. Heap of absolute values.swift in Sources */ = {isa = PBXBuildFile; fileRef = AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */; };
		2EC991651E7EA33215056405 /* LeetCode2487Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */; };
		2F04F3B2171C143F43B93171 /* LeetCode506Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */; };
		33C1A1BA18975978C0E00405 /* 2110. Installing a router.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */; };
		343665131EEABD35FCBA8D44 /* LeetCode70Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */; };
		35F6CFD292D74C88726B9A70 /* 42883. Create a large number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */; };
		39EC1CFB669DBB0D92864C7B /* 2293. Coin I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */; };
		3C2F7ABAD91AB5B16A9A0158 /* 206. Reverse Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */; };
		3C8A1E8794F04E4A675BFD87 /* 20. Valid Parentheses.swift in Sources */ = {isa = PBXBuildFile; fileRef = BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */; };
		3F23228450060BE574C01F7A /* LeetCode857Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */; };
		403FBDB8CB8A5BA4AF296E75 /* BOJ1916Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */; };
		410E9BE82EC1D30D80C2ED52 /* 514. Freedom Trail.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */; };
		42515CC0F9B451335AD25BAD /* 1030. Smallest String Starting From Leaf.swift in Sources */ = {isa = PBXBuildFile; fileRef = 66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */; };
		428CA4392D21B77061E8F1DB /* LeetCode1236Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2FEBCA0B65FDEEBA0DF66309 /* LeetCode1236Tests.swift */; };
		437714D47CFDB2780613E7D3 /* LeetCode3075Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */; };
		450755F5CE5103192C27FCE2 /* 16953. A → B.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */; };
		45BF9B669CF9B05251086F6B /* 258709. Pick a die.swift in Sources */ = {isa = PBXBuildFile; fileRef = EE44BB7EF7D2687E3DF8BC15 /* 258709. Pick a die.swift */; };
		47539B1D2033692B4F6051B6 /* BOJ2252Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */; };
		4BEBA57EC537F4869C12FEA8 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */; };
		4CDEA531960EB2203089A2B7 /* 3015. Reunite Oasis.swift in Sources */ = {isa = PBXBuildFile; fileRef = F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */; };
		4DE10A7E1B762225A2189222 /* 21. Merge Two Sorted Lists.swift in Sources */ = {isa = PBXBuildFile; fileRef = B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */; };
		4EC93C2E678396AFB1C0C6F9 /* 1915. Number of Wonderful Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */; };
		51138571E50094B927D8F70D /* 2000. Reverse Prefix of Word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */; };
		53660B840A04131325C6A739 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */ = {isa = PBXBuildFile; fileRef = D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */; };
		54280C5E4C61E0C91DB2126D /* 979. Distribute Coins in Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */; };
		54AB38AF9E98CD4DA705541C /* 17298. Right Larger Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */; };
		563CBAA119F321C46477CB9D /* LeetCode2370Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */; };
		58E24341C4C5DA5B7FB80224 /* 1987. Alphabet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122859837263588F523ABD9A /* 1987. Alphabet.swift */; };
		5A45056D20272E3F85346400 /* BOJ1005Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3D181C311A7DDCA5F3850FC6 /* BOJ1005Tests.swift */; };
		5B1407FC43CB7EB8D99A308B /* 3404. Minimum Number of Operations to Satisfy Conditions.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */; };
		5BC50B19D37B97F97B237B96 /* BOJ11404Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */; };
		5BDCB9416AD674C9A470BFED /* 786. K-th Smallest Prime Fraction.swift in Sources */ = {isa = PBXBuildFile; fileRef = 528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */; };
		5D990747032C8514E7CFC029 /* 237. Delete Node in a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */; };
		5E34A0B13371633E581E9DB3 /* 1916. Finding the minimum cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */; };
		6032530B24E68B27FD075612 /* 11404. Floyd.swift in Sources */ = {isa = PBXBuildFile; fileRef = 481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */; };
		61F21C1CC8CADC4C97A9BC90 /* BOJ1238Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A8255C48D493D5D4123554B4 /* BOJ1238Tests.swift */; };
		63CF486202E3291B4E9CA38E /* 100. Same Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */; };
		647453E29C0FB86384D43325 /* 987. Reveal Cards In Increasing Order.swift in Sources */ = {isa = PBXBuildFile; fileRef = D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */; };
		65C21D1432E3C8E2D257AF6D /* 402. Remove K Digits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */; };
		6716C73AF1F01020B7AD7E62 /* 881. Boats to Save People.swift in Sources */ = {isa = PBXBuildFile; fileRef = D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */; };
		6927F41D517BB843E0F76606 /* BOJ10775Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */; };
		6A0C7E0B4631B3B549EB835F /* LeetCode20Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */; };
		6F3AD3FCB6CE3C777BFBDE17 /* 1238. Parties.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32769F20766FEEC70896B8F0 /* 1238. Parties.swift */; };
		6FF2498DF4E1C7B29E00165C /* 2252. Line up.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */; };
		71BCF67A948FE6952FE0A3FC /* LeetCode834Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */; };
		72B519C20C01453ABD1D690C /* BOJ2805Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */; };
		72D150AF878FB509D0C744BA /* 2580. Sudoku.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */; };
		732E5A5C32D44BE1962A1981 /* LeetCode242Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */; };
		749CB7A5DFB18DC8B6D763C2 /* 2487. Remove Nodes From Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */; };
		760102D79A16D3CC121F2DFD /* 1927. Min Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74DADA5B240793D631B03452 /* 1927. Min Heap.swift */; };
		769AF1997B87BFA79723DEC1 /* LeetCode125Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 757659B4899D65BB002B18CF /* LeetCode125Tests.swift */; };
		77AA405F3125B7BC1E44D830 /* LeetCode2373Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */; };
		7B0EA7CB6F912B549A2151E5 /* 252. Meeting Rooms.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */; };
		7CD2F76BE035760F99EF54BA /* 1753. Shortest path.swift in Sources */ = {isa = PBXBuildFile; fileRef = A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */; };
		7D15BE7562BD0E4035409427 /* LeetCode2441Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */; };
		7E7BED2D34087F88D2F5A70B /* 84. Largest Rectangle in Histogram.swift in Sources */ = {isa = PBXBuildFile; fileRef = 78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */; };
		7EC3DE335660AE5578CB4A1D /* 70. Climbing Stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */; };
		81888093F324533D436DF72E /* BOJ3015Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */; };
		86017F9E5B57AAC1EABF763D /* 14500. Tetromino.swift in Sources */ = {isa = PBXBuildFile; fileRef = 12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */; };
		86113DAC5600E7252DC6E18E /* 18429. root loss.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */; };
		8BD03C69B8AEA87FC9494733 /* 141. Linked List Cycle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */; };
		8BEE20091C43BC7EC2617BD2 /* BOJ1987Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */; };
		8E91B5FF24DDAE2C6F650A37 /* 226. Invert Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */; };
		922639D7DD1CAC0B19672BBA /* 242. Valid Anagram.swift in Sources */ = {isa = PBXBuildFile; fileRef = B226D6181F521969A817995D /* 242. Valid Anagram.swift */; };
		9266939C2A222E285DF9FBBA /* 1912. Continuous sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17584F85B15167F0281E936C /* 1912. Continuous sum.swift */; };
		936DBA36E92A4264C883C2E6 /* 3111. Censorship.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2EC3121C728E9655DC400056 /* 3111. Censorship.swift */; };
		9397FCD75FC827375DD22D50 /* BOJ3197Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */; };
		9653D5809AF9F31705F2CAEF /* 1759. Create a password.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */; };
		9B678B0352E8D6A7FDE87D31 /* 623. Add One Row to Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */; };
		9E92CAA8692DE34C31A0793A /* 200. Number of Islands.swift in Sources */ = {isa = PBXBuildFile; fileRef = 837C0064F1B04FF020088628 /* 200. Number of Islands.swift */; };
		9F48B1AC2DFE123B54EB2C41 /* LeetCode1219Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */; };
		A012C31B7C91B79C0BE6BD54 /* 572. Subtree of Another Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */; };
		A1D260FBE826ED2057AC26A2 /* 15686. Chicken delivery.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */; };
		A3A83F852CFB29C40FB8306F /* 121. Best Time to Buy and Sell Stock.swift in Sources */ = {isa = PBXBuildFile; fileRef = 361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */; };
		A6CC1AF0F31C3135CE20D40A /* LeetCode252Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */; };
		A91BBBAADAC5753B36B20622 /* LeetCode881Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */; };
		A9D1F499D140D497D5916EC6 /* LeetCode786Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */; };
		AB50D1D026BDE6FD073A2CF7 /* 1219. Path with Maximum Gold.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */; };
		ACB86D2B638188017CB2D792 /* 3075. Maximize Happiness of Selected Children.swift in Sources */ = {isa = PBXBuildFile; fileRef = D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */; };
		ADAC39048810E6DC3D734B58 /* 678. Valid Parenthesis String.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */; };
		AF2867E443D338416AD5647D /* 129. Sum Root to Leaf Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */; };
		B1497A94E45EBF47364E6ADD /* LeetCode237Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = CF8265795FE76682687EF63A /* LeetCode237Tests.swift */; };
		B25327AB7F233F884E784562 /* BOJ2212Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8E0425866283B95D0634005E /* BOJ2212Tests.swift */; };
		B3790EC1E48A360121C5DE4A /* 1806. Partial sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */; };
		B3CB0C50A0F5B375CA944754 /* BOJ16953Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */; };
		B7F3A07EF15436FAA05A09FA /* BOJ1753Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */; };
		B7F424D20403BAF71E4AC202 /* 2331. Evaluate Boolean Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */; };
		BA137FC42BE49E1700F50CB7 /* 165. Compare Version Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */; };
		BA137FC52BE4A3F900F50CB7 /* 1753. Shortest path.swift in Sources */ = {isa = PBXBuildFile; fileRef = A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */; };
		BA1B02E02BE1D6AD0018D1BE /* 2000. Reverse Prefix of Word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */; };
		BA1B02E12BE1D9F20018D1BE /* 11279. Max Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */; };
		BA1BB8882BD75C9800CA174B /* BOJ18231Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */; };
		BA1BB88F2BD75E8400CA174B /* 18231. destroyed city.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */; };
		BA1BB8912BD78F8700CA174B /* BOJ18429Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */; };
		BA1BB8922BD78F9600CA174B /* 18429. root loss.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */; };
		BA2A2B962BDA44930099FF73 /* 4. Median of Two Sorted Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */; };
		BA2DE3C82BF485EE003BC8FA /* 1238. Parties.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32769F20766FEEC70896B8F0 /* 1238. Parties.swift */; };
		BA2DE3CA2BF493F6003BC8FA /* Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA2DE3C92BF493F6003BC8FA /* Heap.swift */; };
		BA2DE3CB2BF4943A003BC8FA /* Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA2DE3C92BF493F6003BC8FA /* Heap.swift */; };
		BA3C4ECA2BEDE3F500EFE29C /* 786. K-th Smallest Prime Fraction.swift in Sources */ = {isa = PBXBuildFile; fileRef = 528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */; };
		BA402F572B848BC600E86AAD /* Utils.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA402F562B848BC600E86AAD /* Utils.swift */; };
		BA44EB312BE32ED800A94445 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */ = {isa = PBXBuildFile; fileRef = D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */; };
		BA44EB322BE3305500A94445 /* 1927. Min Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74DADA5B240793D631B03452 /* 1927. Min Heap.swift */; };
		BA4C95E32BEA00C300E80D08 /* 1916. Finding the minimum cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */; };
		BA57D06A2BEF16A500CAF130 /* 2110. Installing a router.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */; };
		BA57DEE32BE09BA000073C18 /* 1915. Number of Wonderful Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */; };
		BA57F1DC2BE8BCE300569604 /* 2580. Sudoku.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */; };
		BA57F1DD2BE8C29E00569604 /* 1912. Continuous sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17584F85B15167F0281E936C /* 1912. Continuous sum.swift */; };
		BA58C3D22BE5DFFD00EF519E /* 881. Boats to Save People.swift in Sources */ = {isa = PBXBuildFile; fileRef = D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */; };
		BA58C3D32BE5F1EA00EF519E /* 11286. Heap of absolute values.swift in Sources */ = {isa = PBXBuildFile; fileRef = AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */; };
		BA59963E2BF58EDF006CF31D /* 11404. Floyd.swift in Sources */ = {isa = PBXBuildFile; fileRef = 481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */; };
		BA59CCB42BDFB94200219E83 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */; };
		BA59CCB52BDFD3B600219E83 /* 15686. Chicken delivery.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */; };
		BA5F43DF2BE61748000AE158 /* 20. Valid Parentheses.swift in Sources */ = {isa = PBXBuildFile; fileRef = BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */; };
		BA5F43E12BE61D2E000AE158 /* ListNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA5F43E02BE61D2E000AE158 /* ListNode.swift */; };
		BA5F43E22BE61D64000AE158 /* 206. Reverse Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */; };
		BA5F43E32BE62003000AE158 /* ListNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA5F43E02BE61D2E000AE158 /* ListNode.swift */; };
		BA5F43E42BE62007000AE158 /* TreeNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF443E32BCD1256007D25A6 /* TreeNode.swift */; };
		BA5F43E52BE627C2000AE158 /* 21. Merge Two Sorted Lists.swift in Sources */ = {isa = PBXBuildFile; fileRef = B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */; };
		BA6028C02BEC97A6005F922E /* 3075. Maximize Happiness of Selected Children.swift in Sources */ = {isa = PBXBuildFile; fileRef = D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */; };
		BA6028C12BEC9BAC005F922E /* 1005. ACM Craft.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */; };
		BA63C1CA2BDB37F500CF76E8 /* 1289. Minimum Falling Path Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */; };
		BA63C1CB2BDB3F9600CF76E8 /* 20366. Do you want to build a snowman?.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */; };
		BA653D662BDCCD9200328F08 /* 17298. Right Larger Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */; };
		BA688CAD2BF089BD00009F37 /* 16953. A → B.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */; };
		BA688CAE2BF093B500009F37 /* 252. Meeting Rooms.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */; };
		BA688CB12BF094B900009F37 /* Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA688CB02BF094B900009F37 /* Interval.swift */; };
		BA688CB22BF095C800009F37 /* Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA688CB02BF094B900009F37 /* Interval.swift */; };
		BA6ADF2D2BF4540A009174BE /* 2812. Find the Safest Path in a Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */; };
		BA6EBDD72BDBCDC300FAC927 /* 217. Contains Duplicate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */; };
		BA6EBDD82BDBCF4800FAC927 /* 242. Valid Anagram.swift in Sources */ = {isa = PBXBuildFile; fileRef = B226D6181F521969A817995D /* 242. Valid Anagram.swift */; };
		BA6EBDD92BDBD07500FAC927 /* 1. Two Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */; };
		BA6EBDDA2BDBD96500FAC927 /* 125. Valid Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */; };
		BA6EBDDB2BDBE14000FAC927 /* 121. Best Time to Buy and Sell Stock.swift in Sources */ = {isa = PBXBuildFile; fileRef = 361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */; };
		BA6EBDDC2BDCA93900FAC927 /* 514. Freedom Trail.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */; };
		BA6F36B82BF6DCC30035E84D /* 1806. Partial sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */; };
		BA77F1642BDDEE7F00C3B741 /* 834. Sum of Distances in Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */; };
		BA77F1652BDE13CD00C3B741 /* 2293. Coin I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */; };
		BA8AF85F2BE6317900D1737E /* 141. Linked List Cycle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */; };
		BA8AF8602BE63C6800D1737E /* 226. Invert Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */; };
		BA9328742BDA71E40060E7CD /* 2212. Sensors.swift in Sources */ = {isa = PBXBuildFile; fileRef = B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */; };
		BA98BB3D2BD8D81200C85E77 /* 1236. N-th Tribonacci Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = EA0A2B3410312D7B5AB8A9E7 /* 1236. N-th Tribonacci Number.swift */; };
		BA98BB3E2BD8DF2400C85E77 /* 1894. 4th dot.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */; };
		BA98BB3F2BD8EEFF00C85E77 /* 10775. Airport.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1BD96A68B432584E37757B6A /* 10775. Airport.swift */; };
		BA9BA9662BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */; };
		BA9BA9682BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */; };
		BA9F02B52BE8A255007B8DB5 /* 2487. Remove Nodes From Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */; };
		BAA50C7A2BF1BBF70079ECDE /* 861. Score After Flipping Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */; };
		BAA50C7B2BF1CFB50079ECDE /* 2252. Line up.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */; };
		BAA8B6562BD9F6B40016D105 /* 2370. Longest Ideal Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */; };
		BAA8B6572BD9FF560016D105 /* 3197. The Lake of Swan.swift in Sources */ = {isa = PBXBuildFile; fileRef = 577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */; };
		BAACE2C52BF58DC600A29E7B /* 2331. Evaluate Boolean Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */; };
		BAB9B9492BF865FA00DEF653 /* 979. Distribute Coins in Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */; };
		BAC5583A2BE0BEB800EEB13B /* 2805. Cutting trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = 42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */; };
		BAC965FD2BE7406D00F4BE29 /* 237. Delete Node in a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */; };
		BAC965FE2BE74B3100F4BE29 /* 1987. Alphabet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122859837263588F523ABD9A /* 1987. Alphabet.swift */; };
		BACCE9842BF6D8290015C397 /* 1325. Delete Leaves With a Given Value.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */; };
		BAD0548D2BE9B7A700B89545 /* 2816. Double a Number Represented as a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */; };
		BAD0548E2BE9BB9400B89545 /* 3015. Reunite Oasis.swift in Sources */ = {isa = PBXBuildFile; fileRef = F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */; };
		BAD3DBA02BEE16FE002463B7 /* 1010. Laying bridges.swift in Sources */ = {isa = PBXBuildFile; fileRef = 157712F738600FFC186461AB /* 1010. Laying bridges.swift */; };
		BAD3DBA12BEE40FF002463B7 /* 104. Maximum Depth of Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */; };
		BAD3DBA22BEE427A002463B7 /* 100. Same Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */; };
		BAD3DBA32BEE448A002463B7 /* 572. Subtree of Another Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */; };
		BAD3DBA42BEE4871002463B7 /* 70. Climbing Stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */; };
		BAD3DBA52BEF0036002463B7 /* 857. Minimum Cost to Hire K Workers.swift in Sources */ = {isa = PBXBuildFile; fileRef = A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */; };
		BAD749022BF31FA000E7D03E /* 1219. Path with Maximum Gold.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */; };
		BAD749032BF330BA00E7D03E /* 14500. Tetromino.swift in Sources */ = {isa = PBXBuildFile; fileRef = 12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */; };
		BAD951152BEBC5D600806D4C /* 506. Relative Ranks.swift in Sources */ = {isa = PBXBuildFile; fileRef = D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */; };
		BAE7BEB22BF086C2008503CE /* 2373. Largest Local Values in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */; };
		BAF443E42BCD1256007D25A6 /* TreeNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF443E32BCD1256007D25A6 /* TreeNode.swift */; };
		BAF746DF299B78D600182311 /* main.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF746DE299B78D600182311 /* main.swift */; };
		BE61E278EC8D865A0D5A4726 /* 125. Valid Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */; };
		C10A6CDAD074405CAC64B0D8 /* LeetCode2997Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */; };
		C174FA13DF6647CABA406969 /* BOJ2293Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */; };
		C499DD65E10628A9B228AC27 /* 18231. destroyed city.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */; };
		C530A0FCD842D8CF1DA82E6E /* LeetCode1325Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */; };
		C593A17CE2D17EA8453EC727 /* 2812. Find the Safest Path in a Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */; };
		C87E44BC725BBCA98CA8D8E4 /* LeetCode4Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */; };
		C8ECE6E8F967AF9BDCD9EEE8 /* BOJ1912Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */; };
		C9AA781E33E53CA0F2B27B5B /* LeetCode206Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */; };
		CA135C55F174CA9DC56742DA /* 1325. Delete Leaves With a Given Value.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */; };
		CB4CC72290B1420BED924018 /* BOJ14500Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9529500EC53BD87590C5280C /* BOJ14500Tests.swift */; };
		CD31C9625EC944EF8846F1C6 /* BOJ1894Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */; };
		CE6A213992B34D2B4ABF6816 /* 9935. string explosion.swift in Sources */ = {isa = PBXBuildFile; fileRef = 294EF7DF806D781B692BB270 /* 9935. string explosion.swift */; };
		CEA813ED69A0FCF2681D2DD1 /* 1. Two Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */; };
		D1CD436EF833C0306B3F4F8A /* 3408. Count the Number of Special Characters I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */; };
		D1F5505C9FFB2481E1C8E9D2 /* 11279. Max Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */; };
		D4F0D8E8E663A63F336D9EB8 /* LeetCode2816Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7751B3D59332952585B66641 /* LeetCode2816Tests.swift */; };
		D5A7A34381EB73112802F70B /* 1894. 4th dot.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */; };
		D63B9DC8BCAF86678DFBA708 /* 2816. Double a Number Represented as a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */; };
		DB36B23DCEE11927089EAC04 /* LeetCode572Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */; };
		DC35452B7543C80A9E697A6C /* LeetCode2000Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 705063D013249906171AC36F /* LeetCode2000Tests.swift */; };
		DC87DB72942D3E8CEA455C82 /* LeetCode141Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */; };
		DF1E85940105D4845A53B0B0 /* BOJ15686Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */; };
		E0FCA9FF1181808EAC80F4C3 /* 506. Relative Ranks.swift in Sources */ = {isa = PBXBuildFile; fileRef = D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */; };
		E14F847269046FDB8DFB2369 /* BOJ11279Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */; };
		E35D9CC0ED1381DA48C88546 /* 857. Minimum Cost to Hire K Workers.swift in Sources */ = {isa = PBXBuildFile; fileRef = A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */; };
		E36093434D7C646997140739 /* 217. Contains Duplicate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */; };
		E4B77CCE7DCC09274BA44ECE /* BOJ20366Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */; };
		E4E957C7A58659AF82B00781 /* LeetCode1289Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */; };
		E5B4D9ED3F67E52CC775F6C2 /* LeetCode2331Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */; };
		E6402D73EB141156F1D4F6E1 /* 4. Median of Two Sorted Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */; };
		E6F07A0579F17CF856496A56 /* 2805. Cutting trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = 42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */; };
		E7F90C1C3425675050CD71B8 /* 2370. Longest Ideal Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */; };
		EB2F8B6BD40873DC6C7979A3 /* LeetCode165Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */; };
		ED659B162A0990858CF4DA6F /* 3405. Count the Number of Special Characters II.swift in Sources */ = {isa = PBXBuildFile; fileRef = B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */; };
		ED860DD7204EFEFED588EA5F /* LeetCode514Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 95E754B77DED66104FACA354 /* LeetCode514Tests.swift */; };
		EFAF18D58C399F9720BE65DA /* LeetCode100Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */; };
		EFED1CD0862E4245430E1C06 /* 1236. N-th Tribonacci Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = EA0A2B3410312D7B5AB8A9E7 /* 1236. N-th Tribonacci Number.swift */; };
		F01E4AB8A934DD5C4EDE3469 /* LeetCode861Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */; };
		F10BA05B916C440AD7BF14C7 /* BOJ17298Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */; };
		F17B6C1DBECDBCAC30C386EE /* 1010. Laying bridges.swift in Sources */ = {isa = PBXBuildFile; fileRef = 157712F738600FFC186461AB /* 1010. Laying bridges.swift */; };
		F1EC137A1A30900D9031EE8E /* LeetCode1Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */; };
		F33D623C2BB190E54E3D207D /* 55. Jump Game.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */; };
		F34928B1B8FFFC0C8B142662 /* 2212. Sensors.swift in Sources */ = {isa = PBXBuildFile; fileRef = B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */; };
		F9793127364A2E8B02D9FCED /* BOJ1806Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */; };
		F9CF510FA1B30BF96E5E3334 /* 753. Open the Lock.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */; };
		FBD0578BA334A6AEE0BB4B69 /* LeetCode21Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */; };
		FC374C1BAB7BC1184094E7E6 /* 463. Island Perimeter.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */; };
		FF44CB3EB03092BEEBD8215E /* 42. Trapping Rain Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		BAF746D9299B78D600182311 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode121Tests.swift; sourceTree = "<group>"; };
		043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ20366Tests.swift; sourceTree = "<group>"; };
		04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "125. Valid Palindrome.swift"; sourceTree = "<group>"; };
		0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1916Tests.swift; sourceTree = "<group>"; };
		097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1219Tests.swift; sourceTree = "<group>"; };
		0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2000. Reverse Prefix of Word.swift"; sourceTree = "<group>"; };
		0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "20366. Do you want to build a snowman?.swift"; sourceTree = "<group>"; };
		0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1915. Number of Wonderful Substrings.swift"; sourceTree = "<group>"; };
		0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "572. Subtree of Another Tree.swift"; sourceTree = "<group>"; };
		10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1912Tests.swift; sourceTree = "<group>"; };
		11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "252. Meeting Rooms.swift"; sourceTree = "<group>"; };
		122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "217. Contains Duplicate.swift"; sourceTree = "<group>"; };
		122859837263588F523ABD9A /* 1987. Alphabet.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1987. Alphabet.swift"; sourceTree = "<group>"; };
		12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "14500. Tetromino.swift"; sourceTree = "<group>"; };
		13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3408. Count the Number of Special Characters I.swift"; sourceTree = "<group>"; };
		155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2331Tests.swift; sourceTree = "<group>"; };
		157712F738600FFC186461AB /* 1010. Laying bridges.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1010. Laying bridges.swift"; sourceTree = "<group>"; };
		15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2110Tests.swift; sourceTree = "<group>"; };
		17584F85B15167F0281E936C /* 1912. Continuous sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1912. Continuous sum.swift"; sourceTree = "<group>"; };
		17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "10844. number of easy stairs.swift"; sourceTree = "<group>"; };
		18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode881Tests.swift; sourceTree = "<group>"; };
		1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "129. Sum Root to Leaf Numbers.swift"; sourceTree = "<group>"; };
		1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "18429. root loss.swift"; sourceTree = "<group>"; };
		1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "55. Jump Game.swift"; sourceTree = "<group>"; };
		1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1894Tests.swift; sourceTree = "<group>"; };
		1BD96A68B432584E37757B6A /* 10775. Airport.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "10775. Airport.swift"; sourceTree = "<group>"; };
		1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "463. Island Perimeter.swift"; sourceTree = "<group>"; };
		22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "141. Linked List Cycle.swift"; sourceTree = "<group>"; };
		22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2487Tests.swift; sourceTree = "<group>"; };
		2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1289Tests.swift; sourceTree = "<group>"; };
		23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2812Tests.swift; sourceTree = "<group>"; };
		25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1325Tests.swift; sourceTree = "<group>"; };
		25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "16953. A → B.swift"; sourceTree = "<group>"; };
		294EF7DF806D781B692BB270 /* 9935. string explosion.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "9935. string explosion.swift"; sourceTree = "<group>"; };
		2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2293Tests.swift; sourceTree = "<group>"; };
		2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1759. Create a password.swift"; sourceTree = "<group>"; };
		2EC3121C728E9655DC400056 /* 3111. Censorship.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3111. Censorship.swift"; sourceTree = "<group>"; };
		2FEBCA0B65FDEEBA0DF66309 /* LeetCode1236Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1236Tests.swift; sourceTree = "<group>"; };
		32769F20766FEEC70896B8F0 /* 1238. Parties.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1238. Parties.swift"; sourceTree = "<group>"; };
		3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode861Tests.swift; sourceTree = "<group>"; };
		35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "623. Add One Row to Tree.swift"; sourceTree = "<group>"; };
		361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "121. Best Time to Buy and Sell Stock.swift"; sourceTree = "<group>"; };
		3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1005. ACM Craft.swift"; sourceTree = "<group>"; };
		39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1753Tests.swift; sourceTree = "<group>"; };
		3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ10775Tests.swift; sourceTree = "<group>"; };
		3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "402. Remove K Digits.swift"; sourceTree = "<group>"; };
		3D181C311A7DDCA5F3850FC6 /* BOJ1005Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1005Tests.swift; sourceTree = "<group>"; };
		3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11279. Max Heap.swift"; sourceTree = "<group>"; };
		3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2441Tests.swift; sourceTree = "<group>"; };
		401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1. Two Sum.swift"; sourceTree = "<group>"; };
		42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2805. Cutting trees.swift"; sourceTree = "<group>"; };
		46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "42883. Create a large number.swift"; sourceTree = "<group>"; };
		481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11404. Floyd.swift"; sourceTree = "<group>"; };
		4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "514. Freedom Trail.swift"; sourceTree = "<group>"; };
		528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "786. K-th Smallest Prime Fraction.swift"; sourceTree = "<group>"; };
		54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1325. Delete Leaves With a Given Value.swift"; sourceTree = "<group>"; };
		54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2103. Find All Groups of Farmland.swift"; sourceTree = "<group>"; };
		54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2487. Remove Nodes From Linked List.swift"; sourceTree = "<group>"; };
		56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2580. Sudoku.swift"; sourceTree = "<group>"; };
		577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3197. The Lake of Swan.swift"; sourceTree = "<group>"; };
		57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2331. Evaluate Boolean Binary Tree.swift"; sourceTree = "<group>"; };
		5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3075Tests.swift; sourceTree = "<group>"; };
		5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode20Tests.swift; sourceTree = "<group>"; };
		5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1806Tests.swift; sourceTree = "<group>"; };
		61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "678. Valid Parenthesis String.swift"; sourceTree = "<group>"; };
		61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2293. Coin I.swift"; sourceTree = "<group>"; };
		6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode506Tests.swift; sourceTree = "<group>"; };
		66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1030. Smallest String Starting From Leaf.swift"; sourceTree = "<group>"; };
		689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "85. Maximal Rectangle.swift"; sourceTree = "<group>"; };
		6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1916. Finding the minimum cost.swift"; sourceTree = "<group>"; };
		6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "53. Maximum Subarray.swift"; sourceTree = "<group>"; };
		6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode242Tests.swift; sourceTree = "<group>"; };
		705063D013249906171AC36F /* LeetCode2000Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2000Tests.swift; sourceTree = "<group>"; };
		74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1219. Path with Maximum Gold.swift"; sourceTree = "<group>"; };
		74DADA5B240793D631B03452 /* 1927. Min Heap.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1927. Min Heap.swift"; sourceTree = "<group>"; };
		757659B4899D65BB002B18CF /* LeetCode125Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode125Tests.swift; sourceTree = "<group>"; };
		762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "165. Compare Version Numbers.swift"; sourceTree = "<group>"; };
		76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2252Tests.swift; sourceTree = "<group>"; };
		7751B3D59332952585B66641 /* LeetCode2816Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2816Tests.swift; sourceTree = "<group>"; };
		77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11404Tests.swift; sourceTree = "<group>"; };
		78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "84. Largest Rectangle in Histogram.swift"; sourceTree = "<group>"; };
		7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ3197Tests.swift; sourceTree = "<group>"; };
		7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2370Tests.swift; sourceTree = "<group>"; };
		7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode70Tests.swift; sourceTree = "<group>"; };
		7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode141Tests.swift; sourceTree = "<group>"; };
		7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2121. Find if Path Exists in Graph.swift"; sourceTree = "<group>"; };
		7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode252Tests.swift; sourceTree = "<group>"; };
		82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2110. Installing a router.swift"; sourceTree = "<group>"; };
		82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode834Tests.swift; sourceTree = "<group>"; };
		837C0064F1B04FF020088628 /* 200. Number of Islands.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "200. Number of Islands.swift"; sourceTree = "<group>"; };
		8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1Tests.swift; sourceTree = "<group>"; };
		8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2997Tests.swift; sourceTree = "<group>"; };
		8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode979Tests.swift; sourceTree = "<group>"; };
		8E0425866283B95D0634005E /* BOJ2212Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2212Tests.swift; sourceTree = "<group>"; };
		93F79F456DF0F686DC7D37F3 /* BOJ1010Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1010Tests.swift; sourceTree = "<group>"; };
		9529500EC53BD87590C5280C /* BOJ14500Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ14500Tests.swift; sourceTree = "<group>"; };
		95E754B77DED66104FACA354 /* LeetCode514Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode514Tests.swift; sourceTree = "<group>"; };
		9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1894. 4th dot.swift"; sourceTree = "<group>"; };
		98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ17298Tests.swift; sourceTree = "<group>"; };
		9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode572Tests.swift; sourceTree = "<group>"; };
		9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "237. Delete Node in a Linked List.swift"; sourceTree = "<group>"; };
		9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2812. Find the Safest Path in a Grid.swift"; sourceTree = "<group>"; };
		9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "17298. Right Larger Numbers.swift"; sourceTree = "<group>"; };
		A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode206Tests.swift; sourceTree = "<group>"; };
		A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "347. Top K Frequent Elements.swift"; sourceTree = "<group>"; };
		A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1753. Shortest path.swift"; sourceTree = "<group>"; };
		A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "857. Minimum Cost to Hire K Workers.swift"; sourceTree = "<group>"; };
		A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2370. Longest Ideal Subsequence.swift"; sourceTree = "<group>"; };
		A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ15686Tests.swift; sourceTree = "<group>"; };
		A8255C48D493D5D4123554B4 /* BOJ1238Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1238Tests.swift; sourceTree = "<group>"; };
		A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "70. Climbing Stairs.swift"; sourceTree = "<group>"; };
		AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "979. Distribute Coins in Binary Tree.swift"; sourceTree = "<group>"; };
		AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode226Tests.swift; sourceTree = "<group>"; };
		AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3404. Minimum Number of Operations to Satisfy Conditions.swift"; sourceTree = "<group>"; };
		AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "100. Same Tree.swift"; sourceTree = "<group>"; };
		AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11286. Heap of absolute values.swift"; sourceTree = "<group>"; };
		B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2805Tests.swift; sourceTree = "<group>"; };
		B226D6181F521969A817995D /* 242. Valid Anagram.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "242. Valid Anagram.swift"; sourceTree = "<group>"; };
		B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode857Tests.swift; sourceTree = "<group>"; };
		B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "15686. Chicken delivery.swift"; sourceTree = "<group>"; };
		B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "21. Merge Two Sorted Lists.swift"; sourceTree = "<group>"; };
		B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2212. Sensors.swift"; sourceTree = "<group>"; };
		B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3405. Count the Number of Special Characters II.swift"; sourceTree = "<group>"; };
		B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2252. Line up.swift"; sourceTree = "<group>"; };
		B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode4Tests.swift; sourceTree = "<group>"; };
		BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = AlgorithmTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ18231Tests.swift; sourceTree = "<group>"; };
		BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ18429Tests.swift; sourceTree = "<group>"; };
		BA2DE3C92BF493F6003BC8FA /* Heap.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Heap.swift; sourceTree = "<group>"; };
		BA402F562B848BC600E86AAD /* Utils.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Utils.swift; sourceTree = "<group>"; };
		BA5F43E02BE61D2E000AE158 /* ListNode.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ListNode.swift; sourceTree = "<group>"; };
		BA688CB02BF094B900009F37 /* Interval.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Interval.swift; sourceTree = "<group>"; };
		BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "100294. Count the Number of Special Characters I.swift"; sourceTree = "<group>"; };
		BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "100291. Count the Number of Special Characters II.swift"; sourceTree = "<group>"; };
		BAF443E32BCD1256007D25A6 /* TreeNode.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TreeNode.swift; sourceTree = "<group>"; };
		BAF746DB299B78D600182311 /* Algorithm */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Algorithm; sourceTree = BUILT_PRODUCTS_DIR; };
		BAF746DE299B78D600182311 /* main.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = main.swift; sourceTree = "<group>"; };
		BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2816. Double a Number Represented as a Linked List.swift"; sourceTree = "<group>"; };
		BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "206. Reverse Linked List.swift"; sourceTree = "<group>"; };
		BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "20. Valid Parentheses.swift"; sourceTree = "<group>"; };
		C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "104. Maximum Depth of Binary Tree.swift"; sourceTree = "<group>"; };
		C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2997. Minimum Number of Operations to Make Array XOR Equal to K.swift"; sourceTree = "<group>"; };
		C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "226. Invert Binary Tree.swift"; sourceTree = "<group>"; };
		CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "42. Trapping Rain Water.swift"; sourceTree = "<group>"; };
		CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1806. Partial sum.swift"; sourceTree = "<group>"; };
		CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode21Tests.swift; sourceTree = "<group>"; };
		CF8265795FE76682687EF63A /* LeetCode237Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode237Tests.swift; sourceTree = "<group>"; };
		D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1987Tests.swift; sourceTree = "<group>"; };
		D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "987. Reveal Cards In Increasing Order.swift"; sourceTree = "<group>"; };
		D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2441. Largest Positive Integer That Exists With Its Negative.swift"; sourceTree = "<group>"; };
		D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "506. Relative Ranks.swift"; sourceTree = "<group>"; };
		D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "834. Sum of Distances in Tree.swift"; sourceTree = "<group>"; };
		D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ16953Tests.swift; sourceTree = "<group>"; };
		D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "881. Boats to Save People.swift"; sourceTree = "<group>"; };
		D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3075. Maximize Happiness of Selected Children.swift"; sourceTree = "<group>"; };
		DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode786Tests.swift; sourceTree = "<group>"; };
		DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2373Tests.swift; sourceTree = "<group>"; };
		DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode104Tests.swift; sourceTree = "<group>"; };
		DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2373. Largest Local Values in a Matrix.swift"; sourceTree = "<group>"; };
		DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1289. Minimum Falling Path Sum II.swift"; sourceTree = "<group>"; };
		DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "18231. destroyed city.swift"; sourceTree = "<group>"; };
		E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "861. Score After Flipping Matrix.swift"; sourceTree = "<group>"; };
		E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11286Tests.swift; sourceTree = "<group>"; };
		E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode165Tests.swift; sourceTree = "<group>"; };
		EA0A2B3410312D7B5AB8A9E7 /* 1236. N-th Tribonacci Number.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1236. N-th Tribonacci Number.swift"; sourceTree = "<group>"; };
		EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "310. Minimum Height Trees.swift"; sourceTree = "<group>"; };
		ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode217Tests.swift; sourceTree = "<group>"; };
		ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "4. Median of Two Sorted Arrays.swift"; sourceTree = "<group>"; };
		EE44BB7EF7D2687E3DF8BC15 /* 258709. Pick a die.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "258709. Pick a die.swift"; sourceTree = "<group>"; };
		F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1915Tests.swift; sourceTree = "<group>"; };
		F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ3015Tests.swift; sourceTree = "<group>"; };
		F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode100Tests.swift; sourceTree = "<group>"; };
		F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11279Tests.swift; sourceTree = "<group>"; };
		F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "753. Open the Lock.swift"; sourceTree = "<group>"; };
		F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3015. Reunite Oasis.swift"; sourceTree = "<group>"; };
		F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2580Tests.swift; sourceTree = "<group>"; };
		FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1927Tests.swift; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		BA1BB8822BD75C9800CA174B /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		BAF746D8299B78D600182311 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		BA03EE6C2BD0BDA900F1DF61 /* BOJ */ = {
			isa = PBXGroup;
			children = (
				BA03EE6E2BD0BDCF00F1DF61 /* Bronze */,
				BA03EE6F2BD0BDD300F1DF61 /* Silver */,
				BA03EE6D2BD0BDB100F1DF61 /* Gold */,
				BA03EE702BD0BDDA00F1DF61 /* Platinum */,
				BA03EE712BD0BDE000F1DF61 /* Diamond */,
				BA03EE722BD0BDE300F1DF61 /* Unknown */,
			);
			path = BOJ;
			sourceTree = "<group>";
		};
		BA03EE6D2BD0BDB100F1DF61 /* Gold */ = {
			isa = PBXGroup;
			children = (
				3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */,
				32769F20766FEEC70896B8F0 /* 1238. Parties.swift */,
				A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */,
				2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */,
				CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */,
				6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */,
				122859837263588F523ABD9A /* 1987. Alphabet.swift */,
				82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */,
				B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */,
				B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */,
				61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */,
				56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */,
				294EF7DF806D781B692BB270 /* 9935. string explosion.swift */,
				1BD96A68B432584E37757B6A /* 10775. Airport.swift */,
				481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */,
				12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */,
				B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */,
				9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */,
				DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */,
				0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */,
			);
			path = Gold;
			sourceTree = "<group>";
		};
		BA03EE6E2BD0BDCF00F1DF61 /* Bronze */ = {
			isa = PBXGroup;
			children = (
				9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */,
			);
			path = Bronze;
			sourceTree = "<group>";
		};
		BA03EE6F2BD0BDD300F1DF61 /* Silver */ = {
			isa = PBXGroup;
			children = (
				157712F738600FFC186461AB /* 1010. Laying bridges.swift */,
				17584F85B15167F0281E936C /* 1912. Continuous sum.swift */,
				74DADA5B240793D631B03452 /* 1927. Min Heap.swift */,
				42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */,
				17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */,
				3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */,
				AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */,
				25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */,
				1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */,
			);
			path = Silver;
			sourceTree = "<group>";
		};
		BA03EE702BD0BDDA00F1DF61 /* Platinum */ = {
			isa = PBXGroup;
			children = (
				F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */,
				2EC3121C728E9655DC400056 /* 3111. Censorship.swift */,
				577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */,
			);
			path = Platinum;
			sourceTree = "<group>";
		};
		BA03EE712BD0BDE000F1DF61 /* Diamond */ = {
			isa = PBXGroup;
			children = (
			);
			path = Diamond;
			sourceTree = "<group>";
		};
		BA03EE722BD0BDE300F1DF61 /* Unknown */ = {
			isa = PBXGroup;
			children = (
			);
			path = Unknown;
			sourceTree = "<group>";
		};
		BA1BB8862BD75C9800CA174B /* AlgorithmTests */ = {
			isa = PBXGroup;
			children = (
				BA1BB88C2BD75CDC00CA174B /* BOJ */,
				BA1BB88D2BD75CDF00CA174B /* LeetCode */,
				BA1BB88E2BD75CE400CA174B /* Programmers */,
			);
			path = AlgorithmTests;
			sourceTree = "<group>";
		};
		BA1BB88C2BD75CDC00CA174B /* BOJ */ = {
			isa = PBXGroup;
			children = (
				3D181C311A7DDCA5F3850FC6 /* BOJ1005Tests.swift */,
				93F79F456DF0F686DC7D37F3 /* BOJ1010Tests.swift */,
				A8255C48D493D5D4123554B4 /* BOJ1238Tests.swift */,
				39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */,
				5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */,
				1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */,
				10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */,
				0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */,
				FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */,
				D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */,
				15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */,
				8E0425866283B95D0634005E /* BOJ2212Tests.swift */,
				76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */,
				2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */,
				F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */,
				B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */,
				F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */,
				7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */,
				3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */,
				F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */,
				E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */,
				77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */,
				9529500EC53BD87590C5280C /* BOJ14500Tests.swift */,
				A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */,
				D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */,
				98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */,
				BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */,
				BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */,
				043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */,
			);
			path = BOJ;
			sourceTree = "<group>";
		};
		BA1BB88D2BD75CDF00CA174B /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */,
				B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */,
				5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */,
				CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */,
				7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */,
				F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */,
				DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */,
				02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */,
				757659B4899D65BB002B18CF /* LeetCode125Tests.swift */,
				7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */,
				E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */,
				A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */,
				ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */,
				AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */,
				CF8265795FE76682687EF63A /* LeetCode237Tests.swift */,
				6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */,
				7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */,
				6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */,
				95E754B77DED66104FACA354 /* LeetCode514Tests.swift */,
				9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */,
				DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */,
				82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */,
				B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */,
				3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */,
				18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */,
				8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */,
				097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */,
				2FEBCA0B65FDEEBA0DF66309 /* LeetCode1236Tests.swift */,
				2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */,
				25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */,
				F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */,
				705063D013249906171AC36F /* LeetCode2000Tests.swift */,
				155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */,
				7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */,
				DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */,
				3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */,
				22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */,
				23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */,
				7751B3D59332952585B66641 /* LeetCode2816Tests.swift */,
				8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */,
				5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA1BB88E2BD75CE400CA174B /* Programmers */ = {
			isa = PBXGroup;
			children = (
			);
			path = Programmers;
			sourceTree = "<group>";
		};
		BA30930E299F851800FCD5F3 /* Base */ = {
			isa = PBXGroup;
			children = (
				BA688CAF2BF094AB00009F37 /* LeetCode */,
				BA402F562B848BC600E86AAD /* Utils.swift */,
				BA2DE3C92BF493F6003BC8FA /* Heap.swift */,
			);
			path = Base;
			sourceTree = "<group>";
		};
		BA688CAF2BF094AB00009F37 /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				BAF443E32BCD1256007D25A6 /* TreeNode.swift */,
				BA5F43E02BE61D2E000AE158 /* ListNode.swift */,
				BA688CB02BF094B900009F37 /* Interval.swift */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA6B50192BCA35AE00B1715B /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				BA9BA9642BD4B2820060047E /* weekly-contest-394 */,
				BACABE092BCD0551005A197C /* Easy */,
				BACABE0A2BCD0555005A197C /* Medium */,
				BACABE0B2BCD0565005A197C /* Hard */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA9BA9642BD4B2820060047E /* weekly-contest-394 */ = {
			isa = PBXGroup;
			children = (
				BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */,
				BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */,
			);
			path = "weekly-contest-394";
			sourceTree = "<group>";
		};
		BACABE092BCD0551005A197C /* Easy */ = {
			isa = PBXGroup;
			children = (
				401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */,
				BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */,
				B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */,
				A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */,
				AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */,
				C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */,
				361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */,
				04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */,
				22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */,
				BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */,
				122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */,
				C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */,
				B226D6181F521969A817995D /* 242. Valid Anagram.swift */,
				11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */,
				1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */,
				D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */,
				0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */,
				EA0A2B3410312D7B5AB8A9E7 /* 1236. N-th Tribonacci Number.swift */,
				0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */,
				7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */,
				57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */,
				DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */,
				D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */,
				13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		BACABE0A2BCD0555005A197C /* Medium */ = {
			isa = PBXGroup;
			children = (
				6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */,
				1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */,
				1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */,
				762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */,
				837C0064F1B04FF020088628 /* 200. Number of Islands.swift */,
				9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */,
				EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */,
				A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */,
				3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */,
				35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */,
				61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */,
				F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */,
				528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */,
				E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */,
				D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */,
				AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */,
				D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */,
				66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */,
				74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */,
				54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */,
				0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */,
				54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */,
				A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */,
				54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */,
				9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */,
				BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */,
				C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */,
				D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */,
				AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */,
				B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		BACABE0B2BCD0565005A197C /* Hard */ = {
			isa = PBXGroup;
			children = (
				ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */,
				CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */,
				78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */,
				689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */,
				4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */,
				D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */,
				A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */,
				DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */,
			);
			path = Hard;
			sourceTree = "<group>";
		};
		BAF746D2299B78D600182311 = {
			isa = PBXGroup;
			children = (
				BAF746DD299B78D600182311 /* Algorithm */,
				BA1BB8862BD75C9800CA174B /* AlgorithmTests */,
				BAF746DC299B78D600182311 /* Products */,
			);
			sourceTree = "<group>";
		};
		BAF746DC299B78D600182311 /* Products */ = {
			isa = PBXGroup;
			children = (
				BAF746DB299B78D600182311 /* Algorithm */,
				BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		BAF746DD299B78D600182311 /* Algorithm */ = {
			isa = PBXGroup;
			children = (
				BAF746DE299B78D600182311 /* main.swift */,
				BA30930E299F851800FCD5F3 /* Base */,
				BA03EE6C2BD0BDA900F1DF61 /* BOJ */,
				BA6B50192BCA35AE00B1715B /* LeetCode */,
				BAF746E6299B7C4A00182311 /* Programmers */,
			);
			path = Algorithm;
			sourceTree = "<group>";
		};
		BAF746E6299B7C4A00182311 /* Programmers */ = {
			isa = PBXGroup;
			children = (
				46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */,
				EE44BB7EF7D2687E3DF8BC15 /* 258709. Pick a die.swift */,
			);
			path = Programmers;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		BA1BB8842BD75C9800CA174B /* AlgorithmTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = BA1BB88B2BD75C9800CA174B /* Build configuration list for PBXNativeTarget "AlgorithmTests" */;
			buildPhases = (
				BA1BB8812BD75C9800CA174B /* Sources */,
				BA1BB8822BD75C9800CA174B /* Frameworks */,
				BA1BB8832BD75C9800CA174B /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = AlgorithmTests;
			productName = AlgorithmTests;
			productReference = BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		BAF746DA299B78D600182311 /* Algorithm */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = BAF746E2299B78D600182311 /* Build configuration list for PBXNativeTarget "Algorithm" */;
			buildPhases = (
				BAF443E52BCE18DE007D25A6 /* SwiftFormat */,
				BAF746D7299B78D600182311 /* Sources */,
				BAF746D8299B78D600182311 /* Frameworks */,
				BAF746D9299B78D600182311 /* CopyFiles */,
				BAF443E62BCE18E3007D25A6 /* SwiftLint */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Algorithm;
			productName = Algorithm;
			productReference = BAF746DB299B78D600182311 /* Algorithm */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		BAF746D3299B78D600182311 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1530;
				LastUpgradeCheck = 1530;
				TargetAttributes = {
					BA1BB8842BD75C9800CA174B = {
						CreatedOnToolsVersion = 15.3;
					};
					BAF746DA299B78D600182311 = {
						CreatedOnToolsVersion = 14.2;
					};
				};
			};
			buildConfigurationList = BAF746D6299B78D600182311 /* Build configuration list for PBXProject "Algorithm" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = BAF746D2299B78D600182311;
			productRefGroup = BAF746DC299B78D600182311 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				BAF746DA299B78D600182311 /* Algorithm */,
				BA1BB8842BD75C9800CA174B /* AlgorithmTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		BA1BB8832BD75C9800CA174B /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		BAF443E52BCE18DE007D25A6 /* SwiftFormat */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = SwiftFormat;
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "export PATH=\"$PATH:/opt/homebrew/bin\"\nif which swiftformat > /dev/null; then\n    swiftformat .\nelse\n    echo \"warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat\"\nfi\n";
		};
		BAF443E62BCE18E3007D25A6 /* SwiftLint */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = SwiftLint;
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "export PATH=\"$PATH:/opt/homebrew/bin\"\nif which swiftlint > /dev/null; then\n    swiftlint --config \"$SRCROOT/.swiftlint.yml\"\n    # swiftlint --fix && swiftlint\nelse\n    echo \"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"\nfi\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		BA1BB8812BD75C9800CA174B /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BA1B02E02BE1D6AD0018D1BE /* 2000. Reverse Prefix of Word.swift in Sources */,
				BA58C3D32BE5F1EA00EF519E /* 11286. Heap of absolute values.swift in Sources */,
				BA57F1DD2BE8C29E00569604 /* 1912. Continuous sum.swift in Sources */,
				BA1BB8922BD78F9600CA174B /* 18429. root loss.swift in Sources */,
				BA2A2B962BDA44930099FF73 /* 4. Median of Two Sorted Arrays.swift in Sources */,
				BA2DE3C82BF485EE003BC8FA /* 1238. Parties.swift in Sources */,
				BA653D662BDCCD9200328F08 /* 17298. Right Larger Numbers.swift in Sources */,
				BA6EBDD72BDBCDC300FAC927 /* 217. Contains Duplicate.swift in Sources */,
				BA6028C12BEC9BAC005F922E /* 1005. ACM Craft.swift in Sources */,
				BA5F43DF2BE61748000AE158 /* 20. Valid Parentheses.swift in Sources */,
				BACCE9842BF6D8290015C397 /* 1325. Delete Leaves With a Given Value.swift in Sources */,
				BA98BB3E2BD8DF2400C85E77 /* 1894. 4th dot.swift in Sources */,
				BA98BB3D2BD8D81200C85E77 /* 1236. N-th Tribonacci Number.swift in Sources */,
				BA1BB8882BD75C9800CA174B /* BOJ18231Tests.swift in Sources */,
				BAD3DBA22BEE427A002463B7 /* 100. Same Tree.swift in Sources */,
				BA63C1CA2BDB37F500CF76E8 /* 1289. Minimum Falling Path Sum II.swift in Sources */,
				BA44EB312BE32ED800A94445 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */,
				BA6ADF2D2BF4540A009174BE /* 2812. Find the Safest Path in a Grid.swift in Sources */,
				BA98BB3F2BD8EEFF00C85E77 /* 10775. Airport.swift in Sources */,
				BAD3DBA02BEE16FE002463B7 /* 1010. Laying bridges.swift in Sources */,
				BA9328742BDA71E40060E7CD /* 2212. Sensors.swift in Sources */,
				BA8AF85F2BE6317900D1737E /* 141. Linked List Cycle.swift in Sources */,
				BA9F02B52BE8A255007B8DB5 /* 2487. Remove Nodes From Linked List.swift in Sources */,
				BA137FC42BE49E1700F50CB7 /* 165. Compare Version Numbers.swift in Sources */,
				BA59963E2BF58EDF006CF31D /* 11404. Floyd.swift in Sources */,
				BA57F1DC2BE8BCE300569604 /* 2580. Sudoku.swift in Sources */,
				BA1BB88F2BD75E8400CA174B /* 18231. destroyed city.swift in Sources */,
				BA3C4ECA2BEDE3F500EFE29C /* 786. K-th Smallest Prime Fraction.swift in Sources */,
				BA1BB8912BD78F8700CA174B /* BOJ18429Tests.swift in Sources */,
				428CA4392D21B77061E8F1DB /* LeetCode1236Tests.swift in Sources */,
				CD31C9625EC944EF8846F1C6 /* BOJ1894Tests.swift in Sources */,
				6927F41D517BB843E0F76606 /* BOJ10775Tests.swift in Sources */,
				BA6EBDD82BDBCF4800FAC927 /* 242. Valid Anagram.swift in Sources */,
				BAA8B6572BD9FF560016D105 /* 3197. The Lake of Swan.swift in Sources */,
				BAC965FE2BE74B3100F4BE29 /* 1987. Alphabet.swift in Sources */,
				BA1B02E12BE1D9F20018D1BE /* 11279. Max Heap.swift in Sources */,
				BAA8B6562BD9F6B40016D105 /* 2370. Longest Ideal Subsequence.swift in Sources */,
				BAC5583A2BE0BEB800EEB13B /* 2805. Cutting trees.swift in Sources */,
				BAD3DBA42BEE4871002463B7 /* 70. Climbing Stairs.swift in Sources */,
				BA6F36B82BF6DCC30035E84D /* 1806. Partial sum.swift in Sources */,
				BA59CCB42BDFB94200219E83 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */,
				BA4C95E32BEA00C300E80D08 /* 1916. Finding the minimum cost.swift in Sources */,
				563CBAA119F321C46477CB9D /* LeetCode2370Tests.swift in Sources */,
				BA6028C02BEC97A6005F922E /* 3075. Maximize Happiness of Selected Children.swift in Sources */,
				BA63C1CB2BDB3F9600CF76E8 /* 20366. Do you want to build a snowman?.swift in Sources */,
				BA59CCB52BDFD3B600219E83 /* 15686. Chicken delivery.swift in Sources */,
				BA137FC52BE4A3F900F50CB7 /* 1753. Shortest path.swift in Sources */,
				9397FCD75FC827375DD22D50 /* BOJ3197Tests.swift in Sources */,
				BA58C3D22BE5DFFD00EF519E /* 881. Boats to Save People.swift in Sources */,
				C87E44BC725BBCA98CA8D8E4 /* LeetCode4Tests.swift in Sources */,
				BA6EBDD92BDBD07500FAC927 /* 1. Two Sum.swift in Sources */,
				BAD3DBA52BEF0036002463B7 /* 857. Minimum Cost to Hire K Workers.swift in Sources */,
				B25327AB7F233F884E784562 /* BOJ2212Tests.swift in Sources */,
				BAD0548D2BE9B7A700B89545 /* 2816. Double a Number Represented as a Linked List.swift in Sources */,
				BA6EBDDC2BDCA93900FAC927 /* 514. Freedom Trail.swift in Sources */,
				E4E957C7A58659AF82B00781 /* LeetCode1289Tests.swift in Sources */,
				E4B77CCE7DCC09274BA44ECE /* BOJ20366Tests.swift in Sources */,
				1CCF5051F633FF411388A34C /* LeetCode217Tests.swift in Sources */,
				BA77F1642BDDEE7F00C3B741 /* 834. Sum of Distances in Tree.swift in Sources */,
				BA77F1652BDE13CD00C3B741 /* 2293. Coin I.swift in Sources */,
				BAC965FD2BE7406D00F4BE29 /* 237. Delete Node in a Linked List.swift in Sources */,
				732E5A5C32D44BE1962A1981 /* LeetCode242Tests.swift in Sources */,
				BA6EBDDA2BDBD96500FAC927 /* 125. Valid Palindrome.swift in Sources */,
				BA688CB22BF095C800009F37 /* Interval.swift in Sources */,
				F1EC137A1A30900D9031EE8E /* LeetCode1Tests.swift in Sources */,
				BA688CAE2BF093B500009F37 /* 252. Meeting Rooms.swift in Sources */,
				769AF1997B87BFA79723DEC1 /* LeetCode125Tests.swift in Sources */,
				BA6EBDDB2BDBE14000FAC927 /* 121. Best Time to Buy and Sell Stock.swift in Sources */,
				244905F7EE87422AD3260F09 /* LeetCode121Tests.swift in Sources */,
				BA44EB322BE3305500A94445 /* 1927. Min Heap.swift in Sources */,
				ED860DD7204EFEFED588EA5F /* LeetCode514Tests.swift in Sources */,
				F10BA05B916C440AD7BF14C7 /* BOJ17298Tests.swift in Sources */,
				BAA50C7A2BF1BBF70079ECDE /* 861. Score After Flipping Matrix.swift in Sources */,
				BAD749022BF31FA000E7D03E /* 1219. Path with Maximum Gold.swift in Sources */,
				BA5F43E22BE61D64000AE158 /* 206. Reverse Linked List.swift in Sources */,
				BAD0548E2BE9BB9400B89545 /* 3015. Reunite Oasis.swift in Sources */,
				71BCF67A948FE6952FE0A3FC /* LeetCode834Tests.swift in Sources */,
				BA688CAD2BF089BD00009F37 /* 16953. A → B.swift in Sources */,
				BA8AF8602BE63C6800D1737E /* 226. Invert Binary Tree.swift in Sources */,
				BA57DEE32BE09BA000073C18 /* 1915. Number of Wonderful Substrings.swift in Sources */,
				C174FA13DF6647CABA406969 /* BOJ2293Tests.swift in Sources */,
				C10A6CDAD074405CAC64B0D8 /* LeetCode2997Tests.swift in Sources */,
				DF1E85940105D4845A53B0B0 /* BOJ15686Tests.swift in Sources */,
				24BF6E356DC21458CC75D808 /* LeetCode1915Tests.swift in Sources */,
				72B519C20C01453ABD1D690C /* BOJ2805Tests.swift in Sources */,
				BAD951152BEBC5D600806D4C /* 506. Relative Ranks.swift in Sources */,
				DC35452B7543C80A9E697A6C /* LeetCode2000Tests.swift in Sources */,
				BA5F43E32BE62003000AE158 /* ListNode.swift in Sources */,
				E14F847269046FDB8DFB2369 /* BOJ11279Tests.swift in Sources */,
				7D15BE7562BD0E4035409427 /* LeetCode2441Tests.swift in Sources */,
				13B2FC575BC0C08C5F7E88D3 /* BOJ1927Tests.swift in Sources */,
				BA5F43E42BE62007000AE158 /* TreeNode.swift in Sources */,
				EB2F8B6BD40873DC6C7979A3 /* LeetCode165Tests.swift in Sources */,
				BAD749032BF330BA00E7D03E /* 14500. Tetromino.swift in Sources */,
				B7F3A07EF15436FAA05A09FA /* BOJ1753Tests.swift in Sources */,
				A91BBBAADAC5753B36B20622 /* LeetCode881Tests.swift in Sources */,
				BAD3DBA12BEE40FF002463B7 /* 104. Maximum Depth of Binary Tree.swift in Sources */,
				2110AFABEB88CF65E9C1822D /* BOJ11286Tests.swift in Sources */,
				BA5F43E52BE627C2000AE158 /* 21. Merge Two Sorted Lists.swift in Sources */,
				6A0C7E0B4631B3B549EB835F /* LeetCode20Tests.swift in Sources */,
				C9AA781E33E53CA0F2B27B5B /* LeetCode206Tests.swift in Sources */,
				FBD0578BA334A6AEE0BB4B69 /* LeetCode21Tests.swift in Sources */,
				DC87DB72942D3E8CEA455C82 /* LeetCode141Tests.swift in Sources */,
				14002FD4EB3CA0FC5590AD59 /* LeetCode226Tests.swift in Sources */,
				BA57D06A2BEF16A500CAF130 /* 2110. Installing a router.swift in Sources */,
				B1497A94E45EBF47364E6ADD /* LeetCode237Tests.swift in Sources */,
				8BEE20091C43BC7EC2617BD2 /* BOJ1987Tests.swift in Sources */,
				2EC991651E7EA33215056405 /* LeetCode2487Tests.swift in Sources */,
				BA2DE3CB2BF4943A003BC8FA /* Heap.swift in Sources */,
				1DEA772E676BD75354229402 /* BOJ2580Tests.swift in Sources */,
				C8ECE6E8F967AF9BDCD9EEE8 /* BOJ1912Tests.swift in Sources */,
				D4F0D8E8E663A63F336D9EB8 /* LeetCode2816Tests.swift in Sources */,
				81888093F324533D436DF72E /* BOJ3015Tests.swift in Sources */,
				403FBDB8CB8A5BA4AF296E75 /* BOJ1916Tests.swift in Sources */,
				2F04F3B2171C143F43B93171 /* LeetCode506Tests.swift in Sources */,
				437714D47CFDB2780613E7D3 /* LeetCode3075Tests.swift in Sources */,
				5A45056D20272E3F85346400 /* BOJ1005Tests.swift in Sources */,
				A9D1F499D140D497D5916EC6 /* LeetCode786Tests.swift in Sources */,
				BAE7BEB22BF086C2008503CE /* 2373. Largest Local Values in a Matrix.swift in Sources */,
				07D7B9C5E5B026AC397512F8 /* BOJ1010Tests.swift in Sources */,
				2E89C89BAC6807AC1DB6BE1F /* LeetCode104Tests.swift in Sources */,
				BAACE2C52BF58DC600A29E7B /* 2331. Evaluate Boolean Binary Tree.swift in Sources */,
				BAD3DBA32BEE448A002463B7 /* 572. Subtree of Another Tree.swift in Sources */,
				EFAF18D58C399F9720BE65DA /* LeetCode100Tests.swift in Sources */,
				DB36B23DCEE11927089EAC04 /* LeetCode572Tests.swift in Sources */,
				343665131EEABD35FCBA8D44 /* LeetCode70Tests.swift in Sources */,
				3F23228450060BE574C01F7A /* LeetCode857Tests.swift in Sources */,
				123BD5BD04CDA4F92E20C728 /* BOJ2110Tests.swift in Sources */,
				77AA405F3125B7BC1E44D830 /* LeetCode2373Tests.swift in Sources */,
				B3CB0C50A0F5B375CA944754 /* BOJ16953Tests.swift in Sources */,
				A6CC1AF0F31C3135CE20D40A /* LeetCode252Tests.swift in Sources */,
				BAB9B9492BF865FA00DEF653 /* 979. Distribute Coins in Binary Tree.swift in Sources */,
				F01E4AB8A934DD5C4EDE3469 /* LeetCode861Tests.swift in Sources */,
				47539B1D2033692B4F6051B6 /* BOJ2252Tests.swift in Sources */,
				BAA50C7B2BF1CFB50079ECDE /* 2252. Line up.swift in Sources */,
				9F48B1AC2DFE123B54EB2C41 /* LeetCode1219Tests.swift in Sources */,
				CB4CC72290B1420BED924018 /* BOJ14500Tests.swift in Sources */,
				273AF78AB87FD153CE94E361 /* LeetCode2812Tests.swift in Sources */,
				61F21C1CC8CADC4C97A9BC90 /* BOJ1238Tests.swift in Sources */,
				E5B4D9ED3F67E52CC775F6C2 /* LeetCode2331Tests.swift in Sources */,
				5BC50B19D37B97F97B237B96 /* BOJ11404Tests.swift in Sources */,
				C530A0FCD842D8CF1DA82E6E /* LeetCode1325Tests.swift in Sources */,
				F9793127364A2E8B02D9FCED /* BOJ1806Tests.swift in Sources */,
				150F01B1AFE39E6872990BCE /* LeetCode979Tests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		BAF746D7299B78D600182311 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BAF746DF299B78D600182311 /* main.swift in Sources */,
				BAF443E42BCD1256007D25A6 /* TreeNode.swift in Sources */,
				BA9BA9662BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift in Sources */,
				BA402F572B848BC600E86AAD /* Utils.swift in Sources */,
				AF2867E443D338416AD5647D /* 129. Sum Root to Leaf Numbers.swift in Sources */,
				9B678B0352E8D6A7FDE87D31 /* 623. Add One Row to Tree.swift in Sources */,
				FF44CB3EB03092BEEBD8215E /* 42. Trapping Rain Water.swift in Sources */,
				05BB03033C19747B0BDDA1DC /* 85. Maximal Rectangle.swift in Sources */,
				7E7BED2D34087F88D2F5A70B /* 84. Largest Rectangle in Histogram.swift in Sources */,
				647453E29C0FB86384D43325 /* 987. Reveal Cards In Increasing Order.swift in Sources */,
				BA5F43E12BE61D2E000AE158 /* ListNode.swift in Sources */,
				65C21D1432E3C8E2D257AF6D /* 402. Remove K Digits.swift in Sources */,
				246764F8389A24E26E4F8BA5 /* 347. Top K Frequent Elements.swift in Sources */,
				15A8637E4077E16D9675D702 /* 53. Maximum Subarray.swift in Sources */,
				ADAC39048810E6DC3D734B58 /* 678. Valid Parenthesis String.swift in Sources */,
				42515CC0F9B451335AD25BAD /* 1030. Smallest String Starting From Leaf.swift in Sources */,
				F33D623C2BB190E54E3D207D /* 55. Jump Game.swift in Sources */,
				FC374C1BAB7BC1184094E7E6 /* 463. Island Perimeter.swift in Sources */,
				9653D5809AF9F31705F2CAEF /* 1759. Create a password.swift in Sources */,
				9E92CAA8692DE34C31A0793A /* 200. Number of Islands.swift in Sources */,
				04BBC7F80E4CDDD129B927E7 /* 2103. Find All Groups of Farmland.swift in Sources */,
				35F6CFD292D74C88726B9A70 /* 42883. Create a large number.swift in Sources */,
				1799268B03B55CF7E545D978 /* 10844. number of easy stairs.swift in Sources */,
				BA9BA9682BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift in Sources */,
				D1CD436EF833C0306B3F4F8A /* 3408. Count the Number of Special Characters I.swift in Sources */,
				ED659B162A0990858CF4DA6F /* 3405. Count the Number of Special Characters II.swift in Sources */,
				0298F96EDD1C0CEE2F678853 /* 2121. Find if Path Exists in Graph.swift in Sources */,
				5B1407FC43CB7EB8D99A308B /* 3404. Minimum Number of Operations to Satisfy Conditions.swift in Sources */,
				F9CF510FA1B30BF96E5E3334 /* 753. Open the Lock.swift in Sources */,
				CE6A213992B34D2B4ABF6816 /* 9935. string explosion.swift in Sources */,
				936DBA36E92A4264C883C2E6 /* 3111. Censorship.swift in Sources */,
				45BF9B669CF9B05251086F6B /* 258709. Pick a die.swift in Sources */,
				065FB6159E74C405D97C95C8 /* 310. Minimum Height Trees.swift in Sources */,
				C499DD65E10628A9B228AC27 /* 18231. destroyed city.swift in Sources */,
				86113DAC5600E7252DC6E18E /* 18429. root loss.swift in Sources */,
				EFED1CD0862E4245430E1C06 /* 1236. N-th Tribonacci Number.swift in Sources */,
				D5A7A34381EB73112802F70B /* 1894. 4th dot.swift in Sources */,
				261265B42F0696E0300B0DAD /* 10775. Airport.swift in Sources */,
				E7F90C1C3425675050CD71B8 /* 2370. Longest Ideal Subsequence.swift in Sources */,
				24ABAE9803AC8108CAE8F7B9 /* 3197. The Lake of Swan.swift in Sources */,
				E6402D73EB141156F1D4F6E1 /* 4. Median of Two Sorted Arrays.swift in Sources */,
				F34928B1B8FFFC0C8B142662 /* 2212. Sensors.swift in Sources */,
				276AFFC688E963A4CE1C5424 /* 1289. Minimum Falling Path Sum II.swift in Sources */,
				197093287BFABCAD763F943A /* 20366. Do you want to build a snowman?.swift in Sources */,
				BA688CB12BF094B900009F37 /* Interval.swift in Sources */,
				E36093434D7C646997140739 /* 217. Contains Duplicate.swift in Sources */,
				922639D7DD1CAC0B19672BBA /* 242. Valid Anagram.swift in Sources */,
				CEA813ED69A0FCF2681D2DD1 /* 1. Two Sum.swift in Sources */,
				BE61E278EC8D865A0D5A4726 /* 125. Valid Palindrome.swift in Sources */,
				A3A83F852CFB29C40FB8306F /* 121. Best Time to Buy and Sell Stock.swift in Sources */,
				410E9BE82EC1D30D80C2ED52 /* 514. Freedom Trail.swift in Sources */,
				54AB38AF9E98CD4DA705541C /* 17298. Right Larger Numbers.swift in Sources */,
				25EE03CC12D4D87C0E24DB06 /* 834. Sum of Distances in Tree.swift in Sources */,
				39EC1CFB669DBB0D92864C7B /* 2293. Coin I.swift in Sources */,
				4BEBA57EC537F4869C12FEA8 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */,
				A1D260FBE826ED2057AC26A2 /* 15686. Chicken delivery.swift in Sources */,
				4EC93C2E678396AFB1C0C6F9 /* 1915. Number of Wonderful Substrings.swift in Sources */,
				E6F07A0579F17CF856496A56 /* 2805. Cutting trees.swift in Sources */,
				51138571E50094B927D8F70D /* 2000. Reverse Prefix of Word.swift in Sources */,
				D1F5505C9FFB2481E1C8E9D2 /* 11279. Max Heap.swift in Sources */,
				53660B840A04131325C6A739 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */,
				760102D79A16D3CC121F2DFD /* 1927. Min Heap.swift in Sources */,
				18FF4EE16FC147EAA1A00EA3 /* 165. Compare Version Numbers.swift in Sources */,
				7CD2F76BE035760F99EF54BA /* 1753. Shortest path.swift in Sources */,
				6716C73AF1F01020B7AD7E62 /* 881. Boats to Save People.swift in Sources */,
				2EBAAA36C5A141AE714E507C /* 11286. Heap of absolute values.swift in Sources */,
				3C8A1E8794F04E4A675BFD87 /* 20. Valid Parentheses.swift in Sources */,
				3C2F7ABAD91AB5B16A9A0158 /* 206. Reverse Linked List.swift in Sources */,
				4DE10A7E1B762225A2189222 /* 21. Merge Two Sorted Lists.swift in Sources */,
				8BD03C69B8AEA87FC9494733 /* 141. Linked List Cycle.swift in Sources */,
				8E91B5FF24DDAE2C6F650A37 /* 226. Invert Binary Tree.swift in Sources */,
				BA2DE3CA2BF493F6003BC8FA /* Heap.swift in Sources */,
				5D990747032C8514E7CFC029 /* 237. Delete Node in a Linked List.swift in Sources */,
				58E24341C4C5DA5B7FB80224 /* 1987. Alphabet.swift in Sources */,
				749CB7A5DFB18DC8B6D763C2 /* 2487. Remove Nodes From Linked List.swift in Sources */,
				72D150AF878FB509D0C744BA /* 2580. Sudoku.swift in Sources */,
				9266939C2A222E285DF9FBBA /* 1912. Continuous sum.swift in Sources */,
				D63B9DC8BCAF86678DFBA708 /* 2816. Double a Number Represented as a Linked List.swift in Sources */,
				4CDEA531960EB2203089A2B7 /* 3015. Reunite Oasis.swift in Sources */,
				5E34A0B13371633E581E9DB3 /* 1916. Finding the minimum cost.swift in Sources */,
				E0FCA9FF1181808EAC80F4C3 /* 506. Relative Ranks.swift in Sources */,
				ACB86D2B638188017CB2D792 /* 3075. Maximize Happiness of Selected Children.swift in Sources */,
				2814DA6A2FCECAA8CEDE6FE1 /* 1005. ACM Craft.swift in Sources */,
				5BDCB9416AD674C9A470BFED /* 786. K-th Smallest Prime Fraction.swift in Sources */,
				F17B6C1DBECDBCAC30C386EE /* 1010. Laying bridges.swift in Sources */,
				15FEB4185CB82F43AE345640 /* 104. Maximum Depth of Binary Tree.swift in Sources */,
				63CF486202E3291B4E9CA38E /* 100. Same Tree.swift in Sources */,
				A012C31B7C91B79C0BE6BD54 /* 572. Subtree of Another Tree.swift in Sources */,
				7EC3DE335660AE5578CB4A1D /* 70. Climbing Stairs.swift in Sources */,
				E35D9CC0ED1381DA48C88546 /* 857. Minimum Cost to Hire K Workers.swift in Sources */,
				33C1A1BA18975978C0E00405 /* 2110. Installing a router.swift in Sources */,
				04449173453B83164B7F6907 /* 2373. Largest Local Values in a Matrix.swift in Sources */,
				450755F5CE5103192C27FCE2 /* 16953. A → B.swift in Sources */,
				7B0EA7CB6F912B549A2151E5 /* 252. Meeting Rooms.swift in Sources */,
				081303FE1C1151966DE5A514 /* 861. Score After Flipping Matrix.swift in Sources */,
				6FF2498DF4E1C7B29E00165C /* 2252. Line up.swift in Sources */,
				AB50D1D026BDE6FD073A2CF7 /* 1219. Path with Maximum Gold.swift in Sources */,
				86017F9E5B57AAC1EABF763D /* 14500. Tetromino.swift in Sources */,
				C593A17CE2D17EA8453EC727 /* 2812. Find the Safest Path in a Grid.swift in Sources */,
				6F3AD3FCB6CE3C777BFBDE17 /* 1238. Parties.swift in Sources */,
				B7F424D20403BAF71E4AC202 /* 2331. Evaluate Boolean Binary Tree.swift in Sources */,
				6032530B24E68B27FD075612 /* 11404. Floyd.swift in Sources */,
				CA135C55F174CA9DC56742DA /* 1325. Delete Leaves With a Given Value.swift in Sources */,
				B3790EC1E48A360121C5DE4A /* 1806. Partial sum.swift in Sources */,
				54280C5E4C61E0C91DB2126D /* 979. Distribute Coins in Binary Tree.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		BA1BB8892BD75C9800CA174B /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GENERATE_INFOPLIST_FILE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.pyeonhaeng.AlgorithmTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		BA1BB88A2BD75C9800CA174B /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GENERATE_INFOPLIST_FILE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.pyeonhaeng.AlgorithmTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		BAF746E0299B78D600182311 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.4;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		BAF746E1299B78D600182311 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.4;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		BAF746E3299B78D600182311 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		BAF746E4299B78D600182311 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		BA1BB88B2BD75C9800CA174B /* Build configuration list for PBXNativeTarget "AlgorithmTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BA1BB8892BD75C9800CA174B /* Debug */,
				BA1BB88A2BD75C9800CA174B /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		BAF746D6299B78D600182311 /* Build configuration list for PBXProject "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BAF746E0299B78D600182311 /* Debug */,
				BAF746E1299B78D600182311 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		BAF746E2299B78D600182311 /* Build configuration list for PBXNativeTarget "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BAF746E3299B78D600182311 /* Debug */,
				BAF746E4299B78D600182311 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = BAF746D3299B78D600182311 /* Project object */;
}
