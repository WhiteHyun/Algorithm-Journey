// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 56;
	objects = {

/* Begin PBXBuildFile section */
		01864D3E328993AF916E3F7E /* 191. Number of 1 Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54F03DB50102B766401C03CA /* 191. Number of 1 Bits.swift */; };
		0269ADD79E62FCDEF4235DEC /* 1707. Bipartite graphs.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5B3211227F238574D1AF208E /* 1707. Bipartite graphs.swift */; };
		026A07B19166A847BA308BCD /* 912. Sort an Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = C060A37358429B6DDFB0CB7C /* 912. Sort an Array.swift */; };
		0298F96EDD1C0CEE2F678853 /* 2121. Find if Path Exists in Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */; };
		04449173453B83164B7F6907 /* 2373. Largest Local Values in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */; };
		045159BA8A10FEE8F1205CB2 /* 19. Remove Nth Node From End of List.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1BBCA3C89348654E41C1A1B /* 19. Remove Nth Node From End of List.swift */; };
		04BBC7F80E4CDDD129B927E7 /* 2103. Find All Groups of Farmland.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */; };
		0513F5E997CCBD2BB41C07C4 /* 322. Coin Change.swift in Sources */ = {isa = PBXBuildFile; fileRef = E1DE329271560823383B7232 /* 322. Coin Change.swift */; };
		05BB03033C19747B0BDDA1DC /* 85. Maximal Rectangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */; };
		065FB6159E74C405D97C95C8 /* 310. Minimum Height Trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */; };
		081303FE1C1151966DE5A514 /* 861. Score After Flipping Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */; };
		096D6FC7B694471D32B8B934 /* LeetCode650Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BD20332FA62B94C859F6A9CC /* LeetCode650Tests.swift */; };
		0B4CA4E786B92E49DDEFA333 /* 39. Combination Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33037F413E5150802164ADEE /* 39. Combination Sum.swift */; };
		0B7D27432C99B263E73BEE19 /* 3110. Score of a String.swift in Sources */ = {isa = PBXBuildFile; fileRef = D985260268CB61BE8EE28947 /* 3110. Score of a String.swift */; };
		0BD52685BB5B00F57B4F37FF /* LeetCode2597Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82F66E62C6319A925D50BE23 /* LeetCode2597Tests.swift */; };
		0C6591D6DA42BCE542523547 /* 3016. Minimum Number of Pushes to Type Word II.swift in Sources */ = {isa = PBXBuildFile; fileRef = AB2DAE2B02DADD306D57A5E8 /* 3016. Minimum Number of Pushes to Type Word II.swift */; };
		0D215D5FFD540F1936417513 /* 1255. Maximum Score Words Formed by Letters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A33C56937039E913D28DD87 /* 1255. Maximum Score Words Formed by Letters.swift */; };
		0E78A5CFA0D74D82DD9A20FB /* 131. Palindrome Partitioning.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22FD94BAAD981FCC412E6425 /* 131. Palindrome Partitioning.swift */; };
		0EDA44B337352A092B193BC2 /* 128. Longest Consecutive Sequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9A2FDCA6975113D6FFC07635 /* 128. Longest Consecutive Sequence.swift */; };
		0F728EB95A22463CCD2BE8B3 /* 703. Kth Largest Element in a Stream.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F0563DDF46E0944507D276 /* 703. Kth Largest Element in a Stream.swift */; };
		122B5E51E0CAFB529C1E8F38 /* LeetCode153Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1EBC827B0DF25C1759CF409 /* LeetCode153Tests.swift */; };
		123BD5BD04CDA4F92E20C728 /* BOJ2110Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */; };
		131B1AEAD44A3805D738B437 /* 261. Graph Valid Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4B8FF454DF85343007930994 /* 261. Graph Valid Tree.swift */; };
		1335CA301AFD1D9B03BE0BCE /* LeetCode1208Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7C9AE34AD4A0FB9104704904 /* LeetCode1208Tests.swift */; };
		13B2FC575BC0C08C5F7E88D3 /* BOJ1927Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */; };
		13EE9C404E2628C69B88BEAB /* 11. Container With Most Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = E50DFF61D4BAF6BCB9B8C26C /* 11. Container With Most Water.swift */; };
		14002FD4EB3CA0FC5590AD59 /* LeetCode226Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */; };
		1491138548C42BB706D9977A /* LeetCode191Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 15DCA0BFB3EB783A412C5D66 /* LeetCode191Tests.swift */; };
		150F01B1AFE39E6872990BCE /* LeetCode979Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */; };
		15A8637E4077E16D9675D702 /* 53. Maximum Subarray.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */; };
		15FEB4185CB82F43AE345640 /* 104. Maximum Depth of Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */; };
		173953DD20DBE25B4287B58F /* 139. Word Break.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1F51F87ECF2CAF63D81CAE59 /* 139. Word Break.swift */; };
		1799268B03B55CF7E545D978 /* 10844. number of easy stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */; };
		18FF4EE16FC147EAA1A00EA3 /* 165. Compare Version Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */; };
		195BB0885944C72E35BE318D /* LeetCode347Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04C37740809FE4ED0C88966A /* LeetCode347Tests.swift */; };
		197093287BFABCAD763F943A /* 20366. Do you want to build a snowman?.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */; };
		199954E8CE53E60746BAD7F7 /* LeetCode207Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1447C6746357C8606E299AF /* LeetCode207Tests.swift */; };
		1AF7381FF0A55B877E9DBA85 /* 1508. Range Sum of Sorted Subarray Sums.swift in Sources */ = {isa = PBXBuildFile; fileRef = 44033AA8EF8C4663094B4453 /* 1508. Range Sum of Sorted Subarray Sums.swift */; };
		1B501DEAA8D196AD81A270F4 /* LeetCode78Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B00E5C2520EA54267F653D55 /* LeetCode78Tests.swift */; };
		1CCF5051F633FF411388A34C /* LeetCode217Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */; };
		1D6ADFB1E0DE3824BF0FC8A6 /* 1208. Get Equal Substrings Within Budget.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7326C94938323D8F6C1B755B /* 1208. Get Equal Substrings Within Budget.swift */; };
		1DEA772E676BD75354229402 /* BOJ2580Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */; };
		1F0D1325E69EC219DD1586A9 /* LeetCode91Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8C4418373522F107E7B1E0AD /* LeetCode91Tests.swift */; };
		1F22770D69A1043818381B50 /* 650. 2 Keys Keyboard.swift in Sources */ = {isa = PBXBuildFile; fileRef = B26AB5BD69487320B9E84D62 /* 650. 2 Keys Keyboard.swift */; };
		2110AFABEB88CF65E9C1822D /* BOJ11286Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */; };
		234F008D470BF6AB78E647DA /* 273. Integer to English Words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3D9168D2C103CBC539C65675 /* 273. Integer to English Words.swift */; };
		244905F7EE87422AD3260F09 /* LeetCode121Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */; };
		245B2EA69F774938F2F9317D /* LeetCode98Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 920C6595327CA4EE307CA4D6 /* LeetCode98Tests.swift */; };
		246764F8389A24E26E4F8BA5 /* 347. Top K Frequent Elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */; };
		247300E89CB11ACC68CD8A66 /* 11054. Longest Sequence of Vitonic Parts.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3ABB3C103BC7B140AC8C602B /* 11054. Longest Sequence of Vitonic Parts.swift */; };
		24ABAE9803AC8108CAE8F7B9 /* 3197. The Lake of Swan.swift in Sources */ = {isa = PBXBuildFile; fileRef = 577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */; };
		24B60B413299DBDEDB987CA1 /* LeetCode322Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F9198265807055A6A8004BAD /* LeetCode322Tests.swift */; };
		24BF6E356DC21458CC75D808 /* LeetCode1915Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */; };
		2578BB84E54039484129E40D /* LeetCode62Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 20C68D3AB2CDD489E79E1FBB /* LeetCode62Tests.swift */; };
		25D350EB37D8A708F6363EE7 /* 945. Minimum Increment to Make Array Unique.swift in Sources */ = {isa = PBXBuildFile; fileRef = CE4033177731BC55F7964469 /* 945. Minimum Increment to Make Array Unique.swift */; };
		25EE03CC12D4D87C0E24DB06 /* 834. Sum of Distances in Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */; };
		261265B42F0696E0300B0DAD /* 10775. Airport.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1BD96A68B432584E37757B6A /* 10775. Airport.swift */; };
		273AF78AB87FD153CE94E361 /* LeetCode2812Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */; };
		276AFFC688E963A4CE1C5424 /* 1289. Minimum Falling Path Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */; };
		2814DA6A2FCECAA8CEDE6FE1 /* 1005. ACM Craft.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */; };
		2A42CC69CC1D258A51012ABE /* 1937. Maximum Number of Points with Cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 018FCC6D0D42DF6814C83152 /* 1937. Maximum Number of Points with Cost.swift */; };
		2B6BBD3490E4F230A88A058B /* 208. Implement Trie (Prefix Tree).swift in Sources */ = {isa = PBXBuildFile; fileRef = E566A3A23893399B98AD5D49 /* 208. Implement Trie (Prefix Tree).swift */; };
		2C8ADD248582DF7F3159C0AF /* LeetCode261Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3DBF36284A28956398B8EE8B /* LeetCode261Tests.swift */; };
		2DFE48A70031F393EA306739 /* BOJ13549Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E3D462E86522659A9728E25F /* BOJ13549Tests.swift */; };
		2E50BF7125D314BD0066832B /* LeetCode3Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 65A925FE8F0BE29AF639A623 /* LeetCode3Tests.swift */; };
		2E890590B510E1F4DD7EF54F /* LeetCode1937Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 31B0787BAFD13EF3D7CF59A2 /* LeetCode1937Tests.swift */; };
		2E89C89BAC6807AC1DB6BE1F /* LeetCode104Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */; };
		2EBAAA36C5A141AE714E507C /* 11286. Heap of absolute values.swift in Sources */ = {isa = PBXBuildFile; fileRef = AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */; };
		2EC991651E7EA33215056405 /* LeetCode2487Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */; };
		2ED2BDF6594E9D662DADD012 /* LeetCode53Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EC1169CEE9DA0A6A7AAA37E9 /* LeetCode53Tests.swift */; };
		2EEAAA008EFC329EB0572460 /* Programmers258709Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FFF875604994B6472CAD9637 /* Programmers258709Tests.swift */; };
		2F04F3B2171C143F43B93171 /* LeetCode506Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */; };
		2FA764DB955BF0C965C02BB6 /* LeetCode105Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3B69F9B8D2F140EBE6C631AF /* LeetCode105Tests.swift */; };
		2FDD0420777B9A37A08148B7 /* LeetCode33Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3063EFA2907FE0E7DE7FF431 /* LeetCode33Tests.swift */; };
		2FE5ED8F0C1E0067AE2598CA /* 152. Maximum Product Subarray.swift in Sources */ = {isa = PBXBuildFile; fileRef = 73599156B50C8D195AC3BE31 /* 152. Maximum Product Subarray.swift */; };
		30C6B30A67076653A51EF333 /* 13549. Hide and Seek 3.swift in Sources */ = {isa = PBXBuildFile; fileRef = A9E256CE7BB2212C60C12682 /* 13549. Hide and Seek 3.swift */; };
		31EA4A7807C6F6F424B4141C /* LeetCode2678Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1E214FCD72899F7498E54170 /* LeetCode2678Tests.swift */; };
		33C1A1BA18975978C0E00405 /* 2110. Installing a router.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */; };
		343665131EEABD35FCBA8D44 /* LeetCode70Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */; };
		34B912B2ACD3A890F97AA5CC /* 91. Decode Ways.swift in Sources */ = {isa = PBXBuildFile; fileRef = FA8AD8DA072BE2CB795DF32E /* 91. Decode Ways.swift */; };
		35F6CFD292D74C88726B9A70 /* 42883. Create a large number.swift in Sources */ = {isa = PBXBuildFile; fileRef = 46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */; };
		362B8A80D477B438D9B6CCEC /* LeetCode1140Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = CB07592C6B2E0CA872A2530C /* LeetCode1140Tests.swift */; };
		394F94A77044B17630DD3963 /* LeetCode75Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3C36C580B042F6AEBAD7C3C7 /* LeetCode75Tests.swift */; };
		39912D75DAA7A68D6FE33A6A /* BOJ16234Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C90B2CBB063E3BEC0033E99C /* BOJ16234Tests.swift */; };
		39EC1CFB669DBB0D92864C7B /* 2293. Coin I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */; };
		3A344471135D5870D0FADEC2 /* LeetCode211Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B5B063D1B4E57DF37C4FB8B7 /* LeetCode211Tests.swift */; };
		3B03C4962CD8815DD97E4566 /* LeetCode273Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5CBCFD72692C5A53B99BA1E3 /* LeetCode273Tests.swift */; };
		3C2F7ABAD91AB5B16A9A0158 /* 206. Reverse Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */; };
		3C8A1E8794F04E4A675BFD87 /* 20. Valid Parentheses.swift in Sources */ = {isa = PBXBuildFile; fileRef = BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */; };
		3F23228450060BE574C01F7A /* LeetCode857Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */; };
		3F9DEA9FDA65450D99AD0F5E /* LeetCode846Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 72ED06140C6A510BAFB29D67 /* LeetCode846Tests.swift */; };
		40007B4A543F11F40802C6BE /* 2976. Minimum Cost to Convert String I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0ADB68B8C79F8A24018CF207 /* 2976. Minimum Cost to Convert String I.swift */; };
		403FBDB8CB8A5BA4AF296E75 /* BOJ1916Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */; };
		40E0227779BF476DCC081A8E /* 2037. Minimum Number of Moves to Seat Everyone.swift in Sources */ = {isa = PBXBuildFile; fileRef = CABFBBF258400526DBC95D31 /* 2037. Minimum Number of Moves to Seat Everyone.swift */; };
		410A97FF7AD98707F5CEA965 /* LeetCode230Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 27810901CF9AC90B5D768927 /* LeetCode230Tests.swift */; };
		410E9BE82EC1D30D80C2ED52 /* 514. Freedom Trail.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */; };
		4238EC1156E924333A93F6F8 /* 846. Hand of Straights.swift in Sources */ = {isa = PBXBuildFile; fileRef = C70DA0915E88152D9510FCDA /* 846. Hand of Straights.swift */; };
		42515CC0F9B451335AD25BAD /* 1030. Smallest String Starting From Leaf.swift in Sources */ = {isa = PBXBuildFile; fileRef = 66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */; };
		428CA4392D21B77061E8F1DB /* LeetCode1137Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2FEBCA0B65FDEEBA0DF66309 /* LeetCode1137Tests.swift */; };
		437714D47CFDB2780613E7D3 /* LeetCode3075Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */; };
		44718DE7B30632C2C1A7A4B5 /* LeetCode140Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 53D2BF073B1B8C7D4E576FDD /* LeetCode140Tests.swift */; };
		44D67C659CD5DFDF4632B6B5 /* LeetCode39Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4B6D18DDC573D0C2305A7B6D /* LeetCode39Tests.swift */; };
		450755F5CE5103192C27FCE2 /* 16953. A → B.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */; };
		45A388F6BC7A1FD2A25EAA31 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift in Sources */ = {isa = PBXBuildFile; fileRef = C01F0668B41A7719EAC778E1 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift */; };
		468B4BB3DB2FB4FCA13B2F80 /* LeetCode424Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3190CEC2485F656A19458675 /* LeetCode424Tests.swift */; };
		47539B1D2033692B4F6051B6 /* BOJ2252Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */; };
		48BD1016F94203FB21BAB4BD /* LeetCode523Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 16705E21EBC8C823E23AF516 /* LeetCode523Tests.swift */; };
		4A667D2A98E66FFF13B4ECA4 /* 33. Search in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = FB3F89CA91CCE8B6365B5D68 /* 33. Search in Rotated Sorted Array.swift */; };
		4AA035505CBF09FD5A543C21 /* LeetCode15Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FF67F682D7A12A8AE2B289AA /* LeetCode15Tests.swift */; };
		4B2B2FB3DF126EA66593B3A3 /* 2560. Straw Worm.swift in Sources */ = {isa = PBXBuildFile; fileRef = BFC2054286B08183F0DF5E65 /* 2560. Straw Worm.swift */; };
		4B5CB54DB91162744CE1ADAD /* LeetCode2037Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4C807733A3090D6915F872C3 /* LeetCode2037Tests.swift */; };
		4BEBA57EC537F4869C12FEA8 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */; };
		4C6A5F6F07FA288568954C8A /* LeetCode1105Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1CB1F15B6FD1E554161B7DC /* LeetCode1105Tests.swift */; };
		4CDEA531960EB2203089A2B7 /* 3015. Reunite Oasis.swift in Sources */ = {isa = PBXBuildFile; fileRef = F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */; };
		4D253EC5A8C537AED232E8F0 /* LeetCode1460Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32AD3D935CBD537401088FEF /* LeetCode1460Tests.swift */; };
		4D7EAE9A57CFD0AF58052430 /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift in Sources */ = {isa = PBXBuildFile; fileRef = 30989E95C8E3F9019C710B4B /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift */; };
		4DE10A7E1B762225A2189222 /* 21. Merge Two Sorted Lists.swift in Sources */ = {isa = PBXBuildFile; fileRef = B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */; };
		4E4E84B91124E949E9F10F97 /* LeetCode3152Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 67B7200813542CF10A2234C5 /* LeetCode3152Tests.swift */; };
		4EC93C2E678396AFB1C0C6F9 /* 1915. Number of Wonderful Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */; };
		4F31F3C07B80B83A5B5626B6 /* 1791. Find Center of Star Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = 386D2F30007CA37E573A145B /* 1791. Find Center of Star Graph.swift */; };
		505F68CF4EF5B94F497C9C83 /* LeetCode264Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5AEEDD197EE72A018893EE7F /* LeetCode264Tests.swift */; };
		50A23FF1ADCED88AC441C6CA /* BOJ13460Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 40E2804C9BE077F62A0E79C9 /* BOJ13460Tests.swift */; };
		51138571E50094B927D8F70D /* 2000. Reverse Prefix of Word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */; };
		515549E4101913791A6614E0 /* 264. Ugly Number II.swift in Sources */ = {isa = PBXBuildFile; fileRef = FF78E40017CA340D7AAE1EA6 /* 264. Ugly Number II.swift */; };
		52E59627677BAF75FCC1A461 /* 2678. Number of Senior Citizens.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9837467B1F94759DA34DDE1B /* 2678. Number of Senior Citizens.swift */; };
		53660B840A04131325C6A739 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */ = {isa = PBXBuildFile; fileRef = D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */; };
		538BA4FEE496B8F67BF0BDB0 /* 523. Continuous Subarray Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = FE5587DC5C16E820676BF562 /* 523. Continuous Subarray Sum.swift */; };
		54280C5E4C61E0C91DB2126D /* 979. Distribute Coins in Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */; };
		54AB38AF9E98CD4DA705541C /* 17298. Right Larger Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */; };
		552CBAEDE98843746B27BDAF /* BOJ1717Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B733190334E870B37B829C41 /* BOJ1717Tests.swift */; };
		55BA8EEBA082923E2FB17007 /* LeetCode3016Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3C54BE3BA0A8F0EAC256533F /* LeetCode3016Tests.swift */; };
		563CBAA119F321C46477CB9D /* LeetCode2370Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */; };
		56F9F24E32380BC7BF253012 /* LeetCode912Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F7D5696D1EEC5A5811D69DB9 /* LeetCode912Tests.swift */; };
		577669C4D73CF4C24D2946D0 /* LeetCode719Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6CB44E66115956092062B40F /* LeetCode719Tests.swift */; };
		58E24341C4C5DA5B7FB80224 /* 1987. Alphabet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122859837263588F523ABD9A /* 1987. Alphabet.swift */; };
		5A0883A216C56BEE6567EA93 /* 2294. Coins II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7F1B3178886B2D58AB8A39B2 /* 2294. Coins II.swift */; };
		5A75A7B6DB031C355D2DD7DC /* LeetCode552Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7F5B0F2F8608BFB99EC437BF /* LeetCode552Tests.swift */; };
		5ABD504274370722B80E8A69 /* 258709. Pick a die.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1B6F84AC5D5A2EE31CB08A38 /* 258709. Pick a die.swift */; };
		5AE46419931029708EFEEA9B /* 1520. Downhill.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8DAA2BEF9C8C64A87FC1AB48 /* 1520. Downhill.swift */; };
		5B1407FC43CB7EB8D99A308B /* 3404. Minimum Number of Operations to Satisfy Conditions.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */; };
		5B73C918BC817CBD91B768CC /* 2133. Fill Tiles.swift in Sources */ = {isa = PBXBuildFile; fileRef = 67FD3D3AA2866D1AB4AC8FD7 /* 2133. Fill Tiles.swift */; };
		5BC50B19D37B97F97B237B96 /* BOJ11404Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */; };
		5BDCB9416AD674C9A470BFED /* 786. K-th Smallest Prime Fraction.swift in Sources */ = {isa = PBXBuildFile; fileRef = 528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */; };
		5CCCB9B184C07865C4ECE8D1 /* 13913. Hide and Seek 4.swift in Sources */ = {isa = PBXBuildFile; fileRef = F2A3DBC2A3CD0DAEDE815491 /* 13913. Hide and Seek 4.swift */; };
		5D990747032C8514E7CFC029 /* 237. Delete Node in a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */; };
		5E34A0B13371633E581E9DB3 /* 1916. Finding the minimum cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */; };
		5EC396C3A7B5D865829CA740 /* 57. Insert Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = D72ED8632461597C1A70A022 /* 57. Insert Interval.swift */; };
		5EF9BF220AF43B8C030B5E19 /* 98. Validate Binary Search Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 07A9708F38908DB977620466 /* 98. Validate Binary Search Tree.swift */; };
		5F3B6A4CB3B479A91620AA47 /* LeetCode338Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 408F049F0F5F858A572059B8 /* LeetCode338Tests.swift */; };
		6032530B24E68B27FD075612 /* 11404. Floyd.swift in Sources */ = {isa = PBXBuildFile; fileRef = 481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */; };
		62D8F044A907D7895D9ABD2C /* 133. Clone Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF0ACC9E5DCDC0D0DB4F6608 /* 133. Clone Graph.swift */; };
		63CF486202E3291B4E9CA38E /* 100. Same Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */; };
		642FAB9A10E127A05B06C26F /* 213. House Robber II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8A23FE7A3877383D37A17187 /* 213. House Robber II.swift */; };
		644D88238F847B8933B02435 /* 1608. Special Array With X Elements Greater Than or Equal X.swift in Sources */ = {isa = PBXBuildFile; fileRef = DB1AF3E943D46EE5E30EEBDD /* 1608. Special Array With X Elements Greater Than or Equal X.swift */; };
		647453E29C0FB86384D43325 /* 987. Reveal Cards In Increasing Order.swift in Sources */ = {isa = PBXBuildFile; fileRef = D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */; };
		65C21D1432E3C8E2D257AF6D /* 402. Remove K Digits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */; };
		6716C73AF1F01020B7AD7E62 /* 881. Boats to Save People.swift in Sources */ = {isa = PBXBuildFile; fileRef = D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */; };
		673ACDE0AB649A417ABB4EC2 /* LeetCode2976Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 15D530FF819EAC903D8602A1 /* LeetCode2976Tests.swift */; };
		6755DC3922B6D5BA21D8D66C /* 1105. Filling Bookcase Shelves.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF90F3761B9DD9C20E29DC5A /* 1105. Filling Bookcase Shelves.swift */; };
		686D5AD804928B2B10E66C37 /* LeetCode268Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 051F0B15589E4568FE2E7E64 /* LeetCode268Tests.swift */; };
		6927F41D517BB843E0F76606 /* BOJ10775Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */; };
		69FA8CD2EF12849BF8A48CB2 /* LeetCode703Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 705FD057866E96BBE190C66C /* LeetCode703Tests.swift */; };
		6A0C7E0B4631B3B549EB835F /* LeetCode20Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */; };
		6AD7D2C6482347BCE7EEC61B /* LeetCode5Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 38C0CEE1D40BA1DE8BCD26E0 /* LeetCode5Tests.swift */; };
		6B6137C5ED033A3705CBCD61 /* 3068. Find the Maximum Sum of Node Values.swift in Sources */ = {isa = PBXBuildFile; fileRef = 01D633A9853FE47F943C5FE0 /* 3068. Find the Maximum Sum of Node Values.swift */; };
		6C3F29ADBCB6BEF0B54F99D8 /* 230. Kth Smallest Element in a BST.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3B77C8F6A46FE46E29B41A /* 230. Kth Smallest Element in a BST.swift */; };
		6F3AD3FCB6CE3C777BFBDE17 /* 1238. Parties.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32769F20766FEEC70896B8F0 /* 1238. Parties.swift */; };
		6FCF5B087C3547306E9BFD63 /* BOJ14003Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3C78D8D57094DAEA635037FA /* BOJ14003Tests.swift */; };
		6FDD86CE0B3A3552DE665496 /* 2486. Append Characters to String to Make Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = B7E66C2B2F0DBD48EEA3B179 /* 2486. Append Characters to String to Make Subsequence.swift */; };
		6FF2498DF4E1C7B29E00165C /* 2252. Line up.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */; };
		712E035A0D175713C3DA6577 /* 190. Reverse Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = A31B4AD258491BD90B81ECDA /* 190. Reverse Bits.swift */; };
		71BCF67A948FE6952FE0A3FC /* LeetCode834Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */; };
		7250936FC886DB8D041A3602 /* LeetCode344Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4716A32495EC64B78FF5CFE0 /* LeetCode344Tests.swift */; };
		72B519C20C01453ABD1D690C /* BOJ2805Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */; };
		72D150AF878FB509D0C744BA /* 2580. Sudoku.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */; };
		732E5A5C32D44BE1962A1981 /* LeetCode242Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */; };
		73B84306F995CE976F732DE9 /* 2053. Kth Distinct String in an Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 01A3811855EDD6CBFDF80EDC /* 2053. Kth Distinct String in an Array.swift */; };
		749CB7A5DFB18DC8B6D763C2 /* 2487. Remove Nodes From Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */; };
		74DED2C2FEBC0FED792B5625 /* 1122. Relative Sort Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 120E9F5DF4AFE78D1EBE7916 /* 1122. Relative Sort Array.swift */; };
		760102D79A16D3CC121F2DFD /* 1927. Min Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74DADA5B240793D631B03452 /* 1927. Min Heap.swift */; };
		769AF1997B87BFA79723DEC1 /* LeetCode125Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 757659B4899D65BB002B18CF /* LeetCode125Tests.swift */; };
		76B38EDFA27DA15C718B7EC7 /* LeetCode40Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 83F76A5DEBAE9FD81A6FDDB6 /* LeetCode40Tests.swift */; };
		77AA405F3125B7BC1E44D830 /* LeetCode2373Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */; };
		784D909FC29F23F4DFC7406F /* LeetCode624Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3F03A7122D8F7A0B9E037704 /* LeetCode624Tests.swift */; };
		7980CEF227363A54260E113F /* 409. Longest Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32B9DB7949B9045A3941FC9E /* 409. Longest Palindrome.swift */; };
		7B0EA7CB6F912B549A2151E5 /* 252. Meeting Rooms.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */; };
		7B53D7F6D2C37E864758CF0B /* 647. Palindromic Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 81C286E6922C7A567B292794 /* 647. Palindromic Substrings.swift */; };
		7B69A21FFA9401C4EBABFC3F /* 417. Pacific Atlantic Water Flow.swift in Sources */ = {isa = PBXBuildFile; fileRef = F231AD0651B83C1377D52E42 /* 417. Pacific Atlantic Water Flow.swift */; };
		7CC9F55574D0F860F77CC80F /* 552. Student Attendance Record II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DCFA261349D24273C2DADC36 /* 552. Student Attendance Record II.swift */; };
		7CD2F76BE035760F99EF54BA /* 1753. Shortest path.swift in Sources */ = {isa = PBXBuildFile; fileRef = A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */; };
		7D15BE7562BD0E4035409427 /* LeetCode2441Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */; };
		7E7BED2D34087F88D2F5A70B /* 84. Largest Rectangle in Histogram.swift in Sources */ = {isa = PBXBuildFile; fileRef = 78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */; };
		7EC3DE335660AE5578CB4A1D /* 70. Climbing Stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */; };
		7EE2A34064594CA2029A3B27 /* LeetCode1791Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B63B6836080E7DE15C694D4F /* LeetCode1791Tests.swift */; };
		7F104D8647A9FCA69F23BA94 /* LeetCode79Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 800BC34E5EC1F4D08B6D20B8 /* LeetCode79Tests.swift */; };
		807E0C8DE0323E5430622A1A /* LeetCode57Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 94BBF13BA1E7AF6A040E14D5 /* LeetCode57Tests.swift */; };
		81888093F324533D436DF72E /* BOJ3015Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */; };
		82FE51DFDC095AB888FB7A74 /* 959. Regions Cut By Slashes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8BF46C0809B84C10359C2D06 /* 959. Regions Cut By Slashes.swift */; };
		833E312D313B7D13BD0C1260 /* LeetCode860Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EB4A5DAC3EB88568598C35D0 /* LeetCode860Tests.swift */; };
		83FA90C45FECA4EB1AEC2766 /* 840. Magic Squares In Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D740B0C6B4DA9EAA3979C01 /* 840. Magic Squares In Grid.swift */; };
		84B4EFB5CDB2C50EA3F25468 /* LeetCode2134Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 09F9F335D4104A2713528534 /* LeetCode2134Tests.swift */; };
		84DCB8940CED0A7A29A5FDCB /* BOJ2560Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F438571965CEE96F3D2641ED /* BOJ2560Tests.swift */; };
		86017F9E5B57AAC1EABF763D /* 14500. Tetromino.swift in Sources */ = {isa = PBXBuildFile; fileRef = 12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */; };
		86113DAC5600E7252DC6E18E /* 18429. root loss.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */; };
		86E93AF6D67BFDC991376AD9 /* 14503. Robot vacuum cleaners.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7DC4C0423D56822B993EDE55 /* 14503. Robot vacuum cleaners.swift */; };
		86EC10A33CDFFE701442FD52 /* 143. Reorder List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4F74E61F2D358946EBB27103 /* 143. Reorder List.swift */; };
		87CA2E9A550E6F6CCC87F16E /* 344. Reverse String.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4E840B847D5627E59F441F4 /* 344. Reverse String.swift */; };
		88BA20B4EED7A05807D48E60 /* LeetCode1143Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5A6A08D2C423782E1714358E /* LeetCode1143Tests.swift */; };
		89AAE7E71759F264F31C8A6C /* LeetCode1051Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2061C10294307EE82DF59245 /* LeetCode1051Tests.swift */; };
		8B4890B26BD1CF1C8DEB37B0 /* LeetCode2191Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DFFE09EB257815A523383087 /* LeetCode2191Tests.swift */; };
		8BD03C69B8AEA87FC9494733 /* 141. Linked List Cycle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */; };
		8BEE20091C43BC7EC2617BD2 /* BOJ1987Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */; };
		8BFC45E1449004BA912E7E0A /* LeetCode647Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 575CA81772FB1B117B60F5CB /* LeetCode647Tests.swift */; };
		8CC6FED8B398BB23256261A2 /* LeetCode1508Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9D8DAD73C77FF153C948E9A4 /* LeetCode1508Tests.swift */; };
		8CE5980C6D41A1379557CF54 /* LeetCode840Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3E37C3AFBC87CD15926F1EF9 /* LeetCode840Tests.swift */; };
		8D2A0686FF1A7F3A33B3EDD5 /* 323. Number of Connected Components in an Undirected Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = E89329E2FAEA9C45C7F5183F /* 323. Number of Connected Components in an Undirected Graph.swift */; };
		8E81AC45BF7F5E8B42D11BC9 /* 238. Product of Array Except Self.swift in Sources */ = {isa = PBXBuildFile; fileRef = 66B2ECA2900426DF23BA7F84 /* 238. Product of Array Except Self.swift */; };
		8E91B5FF24DDAE2C6F650A37 /* 226. Invert Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */; };
		8ED9B157BF9556B3E9B48EC0 /* 1504. Specific shortest paths.swift in Sources */ = {isa = PBXBuildFile; fileRef = F344BA11AF8E9898A982C02C /* 1504. Specific shortest paths.swift */; };
		90A7DFBABBEBFC4BD9B74A8B /* 102. Binary Tree Level Order Traversal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9F5E2616AD70C38A674E3FCD /* 102. Binary Tree Level Order Traversal.swift */; };
		91D9E6105D5428C31F3470B1 /* LeetCode19Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EC8D5EF6E93E9716401AF54B /* LeetCode19Tests.swift */; };
		922639D7DD1CAC0B19672BBA /* 242. Valid Anagram.swift in Sources */ = {isa = PBXBuildFile; fileRef = B226D6181F521969A817995D /* 242. Valid Anagram.swift */; };
		9266939C2A222E285DF9FBBA /* 1912. Continuous sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17584F85B15167F0281E936C /* 1912. Continuous sum.swift */; };
		933C427858869A5E4F5A0DF8 /* LeetCode417Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C2BA526013E53C8EA2A52E5F /* LeetCode417Tests.swift */; };
		936DBA36E92A4264C883C2E6 /* 3111. Censorship.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2EC3121C728E9655DC400056 /* 3111. Censorship.swift */; };
		9397FCD75FC827375DD22D50 /* BOJ3197Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */; };
		93F2A7CB6F8AC8F9B984B42B /* 12100. 2048 (Easy).swift in Sources */ = {isa = PBXBuildFile; fileRef = 94BA011AC612F57B27FF0AFC /* 12100. 2048 (Easy).swift */; };
		946DC1F64C89F6969FC2FB3A /* 424. Longest Repeating Character Replacement.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DCDE06F3ECB6F129F9490F9 /* 424. Longest Repeating Character Replacement.swift */; };
		954DCB9D2391D09555B53622 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = 50C8C2EAE957BB2ABBEBC368 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift */; };
		9653D5809AF9F31705F2CAEF /* 1759. Create a password.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */; };
		96DDE2F65420ED0689D12F7E /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = FFB993A5EF974AF8A2057A3E /* 153. Find Minimum in Rotated Sorted Array.swift */; };
		97D78C475F999B1B342BC77B /* LeetCode198Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35EA9BE89FBB7750C4AA24B4 /* LeetCode198Tests.swift */; };
		97F2277D13973505D261EB57 /* 5. Longest Palindromic Substring.swift in Sources */ = {isa = PBXBuildFile; fileRef = E48B75F403E85C16E6FFD6FC /* 5. Longest Palindromic Substring.swift */; };
		9933E8CFAFDD5B1194997CB7 /* LeetCode1608Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F2E93604457F0E7B112ED4F6 /* LeetCode1608Tests.swift */; };
		99ED3454E1267BD065AD3C9A /* 211. Design Add and Search Words Data Structure.swift in Sources */ = {isa = PBXBuildFile; fileRef = B84820D654301CB08FA2B79F /* 211. Design Add and Search Words Data Structure.swift */; };
		9B678B0352E8D6A7FDE87D31 /* 623. Add One Row to Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */; };
		9DA313CA3E699C3BA887510C /* 1140. Stone Game II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0A4146EE6AFCA55C90899E84 /* 1140. Stone Game II.swift */; };
		9DF24406CB27CF92DE64C355 /* LeetCode11Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F839A0E3111DC17874F78CE3 /* LeetCode11Tests.swift */; };
		9E42D726992875BD0FEDC467 /* 49. Group Anagrams.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2D1A296F4B09694A8C56F644 /* 49. Group Anagrams.swift */; };
		9E92CAA8692DE34C31A0793A /* 200. Number of Islands.swift in Sources */ = {isa = PBXBuildFile; fileRef = 837C0064F1B04FF020088628 /* 200. Number of Islands.swift */; };
		9E94DE5CB30A378423730FB8 /* 79. Word Search.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11669A8777EF852FCC41B1C1 /* 79. Word Search.swift */; };
		9F48B1AC2DFE123B54EB2C41 /* LeetCode1219Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */; };
		9FBB2971AA8246F0DA46EC8C /* LeetCode1442Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 21A2B0065BC745B81E3D0C3C /* LeetCode1442Tests.swift */; };
		A012C31B7C91B79C0BE6BD54 /* 572. Subtree of Another Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */; };
		A1D260FBE826ED2057AC26A2 /* 15686. Chicken delivery.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */; };
		A1D7F43D1BBF6B73296B95C2 /* 2045. Second Minimum Time to Reach Destination.swift in Sources */ = {isa = PBXBuildFile; fileRef = FD026386AD38656464754565 /* 2045. Second Minimum Time to Reach Destination.swift */; };
		A3A83F852CFB29C40FB8306F /* 121. Best Time to Buy and Sell Stock.swift in Sources */ = {isa = PBXBuildFile; fileRef = 361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */; };
		A47FCC21A736D622E5454A03 /* LeetCode190Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 962E1810D5C11F26A87668A6 /* LeetCode190Tests.swift */; };
		A5DDB14AC187D7E69CF72D33 /* LeetCode3110Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 68CABD9668265D4B727A6D97 /* LeetCode3110Tests.swift */; };
		A60F1EE892E346556B4B0E1C /* 1051. Height Checker.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9BC1D0E2C1C929B11DC154CC /* 1051. Height Checker.swift */; };
		A62E25657515282988E165A1 /* LeetCode102Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 403DED8A6D6AD9C14B34A093 /* LeetCode102Tests.swift */; };
		A6716F3928BBD482BC2ECEFD /* LeetCode648Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D9A55206D394A39ECA6BE58A /* LeetCode648Tests.swift */; };
		A6CC1AF0F31C3135CE20D40A /* LeetCode252Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */; };
		A91BBBAADAC5753B36B20622 /* LeetCode881Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */; };
		A9D1F499D140D497D5916EC6 /* LeetCode786Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */; };
		AA779C6428C45DB96CCCD3C8 /* 1653. Minimum Deletions to Make String Balanced.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3EB65F30FE618D08A8981288 /* 1653. Minimum Deletions to Make String Balanced.swift */; };
		AAE689066F9DF7CFBD0DAEEC /* LeetCode128Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1B1A1C3B4BF83A57875F1EB /* LeetCode128Tests.swift */; };
		AB50D1D026BDE6FD073A2CF7 /* 1219. Path with Maximum Gold.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */; };
		AB772A32A13DEDF289E9E7F7 /* 648. Replace Words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5898B0DB91F3D979968E28A2 /* 648. Replace Words.swift */; };
		ACB86D2B638188017CB2D792 /* 3075. Maximize Happiness of Selected Children.swift in Sources */ = {isa = PBXBuildFile; fileRef = D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */; };
		ADAC39048810E6DC3D734B58 /* 678. Valid Parenthesis String.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */; };
		AF2867E443D338416AD5647D /* 129. Sum Root to Leaf Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */; };
		AF6BFC2C1AB1237772F58C40 /* LeetCode2045Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1678102D7A95C13B1F272C94 /* LeetCode2045Tests.swift */; };
		AF77BEBC7881428EB09B1B5C /* LeetCode131Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5CBE7CF09D186E7E3D05FF65 /* LeetCode131Tests.swift */; };
		B1497A94E45EBF47364E6ADD /* LeetCode237Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = CF8265795FE76682687EF63A /* LeetCode237Tests.swift */; };
		B2409DD3E81B15953DC318CE /* 14003. Longest increasing partial sequence 5.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5562FB082B2641E972B62076 /* 14003. Longest increasing partial sequence 5.swift */; };
		B25327AB7F233F884E784562 /* BOJ2212Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8E0425866283B95D0634005E /* BOJ2212Tests.swift */; };
		B36A1D9B5122ACAFBAE8E744 /* LeetCode208Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0EB89B681AC593F2C19E2CB8 /* LeetCode208Tests.swift */; };
		B3790EC1E48A360121C5DE4A /* 1806. Partial sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */; };
		B3CB0C50A0F5B375CA944754 /* BOJ16953Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */; };
		B7F3A07EF15436FAA05A09FA /* BOJ1753Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */; };
		B7F424D20403BAF71E4AC202 /* 2331. Evaluate Boolean Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */; };
		B89B23C6192BB57D11BCA64D /* 16234. Population movement.swift in Sources */ = {isa = PBXBuildFile; fileRef = A2CBB85204750D6357CAF273 /* 16234. Population movement.swift */; };
		B89B49B5945B86DF8159850A /* LeetCode143Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 09735B98B3D9525DF71E496D /* LeetCode143Tests.swift */; };
		B9488914D822EF57D82E08DB /* BOJ2133Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FF906A8CC3BD3BE9E6A38A01 /* BOJ2133Tests.swift */; };
		BA0611A12BF873630020C171 /* 1520. Downhill.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8DAA2BEF9C8C64A87FC1AB48 /* 1520. Downhill.swift */; };
		BA1093782BFA1831005CF176 /* 338. Counting Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2BA523F29A5BF8B4ACBD38EB /* 338. Counting Bits.swift */; };
		BA1093792BFACE5C005CF176 /* 49. Group Anagrams.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2D1A296F4B09694A8C56F644 /* 49. Group Anagrams.swift */; };
		BA10937A2BFAD6DE005CF176 /* 1863. Sum of All Subset XOR Totals.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56E868BC74EBDD083D26A31F /* 1863. Sum of All Subset XOR Totals.swift */; };
		BA137FC42BE49E1700F50CB7 /* 165. Compare Version Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */; };
		BA137FC52BE4A3F900F50CB7 /* 1753. Shortest path.swift in Sources */ = {isa = PBXBuildFile; fileRef = A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */; };
		BA1B02E02BE1D6AD0018D1BE /* 2000. Reverse Prefix of Word.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */; };
		BA1B02E12BE1D9F20018D1BE /* 11279. Max Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */; };
		BA1BB8882BD75C9800CA174B /* BOJ18231Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */; };
		BA1BB88F2BD75E8400CA174B /* 18231. destroyed city.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */; };
		BA1BB8912BD78F8700CA174B /* BOJ18429Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */; };
		BA1BB8922BD78F9600CA174B /* 18429. root loss.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */; };
		BA1EA9D62C385BFF00D1F6B4 /* 261. Graph Valid Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4B8FF454DF85343007930994 /* 261. Graph Valid Tree.swift */; };
		BA1EA9D72C3870CC00D1F6B4 /* 323. Number of Connected Components in an Undirected Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = E89329E2FAEA9C45C7F5183F /* 323. Number of Connected Components in an Undirected Graph.swift */; };
		BA1EA9D82C3873A300D1F6B4 /* 198. House Robber.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82D26493F07309BE090CDF14 /* 198. House Robber.swift */; };
		BA1EA9D92C387ACA00D1F6B4 /* 213. House Robber II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8A23FE7A3877383D37A17187 /* 213. House Robber II.swift */; };
		BA1EA9DA2C388FD400D1F6B4 /* 5. Longest Palindromic Substring.swift in Sources */ = {isa = PBXBuildFile; fileRef = E48B75F403E85C16E6FFD6FC /* 5. Longest Palindromic Substring.swift */; };
		BA20A37B2C0FF5980018FA19 /* 1002. Find Common Characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = B35F83E43937F3CC6ECF51CF /* 1002. Find Common Characters.swift */; };
		BA20A3802C0FF6930018FA19 /* LeetCode1002Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA20A37F2C0FF6930018FA19 /* LeetCode1002Tests.swift */; };
		BA26DABA2C2ED3CA00333F2C /* 200. Number of Islands.swift in Sources */ = {isa = PBXBuildFile; fileRef = 837C0064F1B04FF020088628 /* 200. Number of Islands.swift */; };
		BA26DABB2C2ED84E00333F2C /* 133. Clone Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF0ACC9E5DCDC0D0DB4F6608 /* 133. Clone Graph.swift */; };
		BA26DABD2C2EDC4500333F2C /* Node.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA26DABC2C2EDC4500333F2C /* Node.swift */; };
		BA26DABE2C2EDC4500333F2C /* Node.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA26DABC2C2EDC4500333F2C /* Node.swift */; };
		BA2A2B962BDA44930099FF73 /* 4. Median of Two Sorted Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */; };
		BA2DE3C82BF485EE003BC8FA /* 1238. Parties.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32769F20766FEEC70896B8F0 /* 1238. Parties.swift */; };
		BA2DE3CA2BF493F6003BC8FA /* Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA2DE3C92BF493F6003BC8FA /* Heap.swift */; };
		BA2DE3CB2BF4943A003BC8FA /* Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA2DE3C92BF493F6003BC8FA /* Heap.swift */; };
		BA2E71E52C2E5B9A005C45D2 /* 79. Word Search.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11669A8777EF852FCC41B1C1 /* 79. Word Search.swift */; };
		BA2E71E62C2E63B3005C45D2 /* 208. Implement Trie (Prefix Tree).swift in Sources */ = {isa = PBXBuildFile; fileRef = E566A3A23893399B98AD5D49 /* 208. Implement Trie (Prefix Tree).swift */; };
		BA39D4F02C001E9100099B72 /* 1255. Maximum Score Words Formed by Letters.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A33C56937039E913D28DD87 /* 1255. Maximum Score Words Formed by Letters.swift */; };
		BA39D4F12C0028CE00099B72 /* 1504. Specific shortest paths.swift in Sources */ = {isa = PBXBuildFile; fileRef = F344BA11AF8E9898A982C02C /* 1504. Specific shortest paths.swift */; };
		BA3C4ECA2BEDE3F500EFE29C /* 786. K-th Smallest Prime Fraction.swift in Sources */ = {isa = PBXBuildFile; fileRef = 528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */; };
		BA402F572B848BC600E86AAD /* Utils.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA402F562B848BC600E86AAD /* Utils.swift */; };
		BA44EB312BE32ED800A94445 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */ = {isa = PBXBuildFile; fileRef = D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */; };
		BA44EB322BE3305500A94445 /* 1927. Min Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74DADA5B240793D631B03452 /* 1927. Min Heap.swift */; };
		BA48225B2C0845DF0010FEF6 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift in Sources */ = {isa = PBXBuildFile; fileRef = C01F0668B41A7719EAC778E1 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift */; };
		BA48225C2C0851E10010FEF6 /* 2133. Fill Tiles.swift in Sources */ = {isa = PBXBuildFile; fileRef = 67FD3D3AA2866D1AB4AC8FD7 /* 2133. Fill Tiles.swift */; };
		BA4B32192C19BFF7008C16EC /* 235. Lowest Common Ancestor of a Binary Search Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8C54F4B78EF197DB28399266 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift */; };
		BA4B321B2C19C073008C16EC /* LeetCode235Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA4B321A2C19C073008C16EC /* LeetCode235Tests.swift */; };
		BA4C95E32BEA00C300E80D08 /* 1916. Finding the minimum cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */; };
		BA560A152C16B890005F3DB7 /* 33. Search in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = FB3F89CA91CCE8B6365B5D68 /* 33. Search in Rotated Sorted Array.swift */; };
		BA560A162C16BF56005F3DB7 /* 1051. Height Checker.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9BC1D0E2C1C929B11DC154CC /* 1051. Height Checker.swift */; };
		BA560A182C16C110005F3DB7 /* 143. Reorder List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4F74E61F2D358946EBB27103 /* 143. Reorder List.swift */; };
		BA560A192C16EEBE005F3DB7 /* 19. Remove Nth Node From End of List.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1BBCA3C89348654E41C1A1B /* 19. Remove Nth Node From End of List.swift */; };
		BA57C6202C055CD1000B3EC8 /* 1208. Get Equal Substrings Within Budget.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7326C94938323D8F6C1B755B /* 1208. Get Equal Substrings Within Budget.swift */; };
		BA57C6222C05681F000B3EC8 /* Utils.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA402F562B848BC600E86AAD /* Utils.swift */; };
		BA57C6232C057727000B3EC8 /* 16234. Population movement.swift in Sources */ = {isa = PBXBuildFile; fileRef = A2CBB85204750D6357CAF273 /* 16234. Population movement.swift */; };
		BA57C6242C06B6CC000B3EC8 /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift in Sources */ = {isa = PBXBuildFile; fileRef = 30989E95C8E3F9019C710B4B /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift */; };
		BA57C6252C06C6FF000B3EC8 /* 1707. Bipartite graphs.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5B3211227F238574D1AF208E /* 1707. Bipartite graphs.swift */; };
		BA57C6272C06C9AF000B3EC8 /* Queue.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA57C6262C06C9AF000B3EC8 /* Queue.swift */; };
		BA57C6282C06CC60000B3EC8 /* Queue.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA57C6262C06C9AF000B3EC8 /* Queue.swift */; };
		BA57D06A2BEF16A500CAF130 /* 2110. Installing a router.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */; };
		BA57DEE32BE09BA000073C18 /* 1915. Number of Wonderful Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */; };
		BA57F1DC2BE8BCE300569604 /* 2580. Sudoku.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */; };
		BA57F1DD2BE8C29E00569604 /* 1912. Continuous sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 17584F85B15167F0281E936C /* 1912. Continuous sum.swift */; };
		BA5865352C0F2D8B0095DF8B /* 409. Longest Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 32B9DB7949B9045A3941FC9E /* 409. Longest Palindrome.swift */; };
		BA58C3D22BE5DFFD00EF519E /* 881. Boats to Save People.swift in Sources */ = {isa = PBXBuildFile; fileRef = D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */; };
		BA58C3D32BE5F1EA00EF519E /* 11286. Heap of absolute values.swift in Sources */ = {isa = PBXBuildFile; fileRef = AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */; };
		BA59963E2BF58EDF006CF31D /* 11404. Floyd.swift in Sources */ = {isa = PBXBuildFile; fileRef = 481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */; };
		BA59CCB42BDFB94200219E83 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */; };
		BA59CCB52BDFD3B600219E83 /* 15686. Chicken delivery.swift in Sources */ = {isa = PBXBuildFile; fileRef = B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */; };
		BA5C4E532C2FB9C500C21657 /* 417. Pacific Atlantic Water Flow.swift in Sources */ = {isa = PBXBuildFile; fileRef = F231AD0651B83C1377D52E42 /* 417. Pacific Atlantic Water Flow.swift */; };
		BA5C4E542C3174E500C21657 /* 207. Course Schedule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35254E15F3974D0F5A925DEE /* 207. Course Schedule.swift */; };
		BA5F43DF2BE61748000AE158 /* 20. Valid Parentheses.swift in Sources */ = {isa = PBXBuildFile; fileRef = BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */; };
		BA5F43E12BE61D2E000AE158 /* ListNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA5F43E02BE61D2E000AE158 /* ListNode.swift */; };
		BA5F43E22BE61D64000AE158 /* 206. Reverse Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */; };
		BA5F43E32BE62003000AE158 /* ListNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA5F43E02BE61D2E000AE158 /* ListNode.swift */; };
		BA5F43E42BE62007000AE158 /* TreeNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF443E32BCD1256007D25A6 /* TreeNode.swift */; };
		BA5F43E52BE627C2000AE158 /* 21. Merge Two Sorted Lists.swift in Sources */ = {isa = PBXBuildFile; fileRef = B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */; };
		BA6028C02BEC97A6005F922E /* 3075. Maximize Happiness of Selected Children.swift in Sources */ = {isa = PBXBuildFile; fileRef = D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */; };
		BA6028C12BEC9BAC005F922E /* 1005. ACM Craft.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */; };
		BA63C1CA2BDB37F500CF76E8 /* 1289. Minimum Falling Path Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */; };
		BA63C1CB2BDB3F9600CF76E8 /* 20366. Do you want to build a snowman?.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */; };
		BA653D662BDCCD9200328F08 /* 17298. Right Larger Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */; };
		BA67D1742C2DB00900AC64E2 /* 39. Combination Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33037F413E5150802164ADEE /* 39. Combination Sum.swift */; };
		BA688CAD2BF089BD00009F37 /* 16953. A → B.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */; };
		BA688CAE2BF093B500009F37 /* 252. Meeting Rooms.swift in Sources */ = {isa = PBXBuildFile; fileRef = 11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */; };
		BA688CB12BF094B900009F37 /* Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA688CB02BF094B900009F37 /* Interval.swift */; };
		BA688CB22BF095C800009F37 /* Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA688CB02BF094B900009F37 /* Interval.swift */; };
		BA6ADF2D2BF4540A009174BE /* 2812. Find the Safest Path in a Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */; };
		BA6BE4DE2BFECF39004C2DBE /* 2597. The Number of Beautiful Subsets.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3F24BBE9F6B89C9896F5C85F /* 2597. The Number of Beautiful Subsets.swift */; };
		BA6BE4DF2BFEE699004C2DBE /* 1717. Representation of Sets.swift in Sources */ = {isa = PBXBuildFile; fileRef = A65FE21D09028E5E78136460 /* 1717. Representation of Sets.swift */; };
		BA6DE19C2C0AAC7A0030A41A /* 347. Top K Frequent Elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */; };
		BA6DE19D2C0ABE210030A41A /* 238. Product of Array Except Self.swift in Sources */ = {isa = PBXBuildFile; fileRef = 66B2ECA2900426DF23BA7F84 /* 238. Product of Array Except Self.swift */; };
		BA6DE19E2C0AC6790030A41A /* 3110. Score of a String.swift in Sources */ = {isa = PBXBuildFile; fileRef = D985260268CB61BE8EE28947 /* 3110. Score of a String.swift */; };
		BA6DE19F2C0ACC660030A41A /* 128. Longest Consecutive Sequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9A2FDCA6975113D6FFC07635 /* 128. Longest Consecutive Sequence.swift */; };
		BA6DE1A02C0AD2560030A41A /* 15. 3Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C8BF511AB63FDA60A08F53B /* 15. 3Sum.swift */; };
		BA6EBDD72BDBCDC300FAC927 /* 217. Contains Duplicate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */; };
		BA6EBDD82BDBCF4800FAC927 /* 242. Valid Anagram.swift in Sources */ = {isa = PBXBuildFile; fileRef = B226D6181F521969A817995D /* 242. Valid Anagram.swift */; };
		BA6EBDD92BDBD07500FAC927 /* 1. Two Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */; };
		BA6EBDDA2BDBD96500FAC927 /* 125. Valid Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */; };
		BA6EBDDB2BDBE14000FAC927 /* 121. Best Time to Buy and Sell Stock.swift in Sources */ = {isa = PBXBuildFile; fileRef = 361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */; };
		BA6EBDDC2BDCA93900FAC927 /* 514. Freedom Trail.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */; };
		BA6F36B82BF6DCC30035E84D /* 1806. Partial sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */; };
		BA7127E12C1160510028A48E /* 846. Hand of Straights.swift in Sources */ = {isa = PBXBuildFile; fileRef = C70DA0915E88152D9510FCDA /* 846. Hand of Straights.swift */; };
		BA7220462BF9B4F700C30DF0 /* 13460. Marbles Escape 2.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35EFB0F59250B929B7EA9D71 /* 13460. Marbles Escape 2.swift */; };
		BA74A7FF2C42C41500495ADF /* 647. Palindromic Substrings.swift in Sources */ = {isa = PBXBuildFile; fileRef = 81C286E6922C7A567B292794 /* 647. Palindromic Substrings.swift */; };
		BA74A8002C42F7FD00495ADF /* 91. Decode Ways.swift in Sources */ = {isa = PBXBuildFile; fileRef = FA8AD8DA072BE2CB795DF32E /* 91. Decode Ways.swift */; };
		BA74A8012C430DE100495ADF /* 322. Coin Change.swift in Sources */ = {isa = PBXBuildFile; fileRef = E1DE329271560823383B7232 /* 322. Coin Change.swift */; };
		BA74A8022C431B3900495ADF /* 152. Maximum Product Subarray.swift in Sources */ = {isa = PBXBuildFile; fileRef = 73599156B50C8D195AC3BE31 /* 152. Maximum Product Subarray.swift */; };
		BA74A8032C43281F00495ADF /* 139. Word Break.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1F51F87ECF2CAF63D81CAE59 /* 139. Word Break.swift */; };
		BA77F1642BDDEE7F00C3B741 /* 834. Sum of Distances in Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */; };
		BA77F1652BDE13CD00C3B741 /* 2293. Coin I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */; };
		BA7B548F2C005D9E00487885 /* 268. Missing Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = E7D9386DC2DEEEBDAAD77738 /* 268. Missing Number.swift */; };
		BA7B54902C00628600487885 /* 191. Number of 1 Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54F03DB50102B766401C03CA /* 191. Number of 1 Bits.swift */; };
		BA7B54912C00634400487885 /* 190. Reverse Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = A31B4AD258491BD90B81ECDA /* 190. Reverse Bits.swift */; };
		BA82A66E2C4A1801009A462A /* 1380. Lucky Numbers in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5F9D7ECD20BAD5C0C0812F7E /* 1380. Lucky Numbers in a Matrix.swift */; };
		BA87A3652C2D2642003987F7 /* 1791. Find Center of Star Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = 386D2F30007CA37E573A145B /* 1791. Find Center of Star Graph.swift */; };
		BA87A3672C2D278E003987F7 /* Testing+Tags.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA87A3662C2D278E003987F7 /* Testing+Tags.swift */; };
		BA87A3692C2D3601003987F7 /* 230. Kth Smallest Element in a BST.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3B77C8F6A46FE46E29B41A /* 230. Kth Smallest Element in a BST.swift */; };
		BA87A36A2C2D3F58003987F7 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5B4DB0C2BB23FB4A2558D168 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift */; };
		BA88A2572C1921600064528A /* 75. Sort Colors.swift in Sources */ = {isa = PBXBuildFile; fileRef = 628B9D43291111E8701BB0CF /* 75. Sort Colors.swift */; };
		BA8AF85F2BE6317900D1737E /* 141. Linked List Cycle.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */; };
		BA8AF8602BE63C6800D1737E /* 226. Invert Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */; };
		BA9134402BFC2A7300F24C03 /* 78. Subsets.swift in Sources */ = {isa = PBXBuildFile; fileRef = 34C149BC09FF7526B2D14BA5 /* 78. Subsets.swift */; };
		BA9134412BFC2DA400F24C03 /* 2294. Coins II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7F1B3178886B2D58AB8A39B2 /* 2294. Coins II.swift */; };
		BA9157FB2C01E4B300153799 /* 140. Word Break II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5191D2C41F069534495D26D5 /* 140. Word Break II.swift */; };
		BA9157FC2C01F45E00153799 /* 2560. Straw Worm.swift in Sources */ = {isa = PBXBuildFile; fileRef = BFC2054286B08183F0DF5E65 /* 2560. Straw Worm.swift */; };
		BA9328742BDA71E40060E7CD /* 2212. Sensors.swift in Sources */ = {isa = PBXBuildFile; fileRef = B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */; };
		BA98BB3D2BD8D81200C85E77 /* 1137. N-th Tribonacci Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = EA0A2B3410312D7B5AB8A9E7 /* 1137. N-th Tribonacci Number.swift */; };
		BA98BB3E2BD8DF2400C85E77 /* 1894. 4th dot.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */; };
		BA98BB3F2BD8EEFF00C85E77 /* 10775. Airport.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1BD96A68B432584E37757B6A /* 10775. Airport.swift */; };
		BA9BA9662BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */; };
		BA9BA9682BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift in Sources */ = {isa = PBXBuildFile; fileRef = BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */; };
		BA9DD9A12C02EA07000E523F /* 552. Student Attendance Record II.swift in Sources */ = {isa = PBXBuildFile; fileRef = DCFA261349D24273C2DADC36 /* 552. Student Attendance Record II.swift */; };
		BA9DD9A22C0308C4000E523F /* 14503. Robot vacuum cleaners.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7DC4C0423D56822B993EDE55 /* 14503. Robot vacuum cleaners.swift */; };
		BA9F02B52BE8A255007B8DB5 /* 2487. Remove Nodes From Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */; };
		BAA50C7A2BF1BBF70079ECDE /* 861. Score After Flipping Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */; };
		BAA50C7B2BF1CFB50079ECDE /* 2252. Line up.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */; };
		BAA8B6562BD9F6B40016D105 /* 2370. Longest Ideal Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */; };
		BAA8B6572BD9FF560016D105 /* 3197. The Lake of Swan.swift in Sources */ = {isa = PBXBuildFile; fileRef = 577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */; };
		BAACE2C52BF58DC600A29E7B /* 2331. Evaluate Boolean Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */; };
		BAAD45D92C142D0600C58A88 /* 648. Replace Words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5898B0DB91F3D979968E28A2 /* 648. Replace Words.swift */; };
		BAAD45DA2C142F0C00C58A88 /* 523. Continuous Subarray Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = FE5587DC5C16E820676BF562 /* 523. Continuous Subarray Sum.swift */; };
		BAAD45DB2C147DAE00C58A88 /* 11. Container With Most Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = E50DFF61D4BAF6BCB9B8C26C /* 11. Container With Most Water.swift */; };
		BAAD45DC2C1480F800C58A88 /* 3. Longest Substring Without Repeating Characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = F0B66AACFD31F859C28E0D92 /* 3. Longest Substring Without Repeating Characters.swift */; };
		BAAD45DD2C1492F100C58A88 /* 424. Longest Repeating Character Replacement.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DCDE06F3ECB6F129F9490F9 /* 424. Longest Repeating Character Replacement.swift */; };
		BAAD45DE2C15CC1E00C58A88 /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = FFB993A5EF974AF8A2057A3E /* 153. Find Minimum in Rotated Sorted Array.swift */; };
		BAAD45E12C15DA7400C58A88 /* 258709. Pick a die.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1B6F84AC5D5A2EE31CB08A38 /* 258709. Pick a die.swift */; };
		BAB1F84A2BF9EB6300C2137A /* 3152. Special Array II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0333B5EF6246610FC498AA97 /* 3152. Special Array II.swift */; };
		BAB9B9492BF865FA00DEF653 /* 979. Distribute Coins in Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */; };
		BABD18662C03F59C00EC6CD9 /* 13549. Hide and Seek 3.swift in Sources */ = {isa = PBXBuildFile; fileRef = A9E256CE7BB2212C60C12682 /* 13549. Hide and Seek 3.swift */; };
		BABD18682C03F71300EC6CD9 /* Deque.swift in Sources */ = {isa = PBXBuildFile; fileRef = BABD18672C03F71300EC6CD9 /* Deque.swift */; };
		BABD18692C0401D100EC6CD9 /* 13913. Hide and Seek 4.swift in Sources */ = {isa = PBXBuildFile; fileRef = F2A3DBC2A3CD0DAEDE815491 /* 13913. Hide and Seek 4.swift */; };
		BABD186A2C0408BA00EC6CD9 /* 1608. Special Array With X Elements Greater Than or Equal X.swift in Sources */ = {isa = PBXBuildFile; fileRef = DB1AF3E943D46EE5E30EEBDD /* 1608. Special Array With X Elements Greater Than or Equal X.swift */; };
		BAC2DAC92C095E110090A362 /* 260. Single Number III.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6D5B80796030C5D39D7C82DF /* 260. Single Number III.swift */; };
		BAC2DACA2C09630D0090A362 /* 14003. Longest increasing partial sequence 5.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5562FB082B2641E972B62076 /* 14003. Longest increasing partial sequence 5.swift */; };
		BAC5583A2BE0BEB800EEB13B /* 2805. Cutting trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = 42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */; };
		BAC7C2112C2E916700A89457 /* 2285. Maximum Total Importance of Roads.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335E1BAAF4EE65FD8E3D575A /* 2285. Maximum Total Importance of Roads.swift */; };
		BAC7C2132C2E91B100A89457 /* LeetCode2285Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAC7C2122C2E91B100A89457 /* LeetCode2285Tests.swift */; };
		BAC7C2142C2E9E3C00A89457 /* 211. Design Add and Search Words Data Structure.swift in Sources */ = {isa = PBXBuildFile; fileRef = B84820D654301CB08FA2B79F /* 211. Design Add and Search Words Data Structure.swift */; };
		BAC965FD2BE7406D00F4BE29 /* 237. Delete Node in a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */; };
		BAC965FE2BE74B3100F4BE29 /* 1987. Alphabet.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122859837263588F523ABD9A /* 1987. Alphabet.swift */; };
		BACCE9842BF6D8290015C397 /* 1325. Delete Leaves With a Given Value.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */; };
		BACFFC4C2BFD7B5700FE308F /* 131. Palindrome Partitioning.swift in Sources */ = {isa = PBXBuildFile; fileRef = 22FD94BAAD981FCC412E6425 /* 131. Palindrome Partitioning.swift */; };
		BACFFC4F2BFD806200FE308F /* ArrayComparison.swift in Sources */ = {isa = PBXBuildFile; fileRef = BACFFC4E2BFD806200FE308F /* ArrayComparison.swift */; };
		BACFFC502BFD85AE00FE308F /* 11054. Longest Sequence of Vitonic Parts.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3ABB3C103BC7B140AC8C602B /* 11054. Longest Sequence of Vitonic Parts.swift */; };
		BAD0548D2BE9B7A700B89545 /* 2816. Double a Number Represented as a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */; };
		BAD0548E2BE9BB9400B89545 /* 3015. Reunite Oasis.swift in Sources */ = {isa = PBXBuildFile; fileRef = F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */; };
		BAD3DBA02BEE16FE002463B7 /* 1010. Laying bridges.swift in Sources */ = {isa = PBXBuildFile; fileRef = 157712F738600FFC186461AB /* 1010. Laying bridges.swift */; };
		BAD3DBA12BEE40FF002463B7 /* 104. Maximum Depth of Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */; };
		BAD3DBA22BEE427A002463B7 /* 100. Same Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */; };
		BAD3DBA32BEE448A002463B7 /* 572. Subtree of Another Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */; };
		BAD3DBA42BEE4871002463B7 /* 70. Climbing Stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */; };
		BAD3DBA52BEF0036002463B7 /* 857. Minimum Cost to Hire K Workers.swift in Sources */ = {isa = PBXBuildFile; fileRef = A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */; };
		BAD520372BFAE84900DBDA88 /* 12100. 2048 (Easy).swift in Sources */ = {isa = PBXBuildFile; fileRef = 94BA011AC612F57B27FF0AFC /* 12100. 2048 (Easy).swift */; };
		BAD749022BF31FA000E7D03E /* 1219. Path with Maximum Gold.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */; };
		BAD749032BF330BA00E7D03E /* 14500. Tetromino.swift in Sources */ = {isa = PBXBuildFile; fileRef = 12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */; };
		BAD951152BEBC5D600806D4C /* 506. Relative Ranks.swift in Sources */ = {isa = PBXBuildFile; fileRef = D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */; };
		BAD951372C17EFA600BF583B /* 1122. Relative Sort Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 120E9F5DF4AFE78D1EBE7916 /* 1122. Relative Sort Array.swift */; };
		BAE3C9682C19E6B7005EBFA1 /* 102. Binary Tree Level Order Traversal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9F5E2616AD70C38A674E3FCD /* 102. Binary Tree Level Order Traversal.swift */; };
		BAE3C9692C19EF49005EBFA1 /* 98. Validate Binary Search Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 07A9708F38908DB977620466 /* 98. Validate Binary Search Tree.swift */; };
		BAE3C96A2C1A9638005EBFA1 /* 2037. Minimum Number of Moves to Seat Everyone.swift in Sources */ = {isa = PBXBuildFile; fileRef = CABFBBF258400526DBC95D31 /* 2037. Minimum Number of Moves to Seat Everyone.swift */; };
		BAE3C9A32C1C0233005EBFA1 /* 945. Minimum Increment to Make Array Unique.swift in Sources */ = {isa = PBXBuildFile; fileRef = CE4033177731BC55F7964469 /* 945. Minimum Increment to Make Array Unique.swift */; };
		BAE5D0502BF9929E00BB3D7D /* 3068. Find the Maximum Sum of Node Values.swift in Sources */ = {isa = PBXBuildFile; fileRef = 01D633A9853FE47F943C5FE0 /* 3068. Find the Maximum Sum of Node Values.swift */; };
		BAE7BEB22BF086C2008503CE /* 2373. Largest Local Values in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */; };
		BAF443E42BCD1256007D25A6 /* TreeNode.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF443E32BCD1256007D25A6 /* TreeNode.swift */; };
		BAF746DF299B78D600182311 /* main.swift in Sources */ = {isa = PBXBuildFile; fileRef = BAF746DE299B78D600182311 /* main.swift */; };
		BAFA9BC22C0CC25700DB50D6 /* 344. Reverse String.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4E840B847D5627E59F441F4 /* 344. Reverse String.swift */; };
		BAFA9BC32C0D995C00DB50D6 /* 2486. Append Characters to String to Make Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = B7E66C2B2F0DBD48EEA3B179 /* 2486. Append Characters to String to Make Subsequence.swift */; };
		BB3738DF1B12D36DEB35A4C8 /* LeetCode1255Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = AD8F9CCC04865A322FFC4B91 /* LeetCode1255Tests.swift */; };
		BBD1AA5BA71E14CCE2367BB5 /* 2597. The Number of Beautiful Subsets.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3F24BBE9F6B89C9896F5C85F /* 2597. The Number of Beautiful Subsets.swift */; };
		BC1AF46BB1B87896CA3C6404 /* LeetCode409Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B18F87D6073412EF5E69AE8B /* LeetCode409Tests.swift */; };
		BD8B62D4724AFF7346DE23D8 /* LeetCode55Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C4F27BD77A391BD30CD328C0 /* LeetCode55Tests.swift */; };
		BDAC34D0018A2DA6F665136A /* LeetCode1334Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0AA0BBC3FD23D5580A8C028D /* LeetCode1334Tests.swift */; };
		BDB6720A6E4E679695CDEAA3 /* 2191. Sort the Jumbled Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = C6FAB1EBCDA9DBC6594BCA92 /* 2191. Sort the Jumbled Numbers.swift */; };
		BE5BBA9ADF4C8ED964938D5C /* 13460. Marbles Escape 2.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35EFB0F59250B929B7EA9D71 /* 13460. Marbles Escape 2.swift */; };
		BE61E278EC8D865A0D5A4726 /* 125. Valid Palindrome.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */; };
		BEAA02AA699BE9527CC4B7AB /* LeetCode1636Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5B5B79009E7B632FEB51635D /* LeetCode1636Tests.swift */; };
		BF00AB9C2C5A2559004E7002 /* 1105. Filling Bookcase Shelves.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF90F3761B9DD9C20E29DC5A /* 1105. Filling Bookcase Shelves.swift */; };
		BF13723F2C5D7ABE002A80AB /* 1636. Sort Array by Increasing Frequency.swift in Sources */ = {isa = PBXBuildFile; fileRef = CAB6151291AEC2C119ADA2C5 /* 1636. Sort Array by Increasing Frequency.swift */; };
		BF1D7DF82C64F47E002DAE27 /* 885. Spiral Matrix III.swift in Sources */ = {isa = PBXBuildFile; fileRef = EFE61072C752C9C0CF6C9432 /* 885. Spiral Matrix III.swift */; };
		BF1F74B12C54675700531F9A /* 48. Rotate Image.swift in Sources */ = {isa = PBXBuildFile; fileRef = 69CA6D56360DD18FA518E847 /* 48. Rotate Image.swift */; };
		BF25ECF52C62274E00191641 /* 57. Insert Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = D72ED8632461597C1A70A022 /* 57. Insert Interval.swift */; };
		BF2CCB4D2C69B610007A1AEA /* 703. Kth Largest Element in a Stream.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F0563DDF46E0944507D276 /* 703. Kth Largest Element in a Stream.swift */; };
		BF2F41302C68F19200DF4997 /* 1568. Minimum Number of Days to Disconnect Island.swift in Sources */ = {isa = PBXBuildFile; fileRef = C2F4062EDADDE3736FE57362 /* 1568. Minimum Number of Days to Disconnect Island.swift */; };
		BF3903312C5C776C001F41B2 /* 2134. Minimum Swaps to Group All 1's Together II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 998B60C183B931DBD1B5A2A6 /* 2134. Minimum Swaps to Group All 1's Together II.swift */; };
		BF3D680C2C5E59C9007F4A25 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = 50C8C2EAE957BB2ABBEBC368 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift */; };
		BF3FA1332C55705100B78FD0 /* 2976. Minimum Cost to Convert String I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0ADB68B8C79F8A24018CF207 /* 2976. Minimum Cost to Convert String I.swift */; };
		BF4073092C61195D005C448A /* BOJ1005Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BF4073042C61195D005C448A /* BOJ1005Tests.swift */; };
		BF40730A2C61195D005C448A /* BOJ1504Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BF4073062C61195D005C448A /* BOJ1504Tests.swift */; };
		BF40730B2C61195D005C448A /* BOJ1238Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BF4073052C61195D005C448A /* BOJ1238Tests.swift */; };
		BF40730C2C61195D005C448A /* BOJ1520Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BF4073072C61195D005C448A /* BOJ1520Tests.swift */; };
		BF40730F2C61195F005C448A /* BOJ1010Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = BF40730D2C61195F005C448A /* BOJ1010Tests.swift */; };
		BF4073102C61197C005C448A /* 6549. Largest rectangle in a histogram.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C797F0C712A9F9EE4B794EB /* 6549. Largest rectangle in a histogram.swift */; };
		BF54DAB72C5F868800D8CBF1 /* 1508. Range Sum of Sorted Subarray Sums.swift in Sources */ = {isa = PBXBuildFile; fileRef = 44033AA8EF8C4663094B4453 /* 1508. Range Sum of Sorted Subarray Sums.swift */; };
		BF5EAAA52C72219A007CC01A /* 264. Ugly Number II.swift in Sources */ = {isa = PBXBuildFile; fileRef = FF78E40017CA340D7AAE1EA6 /* 264. Ugly Number II.swift */; };
		BF776FBF2C53EF82006D2187 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3CD8555921F21827E1CC1343 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift */; };
		BF7843DF2C7447DC00BCA94B /* 1140. Stone Game II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0A4146EE6AFCA55C90899E84 /* 1140. Stone Game II.swift */; };
		BF7E15E52C65BFAE0021491F /* 840. Magic Squares In Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0D740B0C6B4DA9EAA3979C01 /* 840. Magic Squares In Grid.swift */; };
		BF83E69E2C5D0AC500C00180 /* 2045. Second Minimum Time to Reach Destination.swift in Sources */ = {isa = PBXBuildFile; fileRef = FD026386AD38656464754565 /* 2045. Second Minimum Time to Reach Destination.swift */; };
		BF8B5A3C2C708D19001292E0 /* 1937. Maximum Number of Points with Cost.swift in Sources */ = {isa = PBXBuildFile; fileRef = 018FCC6D0D42DF6814C83152 /* 1937. Maximum Number of Points with Cost.swift */; };
		BF8CAF912C6AF520005453DB /* 40. Combination Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = AB83071F4F4E9CC58DA5DB9A /* 40. Combination Sum II.swift */; };
		BF945E402C61A0A9006CA57C /* 3016. Minimum Number of Pushes to Type Word II.swift in Sources */ = {isa = PBXBuildFile; fileRef = AB2DAE2B02DADD306D57A5E8 /* 3016. Minimum Number of Pushes to Type Word II.swift */; };
		BF9735272C5B1926005D4BE8 /* 2678. Number of Senior Citizens.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9837467B1F94759DA34DDE1B /* 2678. Number of Senior Citizens.swift */; };
		BF9DDEF92C62F37C0048ED54 /* 273. Integer to English Words.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3D9168D2C103CBC539C65675 /* 273. Integer to English Words.swift */; };
		BFBBE5C42C54510400B199DB /* 55. Jump Game.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */; };
		BFBF67B32C67914D00DF69C0 /* 959. Regions Cut By Slashes.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8BF46C0809B84C10359C2D06 /* 959. Regions Cut By Slashes.swift */; };
		BFC2E3072C59380500B13C7F /* 1653. Minimum Deletions to Make String Balanced.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3EB65F30FE618D08A8981288 /* 1653. Minimum Deletions to Make String Balanced.swift */; };
		BFCBD8F02C4AE23F00D20B6D /* 300. Longest Increasing Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED7A057DE8FF69532245A94B /* 300. Longest Increasing Subsequence.swift */; };
		BFCBD8F12C4B01CB00D20B6D /* 62. Unique Paths.swift in Sources */ = {isa = PBXBuildFile; fileRef = 291D92261434E2DE2F1B4790 /* 62. Unique Paths.swift */; };
		BFCBD8F22C4B083600D20B6D /* 1143. Longest Common Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = B727C17660224BF8CB787078 /* 1143. Longest Common Subsequence.swift */; };
		BFCBD8F32C4B114200D20B6D /* 53. Maximum Subarray.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */; };
		BFD6192A2C573A2D00C3230A /* 2191. Sort the Jumbled Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = C6FAB1EBCDA9DBC6594BCA92 /* 2191. Sort the Jumbled Numbers.swift */; };
		BFD798462C6DCE3E00152E13 /* 860. Lemonade Change.swift in Sources */ = {isa = PBXBuildFile; fileRef = B60A132C2AC4611605971675 /* 860. Lemonade Change.swift */; };
		BFDA1A062C6C40E80083234B /* 719. Find K-th Smallest Pair Distance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 41D80CFA1FD6F126C6D4DAA0 /* 719. Find K-th Smallest Pair Distance.swift */; };
		BFE7EF1C2C6EF32500B80E9E /* 624. Maximum Distance in Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = AED45D82B80087856CD848F9 /* 624. Maximum Distance in Arrays.swift */; };
		BFED97312C559357008D4110 /* 912. Sort an Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = C060A37358429B6DDFB0CB7C /* 912. Sort an Array.swift */; };
		BFEF74B32C60A33C001E7B1D /* 2053. Kth Distinct String in an Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = 01A3811855EDD6CBFDF80EDC /* 2053. Kth Distinct String in an Array.swift */; };
		BFFB4A102C72F0BC005422E3 /* 650. 2 Keys Keyboard.swift in Sources */ = {isa = PBXBuildFile; fileRef = B26AB5BD69487320B9E84D62 /* 650. 2 Keys Keyboard.swift */; };
		C06F845349F4B156265D6BB1 /* LeetCode238Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = DB901B8C3045A363C4F608E0 /* LeetCode238Tests.swift */; };
		C10A6CDAD074405CAC64B0D8 /* LeetCode2997Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */; };
		C174FA13DF6647CABA406969 /* BOJ2293Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */; };
		C208E199F55754A08811F951 /* BOJ1707Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = AE765BAF14B396C029241FA7 /* BOJ1707Tests.swift */; };
		C2B1B4D8B473D90B6A948153 /* LeetCode1380Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FCD62B991690A11A7495455C /* LeetCode1380Tests.swift */; };
		C499DD65E10628A9B228AC27 /* 18231. destroyed city.swift in Sources */ = {isa = PBXBuildFile; fileRef = DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */; };
		C50A71FB04650BC427B8F123 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8C54F4B78EF197DB28399266 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift */; };
		C530A0FCD842D8CF1DA82E6E /* LeetCode1325Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */; };
		C593A17CE2D17EA8453EC727 /* 2812. Find the Safest Path in a Grid.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */; };
		C8291FE3A2C5B478865C028E /* LeetCode1863Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F3E32DE4062D683AD5EE6B5C /* LeetCode1863Tests.swift */; };
		C87E44BC725BBCA98CA8D8E4 /* LeetCode4Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */; };
		C8C1054426D0C9F6383D5D22 /* 48. Rotate Image.swift in Sources */ = {isa = PBXBuildFile; fileRef = 69CA6D56360DD18FA518E847 /* 48. Rotate Image.swift */; };
		C8ECE6E8F967AF9BDCD9EEE8 /* BOJ1912Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */; };
		C9AA781E33E53CA0F2B27B5B /* LeetCode206Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */; };
		CA135C55F174CA9DC56742DA /* 1325. Delete Leaves With a Given Value.swift in Sources */ = {isa = PBXBuildFile; fileRef = 54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */; };
		CB4CC72290B1420BED924018 /* BOJ14500Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9529500EC53BD87590C5280C /* BOJ14500Tests.swift */; };
		CBC39204811D97F072A049B0 /* LeetCode323Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 83E855E22BDFE029968EDB06 /* LeetCode323Tests.swift */; };
		CC3C035935A88BCB7EB99E51 /* 3. Longest Substring Without Repeating Characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = F0B66AACFD31F859C28E0D92 /* 3. Longest Substring Without Repeating Characters.swift */; };
		CD31C9625EC944EF8846F1C6 /* BOJ1894Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */; };
		CD5E31BC97D4FC74BBB6E42E /* 1380. Lucky Numbers in a Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5F9D7ECD20BAD5C0C0812F7E /* 1380. Lucky Numbers in a Matrix.swift */; };
		CDE0CB5B9C4F4F405831619B /* 1863. Sum of All Subset XOR Totals.swift in Sources */ = {isa = PBXBuildFile; fileRef = 56E868BC74EBDD083D26A31F /* 1863. Sum of All Subset XOR Totals.swift */; };
		CE3B7C3E3BBC45B2A4F73BEC /* 260. Single Number III.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6D5B80796030C5D39D7C82DF /* 260. Single Number III.swift */; };
		CE6A213992B34D2B4ABF6816 /* 9935. string explosion.swift in Sources */ = {isa = PBXBuildFile; fileRef = 294EF7DF806D781B692BB270 /* 9935. string explosion.swift */; };
		CEA813ED69A0FCF2681D2DD1 /* 1. Two Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */; };
		CF51D795B88F0BD8833FBA1D /* 338. Counting Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2BA523F29A5BF8B4ACBD38EB /* 338. Counting Bits.swift */; };
		CF716FC0E29958FD2B5B02CA /* BOJ11054Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = FD7D90025D344943654E4E1F /* BOJ11054Tests.swift */; };
		CF79780E921D63D4DE2052CC /* LeetCode200Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 57CFA802F890A54C54657935 /* LeetCode200Tests.swift */; };
		D1CD436EF833C0306B3F4F8A /* 3408. Count the Number of Special Characters I.swift in Sources */ = {isa = PBXBuildFile; fileRef = 13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */; };
		D1F5505C9FFB2481E1C8E9D2 /* 11279. Max Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */; };
		D3FBB7F5A750407BD1C73A2F /* 1568. Minimum Number of Days to Disconnect Island.swift in Sources */ = {isa = PBXBuildFile; fileRef = C2F4062EDADDE3736FE57362 /* 1568. Minimum Number of Days to Disconnect Island.swift */; };
		D4F0D8E8E663A63F336D9EB8 /* LeetCode2816Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7751B3D59332952585B66641 /* LeetCode2816Tests.swift */; };
		D54B908E85CBC4513075E558 /* LeetCode1568Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9512A1DEE40CB9A927B0CAF2 /* LeetCode1568Tests.swift */; };
		D5894F750FFEBA60E447407F /* LeetCode1122Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B64A03F3D77B20C1725274E5 /* LeetCode1122Tests.swift */; };
		D595098AAD0857AF4CE80CB1 /* LeetCode945Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 87BF5E74C45E9D79FBA404AC /* LeetCode945Tests.swift */; };
		D5A7A34381EB73112802F70B /* 1894. 4th dot.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */; };
		D63B9DC8BCAF86678DFBA708 /* 2816. Double a Number Represented as a Linked List.swift in Sources */ = {isa = PBXBuildFile; fileRef = BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */; };
		D6F91A80D07F5BE8176F007F /* LeetCode213Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 236A06220556F5E054C84D29 /* LeetCode213Tests.swift */; };
		D75DF0F8D3F8EDECB3720815 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5B4DB0C2BB23FB4A2558D168 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift */; };
		D8E0F696DABBCE4C59202B12 /* 885. Spiral Matrix III.swift in Sources */ = {isa = PBXBuildFile; fileRef = EFE61072C752C9C0CF6C9432 /* 885. Spiral Matrix III.swift */; };
		D9B199DF940DAB5E5AC7505D /* LeetCode1653Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 4E8537BC0D529DCB72627793 /* LeetCode1653Tests.swift */; };
		D9B426BDB614D9216477D2FC /* 300. Longest Increasing Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED7A057DE8FF69532245A94B /* 300. Longest Increasing Subsequence.swift */; };
		DA6C0DA89DE78DCD5E9546BD /* LeetCode959Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 93BFE3A1BB71B1A8DA734039 /* LeetCode959Tests.swift */; };
		DB36B23DCEE11927089EAC04 /* LeetCode572Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */; };
		DB67AC0830653F632A87F19D /* 860. Lemonade Change.swift in Sources */ = {isa = PBXBuildFile; fileRef = B60A132C2AC4611605971675 /* 860. Lemonade Change.swift */; };
		DBB06802AE28A5B03DBDFE44 /* LeetCode133Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E7308589A15B778AF4913CCF /* LeetCode133Tests.swift */; };
		DBF563261B613F276FF56F53 /* 15. 3Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C8BF511AB63FDA60A08F53B /* 15. 3Sum.swift */; };
		DC2DB3E5F1092447DA942B84 /* BOJ2294Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2422E42138FA768A1450A90A /* BOJ2294Tests.swift */; };
		DC35452B7543C80A9E697A6C /* LeetCode2000Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 705063D013249906171AC36F /* LeetCode2000Tests.swift */; };
		DC87DB72942D3E8CEA455C82 /* LeetCode141Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */; };
		DC99C660256226EC3DDD3C36 /* 62. Unique Paths.swift in Sources */ = {isa = PBXBuildFile; fileRef = 291D92261434E2DE2F1B4790 /* 62. Unique Paths.swift */; };
		DDF6695C6A8188F30054D1AB /* 1717. Representation of Sets.swift in Sources */ = {isa = PBXBuildFile; fileRef = A65FE21D09028E5E78136460 /* 1717. Representation of Sets.swift */; };
		DE8BAADDEBF212C89E8317E9 /* 140. Word Break II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5191D2C41F069534495D26D5 /* 140. Word Break II.swift */; };
		DEC4E98DDE27276342178FB3 /* 2134. Minimum Swaps to Group All 1's Together II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 998B60C183B931DBD1B5A2A6 /* 2134. Minimum Swaps to Group All 1's Together II.swift */; };
		DF1E85940105D4845A53B0B0 /* BOJ15686Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */; };
		E0FCA9FF1181808EAC80F4C3 /* 506. Relative Ranks.swift in Sources */ = {isa = PBXBuildFile; fileRef = D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */; };
		E14F847269046FDB8DFB2369 /* BOJ11279Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */; };
		E194F951CFBF795F6FB51BEE /* BOJ13913Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 40EFCEB7FF387928617BF575 /* BOJ13913Tests.swift */; };
		E2582B0ED20777C5AE9123C1 /* LeetCode2053Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 605D123ED8FEF7404B067158 /* LeetCode2053Tests.swift */; };
		E35D9CC0ED1381DA48C88546 /* 857. Minimum Cost to Hire K Workers.swift in Sources */ = {isa = PBXBuildFile; fileRef = A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */; };
		E36093434D7C646997140739 /* 217. Contains Duplicate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */; };
		E3CFE473C7D243A574E56BA0 /* LeetCode1404Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6D35327A21A3DF4B5F19201F /* LeetCode1404Tests.swift */; };
		E40BD41874F5060786E08120 /* BOJ6549Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 04527326CA6EAA395DF02AFB /* BOJ6549Tests.swift */; };
		E4624DDA6D53C3129D21DF44 /* BOJ14503Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6B8A41AA479FCC7C42C7EA8E /* BOJ14503Tests.swift */; };
		E48C760D2319001964854A5F /* 1143. Longest Common Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = B727C17660224BF8CB787078 /* 1143. Longest Common Subsequence.swift */; };
		E4ABE005795BFD94E3C44DB5 /* 6549. Largest rectangle in a histogram.swift in Sources */ = {isa = PBXBuildFile; fileRef = 9C797F0C712A9F9EE4B794EB /* 6549. Largest rectangle in a histogram.swift */; };
		E4B77CCE7DCC09274BA44ECE /* BOJ20366Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */; };
		E4E957C7A58659AF82B00781 /* LeetCode1289Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */; };
		E5B4D9ED3F67E52CC775F6C2 /* LeetCode2331Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */; };
		E5CCCC8B01E71408C0CC1E92 /* LeetCode49Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A19C9B1DDD4030FBF59E0E0D /* LeetCode49Tests.swift */; };
		E5FD6774F639021C4C21636C /* 1636. Sort Array by Increasing Frequency.swift in Sources */ = {isa = PBXBuildFile; fileRef = CAB6151291AEC2C119ADA2C5 /* 1636. Sort Array by Increasing Frequency.swift */; };
		E6402D73EB141156F1D4F6E1 /* 4. Median of Two Sorted Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */; };
		E6F07A0579F17CF856496A56 /* 2805. Cutting trees.swift in Sources */ = {isa = PBXBuildFile; fileRef = 42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */; };
		E7F90C1C3425675050CD71B8 /* 2370. Longest Ideal Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */; };
		E824D7B94D1B6862EDDD8D7E /* 268. Missing Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = E7D9386DC2DEEEBDAAD77738 /* 268. Missing Number.swift */; };
		E89D9D1F30AD1E2B8961AF97 /* LeetCode48Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D46B8D3CB69E3F110385AB66 /* LeetCode48Tests.swift */; };
		EAB00324767701BD18372463 /* 719. Find K-th Smallest Pair Distance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 41D80CFA1FD6F126C6D4DAA0 /* 719. Find K-th Smallest Pair Distance.swift */; };
		EAC0E1C09216D03FA87E17CA /* LeetCode152Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = D6C97E8951C7850F66D2D803 /* LeetCode152Tests.swift */; };
		EB0CEBB7E8C5BCA46E1D0255 /* 40. Combination Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = AB83071F4F4E9CC58DA5DB9A /* 40. Combination Sum II.swift */; };
		EB2F8B6BD40873DC6C7979A3 /* LeetCode165Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */; };
		EC093217774A0A1A94833C72 /* LeetCode3068Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 23E920E2FDD503875CDCDACD /* LeetCode3068Tests.swift */; };
		ED659B162A0990858CF4DA6F /* 3405. Count the Number of Special Characters II.swift in Sources */ = {isa = PBXBuildFile; fileRef = B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */; };
		ED860DD7204EFEFED588EA5F /* LeetCode514Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 95E754B77DED66104FACA354 /* LeetCode514Tests.swift */; };
		EFAF18D58C399F9720BE65DA /* LeetCode100Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */; };
		EFED1CD0862E4245430E1C06 /* 1137. N-th Tribonacci Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = EA0A2B3410312D7B5AB8A9E7 /* 1137. N-th Tribonacci Number.swift */; };
		F01E4AB8A934DD5C4EDE3469 /* LeetCode861Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */; };
		F02CE7E02C1CBEE220F63E8E /* 3152. Special Array II.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0333B5EF6246610FC498AA97 /* 3152. Special Array II.swift */; };
		F06B5182A755352522AF9173 /* LeetCode885Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C595B9C6AD670D68DE3A1AA7 /* LeetCode885Tests.swift */; };
		F10BA05B916C440AD7BF14C7 /* BOJ17298Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */; };
		F133405F354E742CDC577B17 /* BOJ12100Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = C66492C2240F2B1E74FF3E1F /* BOJ12100Tests.swift */; };
		F17B6C1DBECDBCAC30C386EE /* 1010. Laying bridges.swift in Sources */ = {isa = PBXBuildFile; fileRef = 157712F738600FFC186461AB /* 1010. Laying bridges.swift */; };
		F1EC137A1A30900D9031EE8E /* LeetCode1Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */; };
		F1F41F139A4743AE1135C26A /* LeetCode260Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0CDFE9DD3C635B0BEDF7CAE9 /* LeetCode260Tests.swift */; };
		F2CB6959B16EF74970A14DE6 /* 198. House Robber.swift in Sources */ = {isa = PBXBuildFile; fileRef = 82D26493F07309BE090CDF14 /* 198. House Robber.swift */; };
		F33D623C2BB190E54E3D207D /* 55. Jump Game.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */; };
		F34928B1B8FFFC0C8B142662 /* 2212. Sensors.swift in Sources */ = {isa = PBXBuildFile; fileRef = B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */; };
		F3B151CE8D870CBD1A406D4F /* 1002. Find Common Characters.swift in Sources */ = {isa = PBXBuildFile; fileRef = B35F83E43937F3CC6ECF51CF /* 1002. Find Common Characters.swift */; };
		F5B5EE786C2E6689F48E309C /* 624. Maximum Distance in Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = AED45D82B80087856CD848F9 /* 624. Maximum Distance in Arrays.swift */; };
		F68446E14DFD288927013547 /* LeetCode139Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = F234B2CEEBA52CBE87B93E15 /* LeetCode139Tests.swift */; };
		F6BB28678B4463A2F9D2A609 /* 207. Course Schedule.swift in Sources */ = {isa = PBXBuildFile; fileRef = 35254E15F3974D0F5A925DEE /* 207. Course Schedule.swift */; };
		F9793127364A2E8B02D9FCED /* BOJ1806Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */; };
		F9CF510FA1B30BF96E5E3334 /* 753. Open the Lock.swift in Sources */ = {isa = PBXBuildFile; fileRef = F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */; };
		FBD0578BA334A6AEE0BB4B69 /* LeetCode21Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */; };
		FC374C1BAB7BC1184094E7E6 /* 463. Island Perimeter.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */; };
		FC655B919EF62A4A8997BA10 /* 78. Subsets.swift in Sources */ = {isa = PBXBuildFile; fileRef = 34C149BC09FF7526B2D14BA5 /* 78. Subsets.swift */; };
		FD4AB96C99A49B8FD67661B3 /* LeetCode300Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 611E4F7A77ACC2B67BE6BCB6 /* LeetCode300Tests.swift */; };
		FD7E88575DCED5264E7F1319 /* LeetCode2486Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = A30AE72E46F5BCE131E6D7DA /* LeetCode2486Tests.swift */; };
		FE1E972714FFCB086EEC75BA /* 75. Sort Colors.swift in Sources */ = {isa = PBXBuildFile; fileRef = 628B9D43291111E8701BB0CF /* 75. Sort Colors.swift */; };
		FE748639EBF0EC7AEA3B6C9B /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift in Sources */ = {isa = PBXBuildFile; fileRef = 3CD8555921F21827E1CC1343 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift */; };
		FF44CB3EB03092BEEBD8215E /* 42. Trapping Rain Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */; };
		FFC41F2D479AFAE162F468AF /* 2285. Maximum Total Importance of Roads.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335E1BAAF4EE65FD8E3D575A /* 2285. Maximum Total Importance of Roads.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		BAF746D9299B78D600182311 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		018FCC6D0D42DF6814C83152 /* 1937. Maximum Number of Points with Cost.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1937. Maximum Number of Points with Cost.swift"; sourceTree = "<group>"; };
		01A3811855EDD6CBFDF80EDC /* 2053. Kth Distinct String in an Array.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2053. Kth Distinct String in an Array.swift"; sourceTree = "<group>"; };
		01D633A9853FE47F943C5FE0 /* 3068. Find the Maximum Sum of Node Values.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3068. Find the Maximum Sum of Node Values.swift"; sourceTree = "<group>"; };
		02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode121Tests.swift; sourceTree = "<group>"; };
		0333B5EF6246610FC498AA97 /* 3152. Special Array II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3152. Special Array II.swift"; sourceTree = "<group>"; };
		043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ20366Tests.swift; sourceTree = "<group>"; };
		04527326CA6EAA395DF02AFB /* BOJ6549Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ6549Tests.swift; sourceTree = "<group>"; };
		04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "125. Valid Palindrome.swift"; sourceTree = "<group>"; };
		04C37740809FE4ED0C88966A /* LeetCode347Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode347Tests.swift; sourceTree = "<group>"; };
		051F0B15589E4568FE2E7E64 /* LeetCode268Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode268Tests.swift; sourceTree = "<group>"; };
		0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1916Tests.swift; sourceTree = "<group>"; };
		07A9708F38908DB977620466 /* 98. Validate Binary Search Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "98. Validate Binary Search Tree.swift"; sourceTree = "<group>"; };
		09735B98B3D9525DF71E496D /* LeetCode143Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode143Tests.swift; sourceTree = "<group>"; };
		097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1219Tests.swift; sourceTree = "<group>"; };
		09F9F335D4104A2713528534 /* LeetCode2134Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2134Tests.swift; sourceTree = "<group>"; };
		0A4146EE6AFCA55C90899E84 /* 1140. Stone Game II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1140. Stone Game II.swift"; sourceTree = "<group>"; };
		0AA0BBC3FD23D5580A8C028D /* LeetCode1334Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1334Tests.swift; sourceTree = "<group>"; };
		0ADB68B8C79F8A24018CF207 /* 2976. Minimum Cost to Convert String I.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2976. Minimum Cost to Convert String I.swift"; sourceTree = "<group>"; };
		0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2000. Reverse Prefix of Word.swift"; sourceTree = "<group>"; };
		0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "20366. Do you want to build a snowman?.swift"; sourceTree = "<group>"; };
		0C8BF511AB63FDA60A08F53B /* 15. 3Sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "15. 3Sum.swift"; sourceTree = "<group>"; };
		0CDFE9DD3C635B0BEDF7CAE9 /* LeetCode260Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode260Tests.swift; sourceTree = "<group>"; };
		0D740B0C6B4DA9EAA3979C01 /* 840. Magic Squares In Grid.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "840. Magic Squares In Grid.swift"; sourceTree = "<group>"; };
		0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1915. Number of Wonderful Substrings.swift"; sourceTree = "<group>"; };
		0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "572. Subtree of Another Tree.swift"; sourceTree = "<group>"; };
		0DCDE06F3ECB6F129F9490F9 /* 424. Longest Repeating Character Replacement.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "424. Longest Repeating Character Replacement.swift"; sourceTree = "<group>"; };
		0EB89B681AC593F2C19E2CB8 /* LeetCode208Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode208Tests.swift; sourceTree = "<group>"; };
		10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1912Tests.swift; sourceTree = "<group>"; };
		11669A8777EF852FCC41B1C1 /* 79. Word Search.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "79. Word Search.swift"; sourceTree = "<group>"; };
		11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "252. Meeting Rooms.swift"; sourceTree = "<group>"; };
		120E9F5DF4AFE78D1EBE7916 /* 1122. Relative Sort Array.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1122. Relative Sort Array.swift"; sourceTree = "<group>"; };
		122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "217. Contains Duplicate.swift"; sourceTree = "<group>"; };
		122859837263588F523ABD9A /* 1987. Alphabet.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1987. Alphabet.swift"; sourceTree = "<group>"; };
		12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "14500. Tetromino.swift"; sourceTree = "<group>"; };
		13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3408. Count the Number of Special Characters I.swift"; sourceTree = "<group>"; };
		155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2331Tests.swift; sourceTree = "<group>"; };
		157712F738600FFC186461AB /* 1010. Laying bridges.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1010. Laying bridges.swift"; sourceTree = "<group>"; };
		15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2110Tests.swift; sourceTree = "<group>"; };
		15D530FF819EAC903D8602A1 /* LeetCode2976Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2976Tests.swift; sourceTree = "<group>"; };
		15DCA0BFB3EB783A412C5D66 /* LeetCode191Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode191Tests.swift; sourceTree = "<group>"; };
		16705E21EBC8C823E23AF516 /* LeetCode523Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode523Tests.swift; sourceTree = "<group>"; };
		1678102D7A95C13B1F272C94 /* LeetCode2045Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2045Tests.swift; sourceTree = "<group>"; };
		17584F85B15167F0281E936C /* 1912. Continuous sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1912. Continuous sum.swift"; sourceTree = "<group>"; };
		17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "10844. number of easy stairs.swift"; sourceTree = "<group>"; };
		18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode881Tests.swift; sourceTree = "<group>"; };
		1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "129. Sum Root to Leaf Numbers.swift"; sourceTree = "<group>"; };
		1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "18429. root loss.swift"; sourceTree = "<group>"; };
		1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "55. Jump Game.swift"; sourceTree = "<group>"; };
		1B6F84AC5D5A2EE31CB08A38 /* 258709. Pick a die.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "258709. Pick a die.swift"; sourceTree = "<group>"; };
		1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1894Tests.swift; sourceTree = "<group>"; };
		1BD96A68B432584E37757B6A /* 10775. Airport.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "10775. Airport.swift"; sourceTree = "<group>"; };
		1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "463. Island Perimeter.swift"; sourceTree = "<group>"; };
		1E214FCD72899F7498E54170 /* LeetCode2678Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2678Tests.swift; sourceTree = "<group>"; };
		1F51F87ECF2CAF63D81CAE59 /* 139. Word Break.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "139. Word Break.swift"; sourceTree = "<group>"; };
		2061C10294307EE82DF59245 /* LeetCode1051Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1051Tests.swift; sourceTree = "<group>"; };
		20C68D3AB2CDD489E79E1FBB /* LeetCode62Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode62Tests.swift; sourceTree = "<group>"; };
		21A2B0065BC745B81E3D0C3C /* LeetCode1442Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1442Tests.swift; sourceTree = "<group>"; };
		22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "141. Linked List Cycle.swift"; sourceTree = "<group>"; };
		22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2487Tests.swift; sourceTree = "<group>"; };
		22FD94BAAD981FCC412E6425 /* 131. Palindrome Partitioning.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "131. Palindrome Partitioning.swift"; sourceTree = "<group>"; };
		2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1289Tests.swift; sourceTree = "<group>"; };
		236A06220556F5E054C84D29 /* LeetCode213Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode213Tests.swift; sourceTree = "<group>"; };
		23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2812Tests.swift; sourceTree = "<group>"; };
		23E920E2FDD503875CDCDACD /* LeetCode3068Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3068Tests.swift; sourceTree = "<group>"; };
		2422E42138FA768A1450A90A /* BOJ2294Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2294Tests.swift; sourceTree = "<group>"; };
		25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1325Tests.swift; sourceTree = "<group>"; };
		25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "16953. A → B.swift"; sourceTree = "<group>"; };
		27810901CF9AC90B5D768927 /* LeetCode230Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode230Tests.swift; sourceTree = "<group>"; };
		291D92261434E2DE2F1B4790 /* 62. Unique Paths.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "62. Unique Paths.swift"; sourceTree = "<group>"; };
		294EF7DF806D781B692BB270 /* 9935. string explosion.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "9935. string explosion.swift"; sourceTree = "<group>"; };
		2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2293Tests.swift; sourceTree = "<group>"; };
		2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1759. Create a password.swift"; sourceTree = "<group>"; };
		2BA523F29A5BF8B4ACBD38EB /* 338. Counting Bits.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "338. Counting Bits.swift"; sourceTree = "<group>"; };
		2D1A296F4B09694A8C56F644 /* 49. Group Anagrams.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "49. Group Anagrams.swift"; sourceTree = "<group>"; };
		2EC3121C728E9655DC400056 /* 3111. Censorship.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3111. Censorship.swift"; sourceTree = "<group>"; };
		2FEBCA0B65FDEEBA0DF66309 /* LeetCode1137Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1137Tests.swift; sourceTree = "<group>"; };
		3063EFA2907FE0E7DE7FF431 /* LeetCode33Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode33Tests.swift; sourceTree = "<group>"; };
		30989E95C8E3F9019C710B4B /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1404. Number of Steps to Reduce a Number in Binary Representation to One.swift"; sourceTree = "<group>"; };
		3190CEC2485F656A19458675 /* LeetCode424Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode424Tests.swift; sourceTree = "<group>"; };
		31B0787BAFD13EF3D7CF59A2 /* LeetCode1937Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1937Tests.swift; sourceTree = "<group>"; };
		32769F20766FEEC70896B8F0 /* 1238. Parties.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1238. Parties.swift"; sourceTree = "<group>"; };
		32AD3D935CBD537401088FEF /* LeetCode1460Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1460Tests.swift; sourceTree = "<group>"; };
		32B9DB7949B9045A3941FC9E /* 409. Longest Palindrome.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "409. Longest Palindrome.swift"; sourceTree = "<group>"; };
		33037F413E5150802164ADEE /* 39. Combination Sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "39. Combination Sum.swift"; sourceTree = "<group>"; };
		335E1BAAF4EE65FD8E3D575A /* 2285. Maximum Total Importance of Roads.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2285. Maximum Total Importance of Roads.swift"; sourceTree = "<group>"; };
		3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode861Tests.swift; sourceTree = "<group>"; };
		34C149BC09FF7526B2D14BA5 /* 78. Subsets.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "78. Subsets.swift"; sourceTree = "<group>"; };
		35254E15F3974D0F5A925DEE /* 207. Course Schedule.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "207. Course Schedule.swift"; sourceTree = "<group>"; };
		35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "623. Add One Row to Tree.swift"; sourceTree = "<group>"; };
		35EA9BE89FBB7750C4AA24B4 /* LeetCode198Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode198Tests.swift; sourceTree = "<group>"; };
		35EFB0F59250B929B7EA9D71 /* 13460. Marbles Escape 2.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "13460. Marbles Escape 2.swift"; sourceTree = "<group>"; };
		361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "121. Best Time to Buy and Sell Stock.swift"; sourceTree = "<group>"; };
		3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1005. ACM Craft.swift"; sourceTree = "<group>"; };
		386D2F30007CA37E573A145B /* 1791. Find Center of Star Graph.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1791. Find Center of Star Graph.swift"; sourceTree = "<group>"; };
		38C0CEE1D40BA1DE8BCD26E0 /* LeetCode5Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode5Tests.swift; sourceTree = "<group>"; };
		39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1753Tests.swift; sourceTree = "<group>"; };
		3ABB3C103BC7B140AC8C602B /* 11054. Longest Sequence of Vitonic Parts.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11054. Longest Sequence of Vitonic Parts.swift"; sourceTree = "<group>"; };
		3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ10775Tests.swift; sourceTree = "<group>"; };
		3B69F9B8D2F140EBE6C631AF /* LeetCode105Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode105Tests.swift; sourceTree = "<group>"; };
		3C36C580B042F6AEBAD7C3C7 /* LeetCode75Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode75Tests.swift; sourceTree = "<group>"; };
		3C54BE3BA0A8F0EAC256533F /* LeetCode3016Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3016Tests.swift; sourceTree = "<group>"; };
		3C78D8D57094DAEA635037FA /* BOJ14003Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ14003Tests.swift; sourceTree = "<group>"; };
		3CD8555921F21827E1CC1343 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift"; sourceTree = "<group>"; };
		3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "402. Remove K Digits.swift"; sourceTree = "<group>"; };
		3D9168D2C103CBC539C65675 /* 273. Integer to English Words.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "273. Integer to English Words.swift"; sourceTree = "<group>"; };
		3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11279. Max Heap.swift"; sourceTree = "<group>"; };
		3DBF36284A28956398B8EE8B /* LeetCode261Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode261Tests.swift; sourceTree = "<group>"; };
		3E37C3AFBC87CD15926F1EF9 /* LeetCode840Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode840Tests.swift; sourceTree = "<group>"; };
		3EB65F30FE618D08A8981288 /* 1653. Minimum Deletions to Make String Balanced.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1653. Minimum Deletions to Make String Balanced.swift"; sourceTree = "<group>"; };
		3F03A7122D8F7A0B9E037704 /* LeetCode624Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode624Tests.swift; sourceTree = "<group>"; };
		3F24BBE9F6B89C9896F5C85F /* 2597. The Number of Beautiful Subsets.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2597. The Number of Beautiful Subsets.swift"; sourceTree = "<group>"; };
		3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2441Tests.swift; sourceTree = "<group>"; };
		401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1. Two Sum.swift"; sourceTree = "<group>"; };
		403DED8A6D6AD9C14B34A093 /* LeetCode102Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode102Tests.swift; sourceTree = "<group>"; };
		408F049F0F5F858A572059B8 /* LeetCode338Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode338Tests.swift; sourceTree = "<group>"; };
		40E2804C9BE077F62A0E79C9 /* BOJ13460Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ13460Tests.swift; sourceTree = "<group>"; };
		40EFCEB7FF387928617BF575 /* BOJ13913Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ13913Tests.swift; sourceTree = "<group>"; };
		41D80CFA1FD6F126C6D4DAA0 /* 719. Find K-th Smallest Pair Distance.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "719. Find K-th Smallest Pair Distance.swift"; sourceTree = "<group>"; };
		42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2805. Cutting trees.swift"; sourceTree = "<group>"; };
		44033AA8EF8C4663094B4453 /* 1508. Range Sum of Sorted Subarray Sums.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1508. Range Sum of Sorted Subarray Sums.swift"; sourceTree = "<group>"; };
		46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "42883. Create a large number.swift"; sourceTree = "<group>"; };
		4716A32495EC64B78FF5CFE0 /* LeetCode344Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode344Tests.swift; sourceTree = "<group>"; };
		481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11404. Floyd.swift"; sourceTree = "<group>"; };
		4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "514. Freedom Trail.swift"; sourceTree = "<group>"; };
		4B6D18DDC573D0C2305A7B6D /* LeetCode39Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode39Tests.swift; sourceTree = "<group>"; };
		4B8FF454DF85343007930994 /* 261. Graph Valid Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "261. Graph Valid Tree.swift"; sourceTree = "<group>"; };
		4C807733A3090D6915F872C3 /* LeetCode2037Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2037Tests.swift; sourceTree = "<group>"; };
		4E8537BC0D529DCB72627793 /* LeetCode1653Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1653Tests.swift; sourceTree = "<group>"; };
		4F74E61F2D358946EBB27103 /* 143. Reorder List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "143. Reorder List.swift"; sourceTree = "<group>"; };
		50C8C2EAE957BB2ABBEBC368 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1460. Make Two Arrays Equal by Reversing Subarrays.swift"; sourceTree = "<group>"; };
		5191D2C41F069534495D26D5 /* 140. Word Break II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "140. Word Break II.swift"; sourceTree = "<group>"; };
		528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "786. K-th Smallest Prime Fraction.swift"; sourceTree = "<group>"; };
		53D2BF073B1B8C7D4E576FDD /* LeetCode140Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode140Tests.swift; sourceTree = "<group>"; };
		54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1325. Delete Leaves With a Given Value.swift"; sourceTree = "<group>"; };
		54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2103. Find All Groups of Farmland.swift"; sourceTree = "<group>"; };
		54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2487. Remove Nodes From Linked List.swift"; sourceTree = "<group>"; };
		54F03DB50102B766401C03CA /* 191. Number of 1 Bits.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "191. Number of 1 Bits.swift"; sourceTree = "<group>"; };
		5562FB082B2641E972B62076 /* 14003. Longest increasing partial sequence 5.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "14003. Longest increasing partial sequence 5.swift"; sourceTree = "<group>"; };
		56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2580. Sudoku.swift"; sourceTree = "<group>"; };
		56E868BC74EBDD083D26A31F /* 1863. Sum of All Subset XOR Totals.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1863. Sum of All Subset XOR Totals.swift"; sourceTree = "<group>"; };
		575CA81772FB1B117B60F5CB /* LeetCode647Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode647Tests.swift; sourceTree = "<group>"; };
		577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3197. The Lake of Swan.swift"; sourceTree = "<group>"; };
		57CFA802F890A54C54657935 /* LeetCode200Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode200Tests.swift; sourceTree = "<group>"; };
		57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2331. Evaluate Boolean Binary Tree.swift"; sourceTree = "<group>"; };
		5898B0DB91F3D979968E28A2 /* 648. Replace Words.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "648. Replace Words.swift"; sourceTree = "<group>"; };
		5A6A08D2C423782E1714358E /* LeetCode1143Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1143Tests.swift; sourceTree = "<group>"; };
		5AEEDD197EE72A018893EE7F /* LeetCode264Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode264Tests.swift; sourceTree = "<group>"; };
		5B3211227F238574D1AF208E /* 1707. Bipartite graphs.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1707. Bipartite graphs.swift"; sourceTree = "<group>"; };
		5B4DB0C2BB23FB4A2558D168 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "105. Construct Binary Tree from Preorder and Inorder Traversal.swift"; sourceTree = "<group>"; };
		5B5B79009E7B632FEB51635D /* LeetCode1636Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1636Tests.swift; sourceTree = "<group>"; };
		5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3075Tests.swift; sourceTree = "<group>"; };
		5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode20Tests.swift; sourceTree = "<group>"; };
		5CBCFD72692C5A53B99BA1E3 /* LeetCode273Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode273Tests.swift; sourceTree = "<group>"; };
		5CBE7CF09D186E7E3D05FF65 /* LeetCode131Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode131Tests.swift; sourceTree = "<group>"; };
		5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1806Tests.swift; sourceTree = "<group>"; };
		5F9D7ECD20BAD5C0C0812F7E /* 1380. Lucky Numbers in a Matrix.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1380. Lucky Numbers in a Matrix.swift"; sourceTree = "<group>"; };
		605D123ED8FEF7404B067158 /* LeetCode2053Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2053Tests.swift; sourceTree = "<group>"; };
		611E4F7A77ACC2B67BE6BCB6 /* LeetCode300Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode300Tests.swift; sourceTree = "<group>"; };
		61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "678. Valid Parenthesis String.swift"; sourceTree = "<group>"; };
		61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2293. Coin I.swift"; sourceTree = "<group>"; };
		628B9D43291111E8701BB0CF /* 75. Sort Colors.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "75. Sort Colors.swift"; sourceTree = "<group>"; };
		65A925FE8F0BE29AF639A623 /* LeetCode3Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3Tests.swift; sourceTree = "<group>"; };
		6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode506Tests.swift; sourceTree = "<group>"; };
		66B2ECA2900426DF23BA7F84 /* 238. Product of Array Except Self.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "238. Product of Array Except Self.swift"; sourceTree = "<group>"; };
		66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1030. Smallest String Starting From Leaf.swift"; sourceTree = "<group>"; };
		67B7200813542CF10A2234C5 /* LeetCode3152Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3152Tests.swift; sourceTree = "<group>"; };
		67FD3D3AA2866D1AB4AC8FD7 /* 2133. Fill Tiles.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2133. Fill Tiles.swift"; sourceTree = "<group>"; };
		689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "85. Maximal Rectangle.swift"; sourceTree = "<group>"; };
		68CABD9668265D4B727A6D97 /* LeetCode3110Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode3110Tests.swift; sourceTree = "<group>"; };
		69CA6D56360DD18FA518E847 /* 48. Rotate Image.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "48. Rotate Image.swift"; sourceTree = "<group>"; };
		6A33C56937039E913D28DD87 /* 1255. Maximum Score Words Formed by Letters.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1255. Maximum Score Words Formed by Letters.swift"; sourceTree = "<group>"; };
		6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1916. Finding the minimum cost.swift"; sourceTree = "<group>"; };
		6B8A41AA479FCC7C42C7EA8E /* BOJ14503Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ14503Tests.swift; sourceTree = "<group>"; };
		6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "53. Maximum Subarray.swift"; sourceTree = "<group>"; };
		6CB44E66115956092062B40F /* LeetCode719Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode719Tests.swift; sourceTree = "<group>"; };
		6D35327A21A3DF4B5F19201F /* LeetCode1404Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1404Tests.swift; sourceTree = "<group>"; };
		6D5B80796030C5D39D7C82DF /* 260. Single Number III.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "260. Single Number III.swift"; sourceTree = "<group>"; };
		6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode242Tests.swift; sourceTree = "<group>"; };
		705063D013249906171AC36F /* LeetCode2000Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2000Tests.swift; sourceTree = "<group>"; };
		705FD057866E96BBE190C66C /* LeetCode703Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode703Tests.swift; sourceTree = "<group>"; };
		72ED06140C6A510BAFB29D67 /* LeetCode846Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode846Tests.swift; sourceTree = "<group>"; };
		7326C94938323D8F6C1B755B /* 1208. Get Equal Substrings Within Budget.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1208. Get Equal Substrings Within Budget.swift"; sourceTree = "<group>"; };
		73599156B50C8D195AC3BE31 /* 152. Maximum Product Subarray.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "152. Maximum Product Subarray.swift"; sourceTree = "<group>"; };
		74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1219. Path with Maximum Gold.swift"; sourceTree = "<group>"; };
		74DADA5B240793D631B03452 /* 1927. Min Heap.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1927. Min Heap.swift"; sourceTree = "<group>"; };
		757659B4899D65BB002B18CF /* LeetCode125Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode125Tests.swift; sourceTree = "<group>"; };
		762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "165. Compare Version Numbers.swift"; sourceTree = "<group>"; };
		76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2252Tests.swift; sourceTree = "<group>"; };
		7751B3D59332952585B66641 /* LeetCode2816Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2816Tests.swift; sourceTree = "<group>"; };
		77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11404Tests.swift; sourceTree = "<group>"; };
		78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "84. Largest Rectangle in Histogram.swift"; sourceTree = "<group>"; };
		7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ3197Tests.swift; sourceTree = "<group>"; };
		7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2370Tests.swift; sourceTree = "<group>"; };
		7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode70Tests.swift; sourceTree = "<group>"; };
		7C9AE34AD4A0FB9104704904 /* LeetCode1208Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1208Tests.swift; sourceTree = "<group>"; };
		7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode141Tests.swift; sourceTree = "<group>"; };
		7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2121. Find if Path Exists in Graph.swift"; sourceTree = "<group>"; };
		7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode252Tests.swift; sourceTree = "<group>"; };
		7DC4C0423D56822B993EDE55 /* 14503. Robot vacuum cleaners.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "14503. Robot vacuum cleaners.swift"; sourceTree = "<group>"; };
		7F1B3178886B2D58AB8A39B2 /* 2294. Coins II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2294. Coins II.swift"; sourceTree = "<group>"; };
		7F5B0F2F8608BFB99EC437BF /* LeetCode552Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode552Tests.swift; sourceTree = "<group>"; };
		800BC34E5EC1F4D08B6D20B8 /* LeetCode79Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode79Tests.swift; sourceTree = "<group>"; };
		81C286E6922C7A567B292794 /* 647. Palindromic Substrings.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "647. Palindromic Substrings.swift"; sourceTree = "<group>"; };
		82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2110. Installing a router.swift"; sourceTree = "<group>"; };
		82D26493F07309BE090CDF14 /* 198. House Robber.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "198. House Robber.swift"; sourceTree = "<group>"; };
		82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode834Tests.swift; sourceTree = "<group>"; };
		82F66E62C6319A925D50BE23 /* LeetCode2597Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2597Tests.swift; sourceTree = "<group>"; };
		837C0064F1B04FF020088628 /* 200. Number of Islands.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "200. Number of Islands.swift"; sourceTree = "<group>"; };
		83E855E22BDFE029968EDB06 /* LeetCode323Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode323Tests.swift; sourceTree = "<group>"; };
		83F76A5DEBAE9FD81A6FDDB6 /* LeetCode40Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode40Tests.swift; sourceTree = "<group>"; };
		8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1Tests.swift; sourceTree = "<group>"; };
		87BF5E74C45E9D79FBA404AC /* LeetCode945Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode945Tests.swift; sourceTree = "<group>"; };
		8A23FE7A3877383D37A17187 /* 213. House Robber II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "213. House Robber II.swift"; sourceTree = "<group>"; };
		8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2997Tests.swift; sourceTree = "<group>"; };
		8BF46C0809B84C10359C2D06 /* 959. Regions Cut By Slashes.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "959. Regions Cut By Slashes.swift"; sourceTree = "<group>"; };
		8C4418373522F107E7B1E0AD /* LeetCode91Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode91Tests.swift; sourceTree = "<group>"; };
		8C54F4B78EF197DB28399266 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "235. Lowest Common Ancestor of a Binary Search Tree.swift"; sourceTree = "<group>"; };
		8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode979Tests.swift; sourceTree = "<group>"; };
		8DAA2BEF9C8C64A87FC1AB48 /* 1520. Downhill.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1520. Downhill.swift"; sourceTree = "<group>"; };
		8E0425866283B95D0634005E /* BOJ2212Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2212Tests.swift; sourceTree = "<group>"; };
		920C6595327CA4EE307CA4D6 /* LeetCode98Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode98Tests.swift; sourceTree = "<group>"; };
		93BFE3A1BB71B1A8DA734039 /* LeetCode959Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode959Tests.swift; sourceTree = "<group>"; };
		94BA011AC612F57B27FF0AFC /* 12100. 2048 (Easy).swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "12100. 2048 (Easy).swift"; sourceTree = "<group>"; };
		94BBF13BA1E7AF6A040E14D5 /* LeetCode57Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode57Tests.swift; sourceTree = "<group>"; };
		9512A1DEE40CB9A927B0CAF2 /* LeetCode1568Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1568Tests.swift; sourceTree = "<group>"; };
		9529500EC53BD87590C5280C /* BOJ14500Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ14500Tests.swift; sourceTree = "<group>"; };
		95E754B77DED66104FACA354 /* LeetCode514Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode514Tests.swift; sourceTree = "<group>"; };
		962E1810D5C11F26A87668A6 /* LeetCode190Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode190Tests.swift; sourceTree = "<group>"; };
		9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1894. 4th dot.swift"; sourceTree = "<group>"; };
		9837467B1F94759DA34DDE1B /* 2678. Number of Senior Citizens.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2678. Number of Senior Citizens.swift"; sourceTree = "<group>"; };
		98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ17298Tests.swift; sourceTree = "<group>"; };
		9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode572Tests.swift; sourceTree = "<group>"; };
		998B60C183B931DBD1B5A2A6 /* 2134. Minimum Swaps to Group All 1's Together II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2134. Minimum Swaps to Group All 1's Together II.swift"; sourceTree = "<group>"; };
		9A2FDCA6975113D6FFC07635 /* 128. Longest Consecutive Sequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "128. Longest Consecutive Sequence.swift"; sourceTree = "<group>"; };
		9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "237. Delete Node in a Linked List.swift"; sourceTree = "<group>"; };
		9BC1D0E2C1C929B11DC154CC /* 1051. Height Checker.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1051. Height Checker.swift"; sourceTree = "<group>"; };
		9C797F0C712A9F9EE4B794EB /* 6549. Largest rectangle in a histogram.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "6549. Largest rectangle in a histogram.swift"; sourceTree = "<group>"; };
		9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2812. Find the Safest Path in a Grid.swift"; sourceTree = "<group>"; };
		9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "17298. Right Larger Numbers.swift"; sourceTree = "<group>"; };
		9D8DAD73C77FF153C948E9A4 /* LeetCode1508Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1508Tests.swift; sourceTree = "<group>"; };
		9F5E2616AD70C38A674E3FCD /* 102. Binary Tree Level Order Traversal.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "102. Binary Tree Level Order Traversal.swift"; sourceTree = "<group>"; };
		A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode206Tests.swift; sourceTree = "<group>"; };
		A19C9B1DDD4030FBF59E0E0D /* LeetCode49Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode49Tests.swift; sourceTree = "<group>"; };
		A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "347. Top K Frequent Elements.swift"; sourceTree = "<group>"; };
		A2CBB85204750D6357CAF273 /* 16234. Population movement.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "16234. Population movement.swift"; sourceTree = "<group>"; };
		A30AE72E46F5BCE131E6D7DA /* LeetCode2486Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2486Tests.swift; sourceTree = "<group>"; };
		A31B4AD258491BD90B81ECDA /* 190. Reverse Bits.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "190. Reverse Bits.swift"; sourceTree = "<group>"; };
		A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1753. Shortest path.swift"; sourceTree = "<group>"; };
		A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "857. Minimum Cost to Hire K Workers.swift"; sourceTree = "<group>"; };
		A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2370. Longest Ideal Subsequence.swift"; sourceTree = "<group>"; };
		A4F0563DDF46E0944507D276 /* 703. Kth Largest Element in a Stream.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "703. Kth Largest Element in a Stream.swift"; sourceTree = "<group>"; };
		A65FE21D09028E5E78136460 /* 1717. Representation of Sets.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1717. Representation of Sets.swift"; sourceTree = "<group>"; };
		A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ15686Tests.swift; sourceTree = "<group>"; };
		A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "70. Climbing Stairs.swift"; sourceTree = "<group>"; };
		A9E256CE7BB2212C60C12682 /* 13549. Hide and Seek 3.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "13549. Hide and Seek 3.swift"; sourceTree = "<group>"; };
		AB2DAE2B02DADD306D57A5E8 /* 3016. Minimum Number of Pushes to Type Word II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3016. Minimum Number of Pushes to Type Word II.swift"; sourceTree = "<group>"; };
		AB83071F4F4E9CC58DA5DB9A /* 40. Combination Sum II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "40. Combination Sum II.swift"; sourceTree = "<group>"; };
		AD8F9CCC04865A322FFC4B91 /* LeetCode1255Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1255Tests.swift; sourceTree = "<group>"; };
		AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "979. Distribute Coins in Binary Tree.swift"; sourceTree = "<group>"; };
		AE765BAF14B396C029241FA7 /* BOJ1707Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1707Tests.swift; sourceTree = "<group>"; };
		AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode226Tests.swift; sourceTree = "<group>"; };
		AED45D82B80087856CD848F9 /* 624. Maximum Distance in Arrays.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "624. Maximum Distance in Arrays.swift"; sourceTree = "<group>"; };
		AF0ACC9E5DCDC0D0DB4F6608 /* 133. Clone Graph.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "133. Clone Graph.swift"; sourceTree = "<group>"; };
		AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3404. Minimum Number of Operations to Satisfy Conditions.swift"; sourceTree = "<group>"; };
		AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "100. Same Tree.swift"; sourceTree = "<group>"; };
		AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11286. Heap of absolute values.swift"; sourceTree = "<group>"; };
		B00E5C2520EA54267F653D55 /* LeetCode78Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode78Tests.swift; sourceTree = "<group>"; };
		B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2805Tests.swift; sourceTree = "<group>"; };
		B18F87D6073412EF5E69AE8B /* LeetCode409Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode409Tests.swift; sourceTree = "<group>"; };
		B1B1A1C3B4BF83A57875F1EB /* LeetCode128Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode128Tests.swift; sourceTree = "<group>"; };
		B1BBCA3C89348654E41C1A1B /* 19. Remove Nth Node From End of List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "19. Remove Nth Node From End of List.swift"; sourceTree = "<group>"; };
		B1EBC827B0DF25C1759CF409 /* LeetCode153Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode153Tests.swift; sourceTree = "<group>"; };
		B226D6181F521969A817995D /* 242. Valid Anagram.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "242. Valid Anagram.swift"; sourceTree = "<group>"; };
		B26AB5BD69487320B9E84D62 /* 650. 2 Keys Keyboard.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "650. 2 Keys Keyboard.swift"; sourceTree = "<group>"; };
		B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode857Tests.swift; sourceTree = "<group>"; };
		B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "15686. Chicken delivery.swift"; sourceTree = "<group>"; };
		B35F83E43937F3CC6ECF51CF /* 1002. Find Common Characters.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1002. Find Common Characters.swift"; sourceTree = "<group>"; };
		B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "21. Merge Two Sorted Lists.swift"; sourceTree = "<group>"; };
		B5B063D1B4E57DF37C4FB8B7 /* LeetCode211Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode211Tests.swift; sourceTree = "<group>"; };
		B60A132C2AC4611605971675 /* 860. Lemonade Change.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "860. Lemonade Change.swift"; sourceTree = "<group>"; };
		B63B6836080E7DE15C694D4F /* LeetCode1791Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1791Tests.swift; sourceTree = "<group>"; };
		B64A03F3D77B20C1725274E5 /* LeetCode1122Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1122Tests.swift; sourceTree = "<group>"; };
		B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2212. Sensors.swift"; sourceTree = "<group>"; };
		B727C17660224BF8CB787078 /* 1143. Longest Common Subsequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1143. Longest Common Subsequence.swift"; sourceTree = "<group>"; };
		B733190334E870B37B829C41 /* BOJ1717Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1717Tests.swift; sourceTree = "<group>"; };
		B7E66C2B2F0DBD48EEA3B179 /* 2486. Append Characters to String to Make Subsequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2486. Append Characters to String to Make Subsequence.swift"; sourceTree = "<group>"; };
		B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3405. Count the Number of Special Characters II.swift"; sourceTree = "<group>"; };
		B84820D654301CB08FA2B79F /* 211. Design Add and Search Words Data Structure.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "211. Design Add and Search Words Data Structure.swift"; sourceTree = "<group>"; };
		B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2252. Line up.swift"; sourceTree = "<group>"; };
		B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode4Tests.swift; sourceTree = "<group>"; };
		BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = AlgorithmTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ18231Tests.swift; sourceTree = "<group>"; };
		BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ18429Tests.swift; sourceTree = "<group>"; };
		BA20A37F2C0FF6930018FA19 /* LeetCode1002Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LeetCode1002Tests.swift; sourceTree = "<group>"; };
		BA26DABC2C2EDC4500333F2C /* Node.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Node.swift; sourceTree = "<group>"; };
		BA2DE3C92BF493F6003BC8FA /* Heap.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Heap.swift; sourceTree = "<group>"; };
		BA402F562B848BC600E86AAD /* Utils.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Utils.swift; sourceTree = "<group>"; };
		BA4B321A2C19C073008C16EC /* LeetCode235Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LeetCode235Tests.swift; sourceTree = "<group>"; };
		BA57C6262C06C9AF000B3EC8 /* Queue.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Queue.swift; sourceTree = "<group>"; };
		BA5F43E02BE61D2E000AE158 /* ListNode.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ListNode.swift; sourceTree = "<group>"; };
		BA688CB02BF094B900009F37 /* Interval.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Interval.swift; sourceTree = "<group>"; };
		BA87A3662C2D278E003987F7 /* Testing+Tags.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Testing+Tags.swift"; sourceTree = "<group>"; };
		BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "100294. Count the Number of Special Characters I.swift"; sourceTree = "<group>"; };
		BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "100291. Count the Number of Special Characters II.swift"; sourceTree = "<group>"; };
		BABD18672C03F71300EC6CD9 /* Deque.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Deque.swift; sourceTree = "<group>"; };
		BAC7C2122C2E91B100A89457 /* LeetCode2285Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LeetCode2285Tests.swift; sourceTree = "<group>"; };
		BACFFC4E2BFD806200FE308F /* ArrayComparison.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ArrayComparison.swift; sourceTree = "<group>"; };
		BAF443E32BCD1256007D25A6 /* TreeNode.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TreeNode.swift; sourceTree = "<group>"; };
		BAF746DB299B78D600182311 /* Algorithm */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Algorithm; sourceTree = BUILT_PRODUCTS_DIR; };
		BAF746DE299B78D600182311 /* main.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = main.swift; sourceTree = "<group>"; };
		BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2816. Double a Number Represented as a Linked List.swift"; sourceTree = "<group>"; };
		BD20332FA62B94C859F6A9CC /* LeetCode650Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode650Tests.swift; sourceTree = "<group>"; };
		BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "206. Reverse Linked List.swift"; sourceTree = "<group>"; };
		BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "20. Valid Parentheses.swift"; sourceTree = "<group>"; };
		BF4073042C61195D005C448A /* BOJ1005Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ1005Tests.swift; sourceTree = "<group>"; };
		BF4073052C61195D005C448A /* BOJ1238Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ1238Tests.swift; sourceTree = "<group>"; };
		BF4073062C61195D005C448A /* BOJ1504Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ1504Tests.swift; sourceTree = "<group>"; };
		BF4073072C61195D005C448A /* BOJ1520Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ1520Tests.swift; sourceTree = "<group>"; };
		BF40730D2C61195F005C448A /* BOJ1010Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BOJ1010Tests.swift; sourceTree = "<group>"; };
		BFC2054286B08183F0DF5E65 /* 2560. Straw Worm.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2560. Straw Worm.swift"; sourceTree = "<group>"; };
		C01F0668B41A7719EAC778E1 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift"; sourceTree = "<group>"; };
		C060A37358429B6DDFB0CB7C /* 912. Sort an Array.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "912. Sort an Array.swift"; sourceTree = "<group>"; };
		C1447C6746357C8606E299AF /* LeetCode207Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode207Tests.swift; sourceTree = "<group>"; };
		C1CB1F15B6FD1E554161B7DC /* LeetCode1105Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1105Tests.swift; sourceTree = "<group>"; };
		C2BA526013E53C8EA2A52E5F /* LeetCode417Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode417Tests.swift; sourceTree = "<group>"; };
		C2F4062EDADDE3736FE57362 /* 1568. Minimum Number of Days to Disconnect Island.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1568. Minimum Number of Days to Disconnect Island.swift"; sourceTree = "<group>"; };
		C4F27BD77A391BD30CD328C0 /* LeetCode55Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode55Tests.swift; sourceTree = "<group>"; };
		C595B9C6AD670D68DE3A1AA7 /* LeetCode885Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode885Tests.swift; sourceTree = "<group>"; };
		C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "104. Maximum Depth of Binary Tree.swift"; sourceTree = "<group>"; };
		C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2997. Minimum Number of Operations to Make Array XOR Equal to K.swift"; sourceTree = "<group>"; };
		C66492C2240F2B1E74FF3E1F /* BOJ12100Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ12100Tests.swift; sourceTree = "<group>"; };
		C6FAB1EBCDA9DBC6594BCA92 /* 2191. Sort the Jumbled Numbers.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2191. Sort the Jumbled Numbers.swift"; sourceTree = "<group>"; };
		C70DA0915E88152D9510FCDA /* 846. Hand of Straights.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "846. Hand of Straights.swift"; sourceTree = "<group>"; };
		C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "226. Invert Binary Tree.swift"; sourceTree = "<group>"; };
		C90B2CBB063E3BEC0033E99C /* BOJ16234Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ16234Tests.swift; sourceTree = "<group>"; };
		CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "42. Trapping Rain Water.swift"; sourceTree = "<group>"; };
		CAB6151291AEC2C119ADA2C5 /* 1636. Sort Array by Increasing Frequency.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1636. Sort Array by Increasing Frequency.swift"; sourceTree = "<group>"; };
		CABFBBF258400526DBC95D31 /* 2037. Minimum Number of Moves to Seat Everyone.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2037. Minimum Number of Moves to Seat Everyone.swift"; sourceTree = "<group>"; };
		CB07592C6B2E0CA872A2530C /* LeetCode1140Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1140Tests.swift; sourceTree = "<group>"; };
		CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1806. Partial sum.swift"; sourceTree = "<group>"; };
		CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode21Tests.swift; sourceTree = "<group>"; };
		CE4033177731BC55F7964469 /* 945. Minimum Increment to Make Array Unique.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "945. Minimum Increment to Make Array Unique.swift"; sourceTree = "<group>"; };
		CF8265795FE76682687EF63A /* LeetCode237Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode237Tests.swift; sourceTree = "<group>"; };
		D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1987Tests.swift; sourceTree = "<group>"; };
		D46B8D3CB69E3F110385AB66 /* LeetCode48Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode48Tests.swift; sourceTree = "<group>"; };
		D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "987. Reveal Cards In Increasing Order.swift"; sourceTree = "<group>"; };
		D6C97E8951C7850F66D2D803 /* LeetCode152Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode152Tests.swift; sourceTree = "<group>"; };
		D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2441. Largest Positive Integer That Exists With Its Negative.swift"; sourceTree = "<group>"; };
		D72ED8632461597C1A70A022 /* 57. Insert Interval.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "57. Insert Interval.swift"; sourceTree = "<group>"; };
		D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "506. Relative Ranks.swift"; sourceTree = "<group>"; };
		D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "834. Sum of Distances in Tree.swift"; sourceTree = "<group>"; };
		D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ16953Tests.swift; sourceTree = "<group>"; };
		D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "881. Boats to Save People.swift"; sourceTree = "<group>"; };
		D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3075. Maximize Happiness of Selected Children.swift"; sourceTree = "<group>"; };
		D985260268CB61BE8EE28947 /* 3110. Score of a String.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3110. Score of a String.swift"; sourceTree = "<group>"; };
		D9A55206D394A39ECA6BE58A /* LeetCode648Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode648Tests.swift; sourceTree = "<group>"; };
		DB1AF3E943D46EE5E30EEBDD /* 1608. Special Array With X Elements Greater Than or Equal X.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1608. Special Array With X Elements Greater Than or Equal X.swift"; sourceTree = "<group>"; };
		DB901B8C3045A363C4F608E0 /* LeetCode238Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode238Tests.swift; sourceTree = "<group>"; };
		DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode786Tests.swift; sourceTree = "<group>"; };
		DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2373Tests.swift; sourceTree = "<group>"; };
		DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode104Tests.swift; sourceTree = "<group>"; };
		DCFA261349D24273C2DADC36 /* 552. Student Attendance Record II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "552. Student Attendance Record II.swift"; sourceTree = "<group>"; };
		DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2373. Largest Local Values in a Matrix.swift"; sourceTree = "<group>"; };
		DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1289. Minimum Falling Path Sum II.swift"; sourceTree = "<group>"; };
		DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "18231. destroyed city.swift"; sourceTree = "<group>"; };
		DF90F3761B9DD9C20E29DC5A /* 1105. Filling Bookcase Shelves.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1105. Filling Bookcase Shelves.swift"; sourceTree = "<group>"; };
		DFFE09EB257815A523383087 /* LeetCode2191Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode2191Tests.swift; sourceTree = "<group>"; };
		E1DE329271560823383B7232 /* 322. Coin Change.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "322. Coin Change.swift"; sourceTree = "<group>"; };
		E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "861. Score After Flipping Matrix.swift"; sourceTree = "<group>"; };
		E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11286Tests.swift; sourceTree = "<group>"; };
		E3D462E86522659A9728E25F /* BOJ13549Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ13549Tests.swift; sourceTree = "<group>"; };
		E48B75F403E85C16E6FFD6FC /* 5. Longest Palindromic Substring.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "5. Longest Palindromic Substring.swift"; sourceTree = "<group>"; };
		E50DFF61D4BAF6BCB9B8C26C /* 11. Container With Most Water.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "11. Container With Most Water.swift"; sourceTree = "<group>"; };
		E566A3A23893399B98AD5D49 /* 208. Implement Trie (Prefix Tree).swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "208. Implement Trie (Prefix Tree).swift"; sourceTree = "<group>"; };
		E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode165Tests.swift; sourceTree = "<group>"; };
		E7308589A15B778AF4913CCF /* LeetCode133Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode133Tests.swift; sourceTree = "<group>"; };
		E7D9386DC2DEEEBDAAD77738 /* 268. Missing Number.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "268. Missing Number.swift"; sourceTree = "<group>"; };
		E89329E2FAEA9C45C7F5183F /* 323. Number of Connected Components in an Undirected Graph.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "323. Number of Connected Components in an Undirected Graph.swift"; sourceTree = "<group>"; };
		EA0A2B3410312D7B5AB8A9E7 /* 1137. N-th Tribonacci Number.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1137. N-th Tribonacci Number.swift"; sourceTree = "<group>"; };
		EB4A5DAC3EB88568598C35D0 /* LeetCode860Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode860Tests.swift; sourceTree = "<group>"; };
		EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "310. Minimum Height Trees.swift"; sourceTree = "<group>"; };
		EC1169CEE9DA0A6A7AAA37E9 /* LeetCode53Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode53Tests.swift; sourceTree = "<group>"; };
		EC8D5EF6E93E9716401AF54B /* LeetCode19Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode19Tests.swift; sourceTree = "<group>"; };
		ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode217Tests.swift; sourceTree = "<group>"; };
		ED3B77C8F6A46FE46E29B41A /* 230. Kth Smallest Element in a BST.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "230. Kth Smallest Element in a BST.swift"; sourceTree = "<group>"; };
		ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "4. Median of Two Sorted Arrays.swift"; sourceTree = "<group>"; };
		ED7A057DE8FF69532245A94B /* 300. Longest Increasing Subsequence.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "300. Longest Increasing Subsequence.swift"; sourceTree = "<group>"; };
		EFE61072C752C9C0CF6C9432 /* 885. Spiral Matrix III.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "885. Spiral Matrix III.swift"; sourceTree = "<group>"; };
		F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1915Tests.swift; sourceTree = "<group>"; };
		F0B66AACFD31F859C28E0D92 /* 3. Longest Substring Without Repeating Characters.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3. Longest Substring Without Repeating Characters.swift"; sourceTree = "<group>"; };
		F231AD0651B83C1377D52E42 /* 417. Pacific Atlantic Water Flow.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "417. Pacific Atlantic Water Flow.swift"; sourceTree = "<group>"; };
		F234B2CEEBA52CBE87B93E15 /* LeetCode139Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode139Tests.swift; sourceTree = "<group>"; };
		F2A3DBC2A3CD0DAEDE815491 /* 13913. Hide and Seek 4.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "13913. Hide and Seek 4.swift"; sourceTree = "<group>"; };
		F2E93604457F0E7B112ED4F6 /* LeetCode1608Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1608Tests.swift; sourceTree = "<group>"; };
		F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ3015Tests.swift; sourceTree = "<group>"; };
		F344BA11AF8E9898A982C02C /* 1504. Specific shortest paths.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "1504. Specific shortest paths.swift"; sourceTree = "<group>"; };
		F3E32DE4062D683AD5EE6B5C /* LeetCode1863Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1863Tests.swift; sourceTree = "<group>"; };
		F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode100Tests.swift; sourceTree = "<group>"; };
		F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11279Tests.swift; sourceTree = "<group>"; };
		F438571965CEE96F3D2641ED /* BOJ2560Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2560Tests.swift; sourceTree = "<group>"; };
		F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "753. Open the Lock.swift"; sourceTree = "<group>"; };
		F4E840B847D5627E59F441F4 /* 344. Reverse String.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "344. Reverse String.swift"; sourceTree = "<group>"; };
		F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "3015. Reunite Oasis.swift"; sourceTree = "<group>"; };
		F7D5696D1EEC5A5811D69DB9 /* LeetCode912Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode912Tests.swift; sourceTree = "<group>"; };
		F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2580Tests.swift; sourceTree = "<group>"; };
		F839A0E3111DC17874F78CE3 /* LeetCode11Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode11Tests.swift; sourceTree = "<group>"; };
		F9198265807055A6A8004BAD /* LeetCode322Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode322Tests.swift; sourceTree = "<group>"; };
		FA8AD8DA072BE2CB795DF32E /* 91. Decode Ways.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "91. Decode Ways.swift"; sourceTree = "<group>"; };
		FB3F89CA91CCE8B6365B5D68 /* 33. Search in Rotated Sorted Array.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "33. Search in Rotated Sorted Array.swift"; sourceTree = "<group>"; };
		FCD62B991690A11A7495455C /* LeetCode1380Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode1380Tests.swift; sourceTree = "<group>"; };
		FD026386AD38656464754565 /* 2045. Second Minimum Time to Reach Destination.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "2045. Second Minimum Time to Reach Destination.swift"; sourceTree = "<group>"; };
		FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ1927Tests.swift; sourceTree = "<group>"; };
		FD7D90025D344943654E4E1F /* BOJ11054Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ11054Tests.swift; sourceTree = "<group>"; };
		FE5587DC5C16E820676BF562 /* 523. Continuous Subarray Sum.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "523. Continuous Subarray Sum.swift"; sourceTree = "<group>"; };
		FF67F682D7A12A8AE2B289AA /* LeetCode15Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = LeetCode15Tests.swift; sourceTree = "<group>"; };
		FF78E40017CA340D7AAE1EA6 /* 264. Ugly Number II.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "264. Ugly Number II.swift"; sourceTree = "<group>"; };
		FF906A8CC3BD3BE9E6A38A01 /* BOJ2133Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = BOJ2133Tests.swift; sourceTree = "<group>"; };
		FFB993A5EF974AF8A2057A3E /* 153. Find Minimum in Rotated Sorted Array.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = "153. Find Minimum in Rotated Sorted Array.swift"; sourceTree = "<group>"; };
		FFF875604994B6472CAD9637 /* Programmers258709Tests.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; path = Programmers258709Tests.swift; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		BA1BB8822BD75C9800CA174B /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		BAF746D8299B78D600182311 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		BA03EE6C2BD0BDA900F1DF61 /* BOJ */ = {
			isa = PBXGroup;
			children = (
				BA03EE6E2BD0BDCF00F1DF61 /* Bronze */,
				BA03EE6F2BD0BDD300F1DF61 /* Silver */,
				BA03EE6D2BD0BDB100F1DF61 /* Gold */,
				BA03EE702BD0BDDA00F1DF61 /* Platinum */,
				BA03EE712BD0BDE000F1DF61 /* Diamond */,
				BA03EE722BD0BDE300F1DF61 /* Unknown */,
			);
			path = BOJ;
			sourceTree = "<group>";
		};
		BA03EE6D2BD0BDB100F1DF61 /* Gold */ = {
			isa = PBXGroup;
			children = (
				3629B8E93D8A6CEA5CF1EA8B /* 1005. ACM Craft.swift */,
				32769F20766FEEC70896B8F0 /* 1238. Parties.swift */,
				F344BA11AF8E9898A982C02C /* 1504. Specific shortest paths.swift */,
				8DAA2BEF9C8C64A87FC1AB48 /* 1520. Downhill.swift */,
				5B3211227F238574D1AF208E /* 1707. Bipartite graphs.swift */,
				A65FE21D09028E5E78136460 /* 1717. Representation of Sets.swift */,
				A38910F8887B846CC20FB3DF /* 1753. Shortest path.swift */,
				2B1177A4EC4AE5AD874BF77F /* 1759. Create a password.swift */,
				CC86E8C20D73FF121631CA8A /* 1806. Partial sum.swift */,
				6A4F8A8FF238D33C140B41A9 /* 1916. Finding the minimum cost.swift */,
				122859837263588F523ABD9A /* 1987. Alphabet.swift */,
				82960BC39F0459586BDA0FA7 /* 2110. Installing a router.swift */,
				67FD3D3AA2866D1AB4AC8FD7 /* 2133. Fill Tiles.swift */,
				B6F4FDDF3609F7838701244F /* 2212. Sensors.swift */,
				B8FC06B7489280A4132DEFD8 /* 2252. Line up.swift */,
				61E651D86C65D4AD957AD107 /* 2293. Coin I.swift */,
				7F1B3178886B2D58AB8A39B2 /* 2294. Coins II.swift */,
				BFC2054286B08183F0DF5E65 /* 2560. Straw Worm.swift */,
				56BEBFF0AA74E88C6C4DE1B7 /* 2580. Sudoku.swift */,
				294EF7DF806D781B692BB270 /* 9935. string explosion.swift */,
				1BD96A68B432584E37757B6A /* 10775. Airport.swift */,
				3ABB3C103BC7B140AC8C602B /* 11054. Longest Sequence of Vitonic Parts.swift */,
				481F5A81F0BC23E082090BAA /* 11404. Floyd.swift */,
				94BA011AC612F57B27FF0AFC /* 12100. 2048 (Easy).swift */,
				35EFB0F59250B929B7EA9D71 /* 13460. Marbles Escape 2.swift */,
				A9E256CE7BB2212C60C12682 /* 13549. Hide and Seek 3.swift */,
				F2A3DBC2A3CD0DAEDE815491 /* 13913. Hide and Seek 4.swift */,
				12AFE589B88D6D629D074AB3 /* 14500. Tetromino.swift */,
				7DC4C0423D56822B993EDE55 /* 14503. Robot vacuum cleaners.swift */,
				B3513568721D7265CA779893 /* 15686. Chicken delivery.swift */,
				A2CBB85204750D6357CAF273 /* 16234. Population movement.swift */,
				9CA40A6D6DFE07127610B7AD /* 17298. Right Larger Numbers.swift */,
				DF8470AEED1F0AFF2A37007B /* 18231. destroyed city.swift */,
				0B6154F0EB89616D7B975570 /* 20366. Do you want to build a snowman?.swift */,
			);
			path = Gold;
			sourceTree = "<group>";
		};
		BA03EE6E2BD0BDCF00F1DF61 /* Bronze */ = {
			isa = PBXGroup;
			children = (
				9654BDFD6554D5245BBFAB72 /* 1894. 4th dot.swift */,
			);
			path = Bronze;
			sourceTree = "<group>";
		};
		BA03EE6F2BD0BDD300F1DF61 /* Silver */ = {
			isa = PBXGroup;
			children = (
				157712F738600FFC186461AB /* 1010. Laying bridges.swift */,
				17584F85B15167F0281E936C /* 1912. Continuous sum.swift */,
				74DADA5B240793D631B03452 /* 1927. Min Heap.swift */,
				42E1992B902D7E9702913D47 /* 2805. Cutting trees.swift */,
				17D78E8D5FB97DD85B8931E8 /* 10844. number of easy stairs.swift */,
				3DA4355CF2E7964954EB5340 /* 11279. Max Heap.swift */,
				AFBF44397ABA3BCF3D536FCF /* 11286. Heap of absolute values.swift */,
				25D9D3EC37E9944A29D71964 /* 16953. A → B.swift */,
				1ADBFD6BF01FE312E0328489 /* 18429. root loss.swift */,
			);
			path = Silver;
			sourceTree = "<group>";
		};
		BA03EE702BD0BDDA00F1DF61 /* Platinum */ = {
			isa = PBXGroup;
			children = (
				F547FFA100039B8D4F9AE1A2 /* 3015. Reunite Oasis.swift */,
				2EC3121C728E9655DC400056 /* 3111. Censorship.swift */,
				577F723C7E258341B8DA8645 /* 3197. The Lake of Swan.swift */,
				5562FB082B2641E972B62076 /* 14003. Longest increasing partial sequence 5.swift */,
				9C797F0C712A9F9EE4B794EB /* 6549. Largest rectangle in a histogram.swift */,
			);
			path = Platinum;
			sourceTree = "<group>";
		};
		BA03EE712BD0BDE000F1DF61 /* Diamond */ = {
			isa = PBXGroup;
			children = (
			);
			path = Diamond;
			sourceTree = "<group>";
		};
		BA03EE722BD0BDE300F1DF61 /* Unknown */ = {
			isa = PBXGroup;
			children = (
			);
			path = Unknown;
			sourceTree = "<group>";
		};
		BA1BB8862BD75C9800CA174B /* AlgorithmTests */ = {
			isa = PBXGroup;
			children = (
				BACFFC4D2BFD805600FE308F /* Utils */,
				BA1BB88C2BD75CDC00CA174B /* BOJ */,
				BA1BB88D2BD75CDF00CA174B /* LeetCode */,
				BA1BB88E2BD75CE400CA174B /* Programmers */,
			);
			path = AlgorithmTests;
			sourceTree = "<group>";
		};
		BA1BB88C2BD75CDC00CA174B /* BOJ */ = {
			isa = PBXGroup;
			children = (
				BF4073122C611D3D005C448A /* Bronze */,
				BF40730E2C61195F005C448A /* Silver */,
				BF4073082C61195D005C448A /* Gold */,
				BF4073032C61195A005C448A /* Platinum */,
			);
			path = BOJ;
			sourceTree = "<group>";
		};
		BA1BB88D2BD75CDF00CA174B /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				BA560A172C16BF63005F3DB7 /* Hard */,
				BA7127E02C115FEA0028A48E /* Medium */,
				BA20A37E2C0FF67B0018FA19 /* Easy */,
				25AB357FBD8795BBD497A4FC /* LeetCode1325Tests.swift */,
				6D35327A21A3DF4B5F19201F /* LeetCode1404Tests.swift */,
				21A2B0065BC745B81E3D0C3C /* LeetCode1442Tests.swift */,
				F2E93604457F0E7B112ED4F6 /* LeetCode1608Tests.swift */,
				F3E32DE4062D683AD5EE6B5C /* LeetCode1863Tests.swift */,
				F0859ED575E0C28AA90DBFF2 /* LeetCode1915Tests.swift */,
				705063D013249906171AC36F /* LeetCode2000Tests.swift */,
				155ACD12A8FE9FD20B545FC7 /* LeetCode2331Tests.swift */,
				7C1FA8C7552D8770B7B523B7 /* LeetCode2370Tests.swift */,
				DC07A2321A28D670F30FDB07 /* LeetCode2373Tests.swift */,
				3F401BE5947BD76732FF4E56 /* LeetCode2441Tests.swift */,
				A30AE72E46F5BCE131E6D7DA /* LeetCode2486Tests.swift */,
				22E3942C765BFAFC86A35616 /* LeetCode2487Tests.swift */,
				82F66E62C6319A925D50BE23 /* LeetCode2597Tests.swift */,
				23E91A8C4670B0E70995A6A6 /* LeetCode2812Tests.swift */,
				7751B3D59332952585B66641 /* LeetCode2816Tests.swift */,
				8BD56FC85E69265FC58F6317 /* LeetCode2997Tests.swift */,
				23E920E2FDD503875CDCDACD /* LeetCode3068Tests.swift */,
				5BD12E2682F48E315A7CD1C2 /* LeetCode3075Tests.swift */,
				68CABD9668265D4B727A6D97 /* LeetCode3110Tests.swift */,
				67B7200813542CF10A2234C5 /* LeetCode3152Tests.swift */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA1BB88E2BD75CE400CA174B /* Programmers */ = {
			isa = PBXGroup;
			children = (
				FFF875604994B6472CAD9637 /* Programmers258709Tests.swift */,
			);
			path = Programmers;
			sourceTree = "<group>";
		};
		BA20A37E2C0FF67B0018FA19 /* Easy */ = {
			isa = PBXGroup;
			children = (
				8784D7009EDBBB8EA1134978 /* LeetCode1Tests.swift */,
				5BF3DC8E73D00FE03B5E51F7 /* LeetCode20Tests.swift */,
				CCC3D26754D7DEA7563FA858 /* LeetCode21Tests.swift */,
				7C5D919DC8C04DDB9B25B48D /* LeetCode70Tests.swift */,
				F4080FDE3168F5FE2F89131B /* LeetCode100Tests.swift */,
				DC3C93A2B422600D1B326813 /* LeetCode104Tests.swift */,
				02675C8C1A774912BE4B1B2B /* LeetCode121Tests.swift */,
				757659B4899D65BB002B18CF /* LeetCode125Tests.swift */,
				7D287623F0A62B85E02F4D05 /* LeetCode141Tests.swift */,
				962E1810D5C11F26A87668A6 /* LeetCode190Tests.swift */,
				15DCA0BFB3EB783A412C5D66 /* LeetCode191Tests.swift */,
				A0EE7C29B8BC41A11489EA46 /* LeetCode206Tests.swift */,
				ECEB003F406B5E78BDE4A2A4 /* LeetCode217Tests.swift */,
				AEAC63455092B7CADE8BC1D3 /* LeetCode226Tests.swift */,
				6F80FBEC8C4A49D3B694CBDF /* LeetCode242Tests.swift */,
				7DC1DE7592B6CDCA00FB7EF0 /* LeetCode252Tests.swift */,
				051F0B15589E4568FE2E7E64 /* LeetCode268Tests.swift */,
				408F049F0F5F858A572059B8 /* LeetCode338Tests.swift */,
				4716A32495EC64B78FF5CFE0 /* LeetCode344Tests.swift */,
				B18F87D6073412EF5E69AE8B /* LeetCode409Tests.swift */,
				6675D2B6E805D98D70F92C30 /* LeetCode506Tests.swift */,
				9939BA1CD352A285D9630ADD /* LeetCode572Tests.swift */,
				705FD057866E96BBE190C66C /* LeetCode703Tests.swift */,
				EB4A5DAC3EB88568598C35D0 /* LeetCode860Tests.swift */,
				BA20A37F2C0FF6930018FA19 /* LeetCode1002Tests.swift */,
				2061C10294307EE82DF59245 /* LeetCode1051Tests.swift */,
				B64A03F3D77B20C1725274E5 /* LeetCode1122Tests.swift */,
				2FEBCA0B65FDEEBA0DF66309 /* LeetCode1137Tests.swift */,
				FCD62B991690A11A7495455C /* LeetCode1380Tests.swift */,
				32AD3D935CBD537401088FEF /* LeetCode1460Tests.swift */,
				5B5B79009E7B632FEB51635D /* LeetCode1636Tests.swift */,
				B63B6836080E7DE15C694D4F /* LeetCode1791Tests.swift */,
				4C807733A3090D6915F872C3 /* LeetCode2037Tests.swift */,
				605D123ED8FEF7404B067158 /* LeetCode2053Tests.swift */,
				1E214FCD72899F7498E54170 /* LeetCode2678Tests.swift */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		BA30930E299F851800FCD5F3 /* Base */ = {
			isa = PBXGroup;
			children = (
				BA688CAF2BF094AB00009F37 /* LeetCode */,
				BA402F562B848BC600E86AAD /* Utils.swift */,
				BA2DE3C92BF493F6003BC8FA /* Heap.swift */,
				BABD18672C03F71300EC6CD9 /* Deque.swift */,
				BA57C6262C06C9AF000B3EC8 /* Queue.swift */,
			);
			path = Base;
			sourceTree = "<group>";
		};
		BA560A172C16BF63005F3DB7 /* Hard */ = {
			isa = PBXGroup;
			children = (
				B9F7AF8067DBDA8FB2A7C63A /* LeetCode4Tests.swift */,
				53D2BF073B1B8C7D4E576FDD /* LeetCode140Tests.swift */,
				5CBCFD72692C5A53B99BA1E3 /* LeetCode273Tests.swift */,
				95E754B77DED66104FACA354 /* LeetCode514Tests.swift */,
				7F5B0F2F8608BFB99EC437BF /* LeetCode552Tests.swift */,
				6CB44E66115956092062B40F /* LeetCode719Tests.swift */,
				82D69CA0894C6FD6FE7966D7 /* LeetCode834Tests.swift */,
				B3279F868B4CE33D52B301B2 /* LeetCode857Tests.swift */,
				AD8F9CCC04865A322FFC4B91 /* LeetCode1255Tests.swift */,
				2366F5DE74AF4F048447835D /* LeetCode1289Tests.swift */,
				9512A1DEE40CB9A927B0CAF2 /* LeetCode1568Tests.swift */,
				1678102D7A95C13B1F272C94 /* LeetCode2045Tests.swift */,
			);
			path = Hard;
			sourceTree = "<group>";
		};
		BA688CAF2BF094AB00009F37 /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				BAF443E32BCD1256007D25A6 /* TreeNode.swift */,
				BA5F43E02BE61D2E000AE158 /* ListNode.swift */,
				BA688CB02BF094B900009F37 /* Interval.swift */,
				BA26DABC2C2EDC4500333F2C /* Node.swift */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA6B50192BCA35AE00B1715B /* LeetCode */ = {
			isa = PBXGroup;
			children = (
				BACABE092BCD0551005A197C /* Easy */,
				BACABE0A2BCD0555005A197C /* Medium */,
				BACABE0B2BCD0565005A197C /* Hard */,
				BA9BA9642BD4B2820060047E /* weekly-contest-394 */,
			);
			path = LeetCode;
			sourceTree = "<group>";
		};
		BA7127E02C115FEA0028A48E /* Medium */ = {
			isa = PBXGroup;
			children = (
				65A925FE8F0BE29AF639A623 /* LeetCode3Tests.swift */,
				38C0CEE1D40BA1DE8BCD26E0 /* LeetCode5Tests.swift */,
				F839A0E3111DC17874F78CE3 /* LeetCode11Tests.swift */,
				FF67F682D7A12A8AE2B289AA /* LeetCode15Tests.swift */,
				EC8D5EF6E93E9716401AF54B /* LeetCode19Tests.swift */,
				3063EFA2907FE0E7DE7FF431 /* LeetCode33Tests.swift */,
				4B6D18DDC573D0C2305A7B6D /* LeetCode39Tests.swift */,
				83F76A5DEBAE9FD81A6FDDB6 /* LeetCode40Tests.swift */,
				D46B8D3CB69E3F110385AB66 /* LeetCode48Tests.swift */,
				A19C9B1DDD4030FBF59E0E0D /* LeetCode49Tests.swift */,
				EC1169CEE9DA0A6A7AAA37E9 /* LeetCode53Tests.swift */,
				C4F27BD77A391BD30CD328C0 /* LeetCode55Tests.swift */,
				94BBF13BA1E7AF6A040E14D5 /* LeetCode57Tests.swift */,
				20C68D3AB2CDD489E79E1FBB /* LeetCode62Tests.swift */,
				3C36C580B042F6AEBAD7C3C7 /* LeetCode75Tests.swift */,
				B00E5C2520EA54267F653D55 /* LeetCode78Tests.swift */,
				800BC34E5EC1F4D08B6D20B8 /* LeetCode79Tests.swift */,
				8C4418373522F107E7B1E0AD /* LeetCode91Tests.swift */,
				920C6595327CA4EE307CA4D6 /* LeetCode98Tests.swift */,
				403DED8A6D6AD9C14B34A093 /* LeetCode102Tests.swift */,
				3B69F9B8D2F140EBE6C631AF /* LeetCode105Tests.swift */,
				B1B1A1C3B4BF83A57875F1EB /* LeetCode128Tests.swift */,
				5CBE7CF09D186E7E3D05FF65 /* LeetCode131Tests.swift */,
				E7308589A15B778AF4913CCF /* LeetCode133Tests.swift */,
				F234B2CEEBA52CBE87B93E15 /* LeetCode139Tests.swift */,
				09735B98B3D9525DF71E496D /* LeetCode143Tests.swift */,
				D6C97E8951C7850F66D2D803 /* LeetCode152Tests.swift */,
				B1EBC827B0DF25C1759CF409 /* LeetCode153Tests.swift */,
				E597ED2DD3226A1D40D826B8 /* LeetCode165Tests.swift */,
				35EA9BE89FBB7750C4AA24B4 /* LeetCode198Tests.swift */,
				57CFA802F890A54C54657935 /* LeetCode200Tests.swift */,
				C1447C6746357C8606E299AF /* LeetCode207Tests.swift */,
				0EB89B681AC593F2C19E2CB8 /* LeetCode208Tests.swift */,
				B5B063D1B4E57DF37C4FB8B7 /* LeetCode211Tests.swift */,
				236A06220556F5E054C84D29 /* LeetCode213Tests.swift */,
				27810901CF9AC90B5D768927 /* LeetCode230Tests.swift */,
				BA4B321A2C19C073008C16EC /* LeetCode235Tests.swift */,
				CF8265795FE76682687EF63A /* LeetCode237Tests.swift */,
				DB901B8C3045A363C4F608E0 /* LeetCode238Tests.swift */,
				0CDFE9DD3C635B0BEDF7CAE9 /* LeetCode260Tests.swift */,
				3DBF36284A28956398B8EE8B /* LeetCode261Tests.swift */,
				5AEEDD197EE72A018893EE7F /* LeetCode264Tests.swift */,
				611E4F7A77ACC2B67BE6BCB6 /* LeetCode300Tests.swift */,
				F9198265807055A6A8004BAD /* LeetCode322Tests.swift */,
				83E855E22BDFE029968EDB06 /* LeetCode323Tests.swift */,
				04C37740809FE4ED0C88966A /* LeetCode347Tests.swift */,
				C2BA526013E53C8EA2A52E5F /* LeetCode417Tests.swift */,
				3190CEC2485F656A19458675 /* LeetCode424Tests.swift */,
				16705E21EBC8C823E23AF516 /* LeetCode523Tests.swift */,
				3F03A7122D8F7A0B9E037704 /* LeetCode624Tests.swift */,
				575CA81772FB1B117B60F5CB /* LeetCode647Tests.swift */,
				D9A55206D394A39ECA6BE58A /* LeetCode648Tests.swift */,
				BD20332FA62B94C859F6A9CC /* LeetCode650Tests.swift */,
				DB98A46DAB416086AA87BE5C /* LeetCode786Tests.swift */,
				3E37C3AFBC87CD15926F1EF9 /* LeetCode840Tests.swift */,
				72ED06140C6A510BAFB29D67 /* LeetCode846Tests.swift */,
				3393B15FFEF0FA1E4E889E89 /* LeetCode861Tests.swift */,
				18FCCC5EBC6B14CB4D04E19B /* LeetCode881Tests.swift */,
				C595B9C6AD670D68DE3A1AA7 /* LeetCode885Tests.swift */,
				F7D5696D1EEC5A5811D69DB9 /* LeetCode912Tests.swift */,
				87BF5E74C45E9D79FBA404AC /* LeetCode945Tests.swift */,
				93BFE3A1BB71B1A8DA734039 /* LeetCode959Tests.swift */,
				8C7E64B68DF4A72665C46ED8 /* LeetCode979Tests.swift */,
				C1CB1F15B6FD1E554161B7DC /* LeetCode1105Tests.swift */,
				CB07592C6B2E0CA872A2530C /* LeetCode1140Tests.swift */,
				5A6A08D2C423782E1714358E /* LeetCode1143Tests.swift */,
				7C9AE34AD4A0FB9104704904 /* LeetCode1208Tests.swift */,
				097C4A87C863F48B6CE855E8 /* LeetCode1219Tests.swift */,
				0AA0BBC3FD23D5580A8C028D /* LeetCode1334Tests.swift */,
				9D8DAD73C77FF153C948E9A4 /* LeetCode1508Tests.swift */,
				4E8537BC0D529DCB72627793 /* LeetCode1653Tests.swift */,
				31B0787BAFD13EF3D7CF59A2 /* LeetCode1937Tests.swift */,
				09F9F335D4104A2713528534 /* LeetCode2134Tests.swift */,
				DFFE09EB257815A523383087 /* LeetCode2191Tests.swift */,
				BAC7C2122C2E91B100A89457 /* LeetCode2285Tests.swift */,
				15D530FF819EAC903D8602A1 /* LeetCode2976Tests.swift */,
				3C54BE3BA0A8F0EAC256533F /* LeetCode3016Tests.swift */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		BA9BA9642BD4B2820060047E /* weekly-contest-394 */ = {
			isa = PBXGroup;
			children = (
				BA9BA9672BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift */,
				BA9BA9652BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift */,
			);
			path = "weekly-contest-394";
			sourceTree = "<group>";
		};
		BACABE092BCD0551005A197C /* Easy */ = {
			isa = PBXGroup;
			children = (
				401F91F5488CA9C6DBCA1C51 /* 1. Two Sum.swift */,
				BEBB2A9785CDCC37CA437705 /* 20. Valid Parentheses.swift */,
				B4DE1A49B2D41F136145257B /* 21. Merge Two Sorted Lists.swift */,
				A89B4A0FE3A3284695BE2F0D /* 70. Climbing Stairs.swift */,
				AF8C4DECC07106ABC9E50C69 /* 100. Same Tree.swift */,
				C5BF9363AAAC650FF0B4316B /* 104. Maximum Depth of Binary Tree.swift */,
				361C44D5034B31F591112626 /* 121. Best Time to Buy and Sell Stock.swift */,
				04BD461AA03CE1540F9C579B /* 125. Valid Palindrome.swift */,
				22DCACC4A2219E858E855786 /* 141. Linked List Cycle.swift */,
				A31B4AD258491BD90B81ECDA /* 190. Reverse Bits.swift */,
				54F03DB50102B766401C03CA /* 191. Number of 1 Bits.swift */,
				BD471E88F348763DE06068C3 /* 206. Reverse Linked List.swift */,
				122732CAE39B4149F5A7DFB8 /* 217. Contains Duplicate.swift */,
				C7D1561A456343A9A05F2640 /* 226. Invert Binary Tree.swift */,
				B226D6181F521969A817995D /* 242. Valid Anagram.swift */,
				11A63476DA71559DF695B251 /* 252. Meeting Rooms.swift */,
				E7D9386DC2DEEEBDAAD77738 /* 268. Missing Number.swift */,
				2BA523F29A5BF8B4ACBD38EB /* 338. Counting Bits.swift */,
				F4E840B847D5627E59F441F4 /* 344. Reverse String.swift */,
				32B9DB7949B9045A3941FC9E /* 409. Longest Palindrome.swift */,
				1C6D17030B33B2F80C201899 /* 463. Island Perimeter.swift */,
				D790C325B6C4C9C14DECCB68 /* 506. Relative Ranks.swift */,
				0DA18743E6D6CA065EE10028 /* 572. Subtree of Another Tree.swift */,
				A4F0563DDF46E0944507D276 /* 703. Kth Largest Element in a Stream.swift */,
				B60A132C2AC4611605971675 /* 860. Lemonade Change.swift */,
				B35F83E43937F3CC6ECF51CF /* 1002. Find Common Characters.swift */,
				9BC1D0E2C1C929B11DC154CC /* 1051. Height Checker.swift */,
				120E9F5DF4AFE78D1EBE7916 /* 1122. Relative Sort Array.swift */,
				EA0A2B3410312D7B5AB8A9E7 /* 1137. N-th Tribonacci Number.swift */,
				5F9D7ECD20BAD5C0C0812F7E /* 1380. Lucky Numbers in a Matrix.swift */,
				50C8C2EAE957BB2ABBEBC368 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift */,
				DB1AF3E943D46EE5E30EEBDD /* 1608. Special Array With X Elements Greater Than or Equal X.swift */,
				CAB6151291AEC2C119ADA2C5 /* 1636. Sort Array by Increasing Frequency.swift */,
				386D2F30007CA37E573A145B /* 1791. Find Center of Star Graph.swift */,
				56E868BC74EBDD083D26A31F /* 1863. Sum of All Subset XOR Totals.swift */,
				0B548A871AE27071B6CD7C2A /* 2000. Reverse Prefix of Word.swift */,
				CABFBBF258400526DBC95D31 /* 2037. Minimum Number of Moves to Seat Everyone.swift */,
				01A3811855EDD6CBFDF80EDC /* 2053. Kth Distinct String in an Array.swift */,
				7D9104D29006D3512ADA472E /* 2121. Find if Path Exists in Graph.swift */,
				57E8938A99B39EC2FEEF8D47 /* 2331. Evaluate Boolean Binary Tree.swift */,
				DEA6F0791DE7AD2639759C15 /* 2373. Largest Local Values in a Matrix.swift */,
				D722E04FFE82A2B956AF18DE /* 2441. Largest Positive Integer That Exists With Its Negative.swift */,
				9837467B1F94759DA34DDE1B /* 2678. Number of Senior Citizens.swift */,
				D985260268CB61BE8EE28947 /* 3110. Score of a String.swift */,
				13B38C15278D20C7C8261D0C /* 3408. Count the Number of Special Characters I.swift */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		BACABE0A2BCD0555005A197C /* Medium */ = {
			isa = PBXGroup;
			children = (
				F0B66AACFD31F859C28E0D92 /* 3. Longest Substring Without Repeating Characters.swift */,
				E48B75F403E85C16E6FFD6FC /* 5. Longest Palindromic Substring.swift */,
				E50DFF61D4BAF6BCB9B8C26C /* 11. Container With Most Water.swift */,
				0C8BF511AB63FDA60A08F53B /* 15. 3Sum.swift */,
				B1BBCA3C89348654E41C1A1B /* 19. Remove Nth Node From End of List.swift */,
				FB3F89CA91CCE8B6365B5D68 /* 33. Search in Rotated Sorted Array.swift */,
				33037F413E5150802164ADEE /* 39. Combination Sum.swift */,
				AB83071F4F4E9CC58DA5DB9A /* 40. Combination Sum II.swift */,
				69CA6D56360DD18FA518E847 /* 48. Rotate Image.swift */,
				2D1A296F4B09694A8C56F644 /* 49. Group Anagrams.swift */,
				6B94DD782CB095E7D9925432 /* 53. Maximum Subarray.swift */,
				1ADCD5F2CBAEBEAFEF8201E2 /* 55. Jump Game.swift */,
				D72ED8632461597C1A70A022 /* 57. Insert Interval.swift */,
				291D92261434E2DE2F1B4790 /* 62. Unique Paths.swift */,
				628B9D43291111E8701BB0CF /* 75. Sort Colors.swift */,
				34C149BC09FF7526B2D14BA5 /* 78. Subsets.swift */,
				11669A8777EF852FCC41B1C1 /* 79. Word Search.swift */,
				FA8AD8DA072BE2CB795DF32E /* 91. Decode Ways.swift */,
				07A9708F38908DB977620466 /* 98. Validate Binary Search Tree.swift */,
				9F5E2616AD70C38A674E3FCD /* 102. Binary Tree Level Order Traversal.swift */,
				5B4DB0C2BB23FB4A2558D168 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift */,
				9A2FDCA6975113D6FFC07635 /* 128. Longest Consecutive Sequence.swift */,
				1A2677197667339330C7B272 /* 129. Sum Root to Leaf Numbers.swift */,
				22FD94BAAD981FCC412E6425 /* 131. Palindrome Partitioning.swift */,
				AF0ACC9E5DCDC0D0DB4F6608 /* 133. Clone Graph.swift */,
				1F51F87ECF2CAF63D81CAE59 /* 139. Word Break.swift */,
				4F74E61F2D358946EBB27103 /* 143. Reorder List.swift */,
				73599156B50C8D195AC3BE31 /* 152. Maximum Product Subarray.swift */,
				FFB993A5EF974AF8A2057A3E /* 153. Find Minimum in Rotated Sorted Array.swift */,
				762AAF4C810D81D0EB5F6FA0 /* 165. Compare Version Numbers.swift */,
				82D26493F07309BE090CDF14 /* 198. House Robber.swift */,
				837C0064F1B04FF020088628 /* 200. Number of Islands.swift */,
				35254E15F3974D0F5A925DEE /* 207. Course Schedule.swift */,
				E566A3A23893399B98AD5D49 /* 208. Implement Trie (Prefix Tree).swift */,
				B84820D654301CB08FA2B79F /* 211. Design Add and Search Words Data Structure.swift */,
				8A23FE7A3877383D37A17187 /* 213. House Robber II.swift */,
				ED3B77C8F6A46FE46E29B41A /* 230. Kth Smallest Element in a BST.swift */,
				8C54F4B78EF197DB28399266 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift */,
				9AE9CFEEEF195D724436B7A3 /* 237. Delete Node in a Linked List.swift */,
				66B2ECA2900426DF23BA7F84 /* 238. Product of Array Except Self.swift */,
				6D5B80796030C5D39D7C82DF /* 260. Single Number III.swift */,
				4B8FF454DF85343007930994 /* 261. Graph Valid Tree.swift */,
				FF78E40017CA340D7AAE1EA6 /* 264. Ugly Number II.swift */,
				ED7A057DE8FF69532245A94B /* 300. Longest Increasing Subsequence.swift */,
				EC1139721BD86FF641205EAB /* 310. Minimum Height Trees.swift */,
				E1DE329271560823383B7232 /* 322. Coin Change.swift */,
				E89329E2FAEA9C45C7F5183F /* 323. Number of Connected Components in an Undirected Graph.swift */,
				A26594D2E7E0767A293406EF /* 347. Top K Frequent Elements.swift */,
				3D1651FEB63B1ECE4983CCBD /* 402. Remove K Digits.swift */,
				F231AD0651B83C1377D52E42 /* 417. Pacific Atlantic Water Flow.swift */,
				0DCDE06F3ECB6F129F9490F9 /* 424. Longest Repeating Character Replacement.swift */,
				FE5587DC5C16E820676BF562 /* 523. Continuous Subarray Sum.swift */,
				35BBB8657125E49677C943A6 /* 623. Add One Row to Tree.swift */,
				AED45D82B80087856CD848F9 /* 624. Maximum Distance in Arrays.swift */,
				81C286E6922C7A567B292794 /* 647. Palindromic Substrings.swift */,
				5898B0DB91F3D979968E28A2 /* 648. Replace Words.swift */,
				B26AB5BD69487320B9E84D62 /* 650. 2 Keys Keyboard.swift */,
				61D85B984AB5850E36DF4C1D /* 678. Valid Parenthesis String.swift */,
				F4CB6301F743CA8EE31EC04B /* 753. Open the Lock.swift */,
				528CDCC19D67136A91158101 /* 786. K-th Smallest Prime Fraction.swift */,
				0D740B0C6B4DA9EAA3979C01 /* 840. Magic Squares In Grid.swift */,
				C70DA0915E88152D9510FCDA /* 846. Hand of Straights.swift */,
				E21C87AC73744B85D0C39992 /* 861. Score After Flipping Matrix.swift */,
				D87B14AA5D812EB60792F396 /* 881. Boats to Save People.swift */,
				EFE61072C752C9C0CF6C9432 /* 885. Spiral Matrix III.swift */,
				C060A37358429B6DDFB0CB7C /* 912. Sort an Array.swift */,
				CE4033177731BC55F7964469 /* 945. Minimum Increment to Make Array Unique.swift */,
				8BF46C0809B84C10359C2D06 /* 959. Regions Cut By Slashes.swift */,
				AE45C38E36E309FCA32413B2 /* 979. Distribute Coins in Binary Tree.swift */,
				D6A5B22EF9060EAFEBF07B26 /* 987. Reveal Cards In Increasing Order.swift */,
				66C9219452620AC2E6A3EC0D /* 1030. Smallest String Starting From Leaf.swift */,
				DF90F3761B9DD9C20E29DC5A /* 1105. Filling Bookcase Shelves.swift */,
				0A4146EE6AFCA55C90899E84 /* 1140. Stone Game II.swift */,
				B727C17660224BF8CB787078 /* 1143. Longest Common Subsequence.swift */,
				7326C94938323D8F6C1B755B /* 1208. Get Equal Substrings Within Budget.swift */,
				74A65F1F433F358F7B44B51D /* 1219. Path with Maximum Gold.swift */,
				54454B0457CCDF788E2E6E77 /* 1325. Delete Leaves With a Given Value.swift */,
				3CD8555921F21827E1CC1343 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift */,
				30989E95C8E3F9019C710B4B /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift */,
				C01F0668B41A7719EAC778E1 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift */,
				44033AA8EF8C4663094B4453 /* 1508. Range Sum of Sorted Subarray Sums.swift */,
				3EB65F30FE618D08A8981288 /* 1653. Minimum Deletions to Make String Balanced.swift */,
				0D8BDBAF6EA5458270E68E6E /* 1915. Number of Wonderful Substrings.swift */,
				018FCC6D0D42DF6814C83152 /* 1937. Maximum Number of Points with Cost.swift */,
				54AC8B35EC993E81E9EE6B94 /* 2103. Find All Groups of Farmland.swift */,
				998B60C183B931DBD1B5A2A6 /* 2134. Minimum Swaps to Group All 1's Together II.swift */,
				C6FAB1EBCDA9DBC6594BCA92 /* 2191. Sort the Jumbled Numbers.swift */,
				335E1BAAF4EE65FD8E3D575A /* 2285. Maximum Total Importance of Roads.swift */,
				A39CB767A64C955ECC51A2A0 /* 2370. Longest Ideal Subsequence.swift */,
				B7E66C2B2F0DBD48EEA3B179 /* 2486. Append Characters to String to Make Subsequence.swift */,
				54C261A52F46C78784388968 /* 2487. Remove Nodes From Linked List.swift */,
				3F24BBE9F6B89C9896F5C85F /* 2597. The Number of Beautiful Subsets.swift */,
				9C89128BC5EC685DFD8DDEF0 /* 2812. Find the Safest Path in a Grid.swift */,
				BCBEE6982567BFF76EA5593B /* 2816. Double a Number Represented as a Linked List.swift */,
				0ADB68B8C79F8A24018CF207 /* 2976. Minimum Cost to Convert String I.swift */,
				C5E28D860D68BF5CB1DC2EDA /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift */,
				AB2DAE2B02DADD306D57A5E8 /* 3016. Minimum Number of Pushes to Type Word II.swift */,
				D908B4DB71CEB907BD3C0040 /* 3075. Maximize Happiness of Selected Children.swift */,
				0333B5EF6246610FC498AA97 /* 3152. Special Array II.swift */,
				AF7DDF10A11CAE472D97BA4F /* 3404. Minimum Number of Operations to Satisfy Conditions.swift */,
				B804F4D7D34E4A53095487B7 /* 3405. Count the Number of Special Characters II.swift */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		BACABE0B2BCD0565005A197C /* Hard */ = {
			isa = PBXGroup;
			children = (
				ED3CE8D6A99A3965125CCB78 /* 4. Median of Two Sorted Arrays.swift */,
				CA54FA704A9FD43597FEAD94 /* 42. Trapping Rain Water.swift */,
				78984E96C41AE5A4354C6562 /* 84. Largest Rectangle in Histogram.swift */,
				689103FDEB26093C4C7DDC42 /* 85. Maximal Rectangle.swift */,
				5191D2C41F069534495D26D5 /* 140. Word Break II.swift */,
				3D9168D2C103CBC539C65675 /* 273. Integer to English Words.swift */,
				4ABF450DB14C27EF0F8A56AD /* 514. Freedom Trail.swift */,
				DCFA261349D24273C2DADC36 /* 552. Student Attendance Record II.swift */,
				41D80CFA1FD6F126C6D4DAA0 /* 719. Find K-th Smallest Pair Distance.swift */,
				D79CECEB223628824707EB8A /* 834. Sum of Distances in Tree.swift */,
				A3903DF32E318374EE88BDBB /* 857. Minimum Cost to Hire K Workers.swift */,
				6A33C56937039E913D28DD87 /* 1255. Maximum Score Words Formed by Letters.swift */,
				DEBB82386EBA4115469C5A59 /* 1289. Minimum Falling Path Sum II.swift */,
				C2F4062EDADDE3736FE57362 /* 1568. Minimum Number of Days to Disconnect Island.swift */,
				FD026386AD38656464754565 /* 2045. Second Minimum Time to Reach Destination.swift */,
				01D633A9853FE47F943C5FE0 /* 3068. Find the Maximum Sum of Node Values.swift */,
			);
			path = Hard;
			sourceTree = "<group>";
		};
		BACFFC4D2BFD805600FE308F /* Utils */ = {
			isa = PBXGroup;
			children = (
				BACFFC4E2BFD806200FE308F /* ArrayComparison.swift */,
				BA87A3662C2D278E003987F7 /* Testing+Tags.swift */,
			);
			path = Utils;
			sourceTree = "<group>";
		};
		BAF746D2299B78D600182311 = {
			isa = PBXGroup;
			children = (
				BAF746DD299B78D600182311 /* Algorithm */,
				BA1BB8862BD75C9800CA174B /* AlgorithmTests */,
				BAF746DC299B78D600182311 /* Products */,
			);
			sourceTree = "<group>";
		};
		BAF746DC299B78D600182311 /* Products */ = {
			isa = PBXGroup;
			children = (
				BAF746DB299B78D600182311 /* Algorithm */,
				BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		BAF746DD299B78D600182311 /* Algorithm */ = {
			isa = PBXGroup;
			children = (
				BAF746DE299B78D600182311 /* main.swift */,
				BA30930E299F851800FCD5F3 /* Base */,
				BA03EE6C2BD0BDA900F1DF61 /* BOJ */,
				BA6B50192BCA35AE00B1715B /* LeetCode */,
				BAF746E6299B7C4A00182311 /* Programmers */,
			);
			path = Algorithm;
			sourceTree = "<group>";
		};
		BAF746E6299B7C4A00182311 /* Programmers */ = {
			isa = PBXGroup;
			children = (
				46DE31A3ADB54D2F40ACC97B /* 42883. Create a large number.swift */,
				1B6F84AC5D5A2EE31CB08A38 /* 258709. Pick a die.swift */,
			);
			path = Programmers;
			sourceTree = "<group>";
		};
		BF4073032C61195A005C448A /* Platinum */ = {
			isa = PBXGroup;
			children = (
				F3202F340A9A0C188BB50C7E /* BOJ3015Tests.swift */,
				7BD143840B718897B7D4D6F7 /* BOJ3197Tests.swift */,
				04527326CA6EAA395DF02AFB /* BOJ6549Tests.swift */,
				3C78D8D57094DAEA635037FA /* BOJ14003Tests.swift */,
			);
			path = Platinum;
			sourceTree = "<group>";
		};
		BF4073082C61195D005C448A /* Gold */ = {
			isa = PBXGroup;
			children = (
				BF4073042C61195D005C448A /* BOJ1005Tests.swift */,
				BF4073052C61195D005C448A /* BOJ1238Tests.swift */,
				BF4073062C61195D005C448A /* BOJ1504Tests.swift */,
				BF4073072C61195D005C448A /* BOJ1520Tests.swift */,
				AE765BAF14B396C029241FA7 /* BOJ1707Tests.swift */,
				B733190334E870B37B829C41 /* BOJ1717Tests.swift */,
				39F13A2B4FFCE06383B23F69 /* BOJ1753Tests.swift */,
				5DBB345D543A97AF2D54115C /* BOJ1806Tests.swift */,
				0795AE9006C2E57A5B349F34 /* BOJ1916Tests.swift */,
				D05BA27100E41536B5B83C90 /* BOJ1987Tests.swift */,
				15A1B68DE9D7AAC7BF2B065B /* BOJ2110Tests.swift */,
				FF906A8CC3BD3BE9E6A38A01 /* BOJ2133Tests.swift */,
				8E0425866283B95D0634005E /* BOJ2212Tests.swift */,
				76474C6CF18E3D4878DF80F7 /* BOJ2252Tests.swift */,
				2A2CD9737C20426AA406E643 /* BOJ2293Tests.swift */,
				2422E42138FA768A1450A90A /* BOJ2294Tests.swift */,
				F438571965CEE96F3D2641ED /* BOJ2560Tests.swift */,
				F7DB1131C4C54FE59859EFC3 /* BOJ2580Tests.swift */,
				3B0DEA22D7B961B6841B71AB /* BOJ10775Tests.swift */,
				FD7D90025D344943654E4E1F /* BOJ11054Tests.swift */,
				77DC7696D84A75501A0276D3 /* BOJ11404Tests.swift */,
				C66492C2240F2B1E74FF3E1F /* BOJ12100Tests.swift */,
				40E2804C9BE077F62A0E79C9 /* BOJ13460Tests.swift */,
				E3D462E86522659A9728E25F /* BOJ13549Tests.swift */,
				40EFCEB7FF387928617BF575 /* BOJ13913Tests.swift */,
				9529500EC53BD87590C5280C /* BOJ14500Tests.swift */,
				6B8A41AA479FCC7C42C7EA8E /* BOJ14503Tests.swift */,
				A7FEADD3C29B0881E3E50D2D /* BOJ15686Tests.swift */,
				C90B2CBB063E3BEC0033E99C /* BOJ16234Tests.swift */,
				98D342EDAEB07E6B3A842E02 /* BOJ17298Tests.swift */,
				BA1BB8872BD75C9800CA174B /* BOJ18231Tests.swift */,
				043FA62507F6B97F5DA77C08 /* BOJ20366Tests.swift */,
			);
			path = Gold;
			sourceTree = "<group>";
		};
		BF40730E2C61195F005C448A /* Silver */ = {
			isa = PBXGroup;
			children = (
				BF40730D2C61195F005C448A /* BOJ1010Tests.swift */,
				10CF129858A0AAE9EC50B6CB /* BOJ1912Tests.swift */,
				FD533B3B32865E5AAF282E48 /* BOJ1927Tests.swift */,
				B152240E4BCAFDABA9D2DDF5 /* BOJ2805Tests.swift */,
				F41856428B3AAA474F8CEEDD /* BOJ11279Tests.swift */,
				E313D047C33DCE2F29B12D0B /* BOJ11286Tests.swift */,
				D7A06489A8904D2578136A47 /* BOJ16953Tests.swift */,
				BA1BB8902BD78F8700CA174B /* BOJ18429Tests.swift */,
			);
			path = Silver;
			sourceTree = "<group>";
		};
		BF4073122C611D3D005C448A /* Bronze */ = {
			isa = PBXGroup;
			children = (
				1B7622EBB33B837A0C6547E6 /* BOJ1894Tests.swift */,
			);
			path = Bronze;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		BA1BB8842BD75C9800CA174B /* AlgorithmTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = BA1BB88B2BD75C9800CA174B /* Build configuration list for PBXNativeTarget "AlgorithmTests" */;
			buildPhases = (
				BA1BB8812BD75C9800CA174B /* Sources */,
				BA1BB8822BD75C9800CA174B /* Frameworks */,
				BA1BB8832BD75C9800CA174B /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = AlgorithmTests;
			productName = AlgorithmTests;
			productReference = BA1BB8852BD75C9800CA174B /* AlgorithmTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		BAF746DA299B78D600182311 /* Algorithm */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = BAF746E2299B78D600182311 /* Build configuration list for PBXNativeTarget "Algorithm" */;
			buildPhases = (
				BAF443E52BCE18DE007D25A6 /* SwiftFormat */,
				BAF746D7299B78D600182311 /* Sources */,
				BAF746D8299B78D600182311 /* Frameworks */,
				BAF746D9299B78D600182311 /* CopyFiles */,
				BAF443E62BCE18E3007D25A6 /* SwiftLint */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Algorithm;
			productName = Algorithm;
			productReference = BAF746DB299B78D600182311 /* Algorithm */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		BAF746D3299B78D600182311 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1600;
				LastUpgradeCheck = 1600;
				TargetAttributes = {
					BA1BB8842BD75C9800CA174B = {
						CreatedOnToolsVersion = 15.3;
					};
					BAF746DA299B78D600182311 = {
						CreatedOnToolsVersion = 14.2;
					};
				};
			};
			buildConfigurationList = BAF746D6299B78D600182311 /* Build configuration list for PBXProject "Algorithm" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = BAF746D2299B78D600182311;
			productRefGroup = BAF746DC299B78D600182311 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				BAF746DA299B78D600182311 /* Algorithm */,
				BA1BB8842BD75C9800CA174B /* AlgorithmTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		BA1BB8832BD75C9800CA174B /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		BAF443E52BCE18DE007D25A6 /* SwiftFormat */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = SwiftFormat;
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "export PATH=\"$PATH:/opt/homebrew/bin\"\nif which swiftformat > /dev/null; then\n    swiftformat .\nelse\n    echo \"warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat\"\nfi\n";
		};
		BAF443E62BCE18E3007D25A6 /* SwiftLint */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = SwiftLint;
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "export PATH=\"$PATH:/opt/homebrew/bin\"\nif which swiftlint > /dev/null; then\n    swiftlint --config \"$SRCROOT/.swiftlint.yml\"\n    # swiftlint --fix && swiftlint\nelse\n    echo \"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"\nfi\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		BA1BB8812BD75C9800CA174B /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BA1B02E02BE1D6AD0018D1BE /* 2000. Reverse Prefix of Word.swift in Sources */,
				BA58C3D32BE5F1EA00EF519E /* 11286. Heap of absolute values.swift in Sources */,
				BA57F1DD2BE8C29E00569604 /* 1912. Continuous sum.swift in Sources */,
				BFCBD8F02C4AE23F00D20B6D /* 300. Longest Increasing Subsequence.swift in Sources */,
				BA1BB8922BD78F9600CA174B /* 18429. root loss.swift in Sources */,
				BA2A2B962BDA44930099FF73 /* 4. Median of Two Sorted Arrays.swift in Sources */,
				BA2DE3C82BF485EE003BC8FA /* 1238. Parties.swift in Sources */,
				BA9DD9A22C0308C4000E523F /* 14503. Robot vacuum cleaners.swift in Sources */,
				BA39D4F02C001E9100099B72 /* 1255. Maximum Score Words Formed by Letters.swift in Sources */,
				BA653D662BDCCD9200328F08 /* 17298. Right Larger Numbers.swift in Sources */,
				BA7220462BF9B4F700C30DF0 /* 13460. Marbles Escape 2.swift in Sources */,
				BA6EBDD72BDBCDC300FAC927 /* 217. Contains Duplicate.swift in Sources */,
				BA6028C12BEC9BAC005F922E /* 1005. ACM Craft.swift in Sources */,
				BF3D680C2C5E59C9007F4A25 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift in Sources */,
				BA5F43DF2BE61748000AE158 /* 20. Valid Parentheses.swift in Sources */,
				BAAD45DB2C147DAE00C58A88 /* 11. Container With Most Water.swift in Sources */,
				BACCE9842BF6D8290015C397 /* 1325. Delete Leaves With a Given Value.swift in Sources */,
				BA1EA9D92C387ACA00D1F6B4 /* 213. House Robber II.swift in Sources */,
				BA57C6232C057727000B3EC8 /* 16234. Population movement.swift in Sources */,
				BA98BB3E2BD8DF2400C85E77 /* 1894. 4th dot.swift in Sources */,
				BA26DABB2C2ED84E00333F2C /* 133. Clone Graph.swift in Sources */,
				BA48225B2C0845DF0010FEF6 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift in Sources */,
				BAE3C96A2C1A9638005EBFA1 /* 2037. Minimum Number of Moves to Seat Everyone.swift in Sources */,
				BA6DE19E2C0AC6790030A41A /* 3110. Score of a String.swift in Sources */,
				BA98BB3D2BD8D81200C85E77 /* 1137. N-th Tribonacci Number.swift in Sources */,
				BA1BB8882BD75C9800CA174B /* BOJ18231Tests.swift in Sources */,
				BAD3DBA22BEE427A002463B7 /* 100. Same Tree.swift in Sources */,
				BF945E402C61A0A9006CA57C /* 3016. Minimum Number of Pushes to Type Word II.swift in Sources */,
				BA63C1CA2BDB37F500CF76E8 /* 1289. Minimum Falling Path Sum II.swift in Sources */,
				BA44EB312BE32ED800A94445 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */,
				BA6ADF2D2BF4540A009174BE /* 2812. Find the Safest Path in a Grid.swift in Sources */,
				BA98BB3F2BD8EEFF00C85E77 /* 10775. Airport.swift in Sources */,
				BAD3DBA02BEE16FE002463B7 /* 1010. Laying bridges.swift in Sources */,
				BF00AB9C2C5A2559004E7002 /* 1105. Filling Bookcase Shelves.swift in Sources */,
				BAAD45DC2C1480F800C58A88 /* 3. Longest Substring Without Repeating Characters.swift in Sources */,
				BA9328742BDA71E40060E7CD /* 2212. Sensors.swift in Sources */,
				BA8AF85F2BE6317900D1737E /* 141. Linked List Cycle.swift in Sources */,
				BA560A182C16C110005F3DB7 /* 143. Reorder List.swift in Sources */,
				BAD951372C17EFA600BF583B /* 1122. Relative Sort Array.swift in Sources */,
				BA9F02B52BE8A255007B8DB5 /* 2487. Remove Nodes From Linked List.swift in Sources */,
				BA137FC42BE49E1700F50CB7 /* 165. Compare Version Numbers.swift in Sources */,
				BA6DE19C2C0AAC7A0030A41A /* 347. Top K Frequent Elements.swift in Sources */,
				BA59963E2BF58EDF006CF31D /* 11404. Floyd.swift in Sources */,
				BA57F1DC2BE8BCE300569604 /* 2580. Sudoku.swift in Sources */,
				BAAD45DA2C142F0C00C58A88 /* 523. Continuous Subarray Sum.swift in Sources */,
				BA6DE19F2C0ACC660030A41A /* 128. Longest Consecutive Sequence.swift in Sources */,
				BA1BB88F2BD75E8400CA174B /* 18231. destroyed city.swift in Sources */,
				BF9DDEF92C62F37C0048ED54 /* 273. Integer to English Words.swift in Sources */,
				BA3C4ECA2BEDE3F500EFE29C /* 786. K-th Smallest Prime Fraction.swift in Sources */,
				BA1BB8912BD78F8700CA174B /* BOJ18429Tests.swift in Sources */,
				428CA4392D21B77061E8F1DB /* LeetCode1137Tests.swift in Sources */,
				CD31C9625EC944EF8846F1C6 /* BOJ1894Tests.swift in Sources */,
				6927F41D517BB843E0F76606 /* BOJ10775Tests.swift in Sources */,
				BA67D1742C2DB00900AC64E2 /* 39. Combination Sum.swift in Sources */,
				BA6EBDD82BDBCF4800FAC927 /* 242. Valid Anagram.swift in Sources */,
				BAA8B6572BD9FF560016D105 /* 3197. The Lake of Swan.swift in Sources */,
				BAC965FE2BE74B3100F4BE29 /* 1987. Alphabet.swift in Sources */,
				BA1B02E12BE1D9F20018D1BE /* 11279. Max Heap.swift in Sources */,
				BFCBD8F22C4B083600D20B6D /* 1143. Longest Common Subsequence.swift in Sources */,
				BA1093792BFACE5C005CF176 /* 49. Group Anagrams.swift in Sources */,
				BAD520372BFAE84900DBDA88 /* 12100. 2048 (Easy).swift in Sources */,
				BAA8B6562BD9F6B40016D105 /* 2370. Longest Ideal Subsequence.swift in Sources */,
				BA87A3692C2D3601003987F7 /* 230. Kth Smallest Element in a BST.swift in Sources */,
				BA6BE4DE2BFECF39004C2DBE /* 2597. The Number of Beautiful Subsets.swift in Sources */,
				BAC5583A2BE0BEB800EEB13B /* 2805. Cutting trees.swift in Sources */,
				BAD3DBA42BEE4871002463B7 /* 70. Climbing Stairs.swift in Sources */,
				BA560A162C16BF56005F3DB7 /* 1051. Height Checker.swift in Sources */,
				BA6F36B82BF6DCC30035E84D /* 1806. Partial sum.swift in Sources */,
				BA59CCB42BDFB94200219E83 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */,
				BA4B321B2C19C073008C16EC /* LeetCode235Tests.swift in Sources */,
				BA4C95E32BEA00C300E80D08 /* 1916. Finding the minimum cost.swift in Sources */,
				563CBAA119F321C46477CB9D /* LeetCode2370Tests.swift in Sources */,
				BA6028C02BEC97A6005F922E /* 3075. Maximize Happiness of Selected Children.swift in Sources */,
				BA63C1CB2BDB3F9600CF76E8 /* 20366. Do you want to build a snowman?.swift in Sources */,
				BAC2DAC92C095E110090A362 /* 260. Single Number III.swift in Sources */,
				BFCBD8F12C4B01CB00D20B6D /* 62. Unique Paths.swift in Sources */,
				BA59CCB52BDFD3B600219E83 /* 15686. Chicken delivery.swift in Sources */,
				BA137FC52BE4A3F900F50CB7 /* 1753. Shortest path.swift in Sources */,
				9397FCD75FC827375DD22D50 /* BOJ3197Tests.swift in Sources */,
				BA58C3D22BE5DFFD00EF519E /* 881. Boats to Save People.swift in Sources */,
				BA57C6222C05681F000B3EC8 /* Utils.swift in Sources */,
				BA74A8012C430DE100495ADF /* 322. Coin Change.swift in Sources */,
				C87E44BC725BBCA98CA8D8E4 /* LeetCode4Tests.swift in Sources */,
				BF54DAB72C5F868800D8CBF1 /* 1508. Range Sum of Sorted Subarray Sums.swift in Sources */,
				BA6EBDD92BDBD07500FAC927 /* 1. Two Sum.swift in Sources */,
				BACFFC502BFD85AE00FE308F /* 11054. Longest Sequence of Vitonic Parts.swift in Sources */,
				BA20A37B2C0FF5980018FA19 /* 1002. Find Common Characters.swift in Sources */,
				BAD3DBA52BEF0036002463B7 /* 857. Minimum Cost to Hire K Workers.swift in Sources */,
				B25327AB7F233F884E784562 /* BOJ2212Tests.swift in Sources */,
				BA82A66E2C4A1801009A462A /* 1380. Lucky Numbers in a Matrix.swift in Sources */,
				BAE3C9692C19EF49005EBFA1 /* 98. Validate Binary Search Tree.swift in Sources */,
				BAD0548D2BE9B7A700B89545 /* 2816. Double a Number Represented as a Linked List.swift in Sources */,
				BAE3C9682C19E6B7005EBFA1 /* 102. Binary Tree Level Order Traversal.swift in Sources */,
				BA6EBDDC2BDCA93900FAC927 /* 514. Freedom Trail.swift in Sources */,
				E4E957C7A58659AF82B00781 /* LeetCode1289Tests.swift in Sources */,
				E4B77CCE7DCC09274BA44ECE /* BOJ20366Tests.swift in Sources */,
				1CCF5051F633FF411388A34C /* LeetCode217Tests.swift in Sources */,
				BA77F1642BDDEE7F00C3B741 /* 834. Sum of Distances in Tree.swift in Sources */,
				BF7E15E52C65BFAE0021491F /* 840. Magic Squares In Grid.swift in Sources */,
				BA77F1652BDE13CD00C3B741 /* 2293. Coin I.swift in Sources */,
				BAC965FD2BE7406D00F4BE29 /* 237. Delete Node in a Linked List.swift in Sources */,
				732E5A5C32D44BE1962A1981 /* LeetCode242Tests.swift in Sources */,
				BA6EBDDA2BDBD96500FAC927 /* 125. Valid Palindrome.swift in Sources */,
				BF7843DF2C7447DC00BCA94B /* 1140. Stone Game II.swift in Sources */,
				BA74A8032C43281F00495ADF /* 139. Word Break.swift in Sources */,
				BA688CB22BF095C800009F37 /* Interval.swift in Sources */,
				BA5C4E532C2FB9C500C21657 /* 417. Pacific Atlantic Water Flow.swift in Sources */,
				F1EC137A1A30900D9031EE8E /* LeetCode1Tests.swift in Sources */,
				BF2CCB4D2C69B610007A1AEA /* 703. Kth Largest Element in a Stream.swift in Sources */,
				BA688CAE2BF093B500009F37 /* 252. Meeting Rooms.swift in Sources */,
				BABD186A2C0408BA00EC6CD9 /* 1608. Special Array With X Elements Greater Than or Equal X.swift in Sources */,
				769AF1997B87BFA79723DEC1 /* LeetCode125Tests.swift in Sources */,
				BA6EBDDB2BDBE14000FAC927 /* 121. Best Time to Buy and Sell Stock.swift in Sources */,
				BA88A2572C1921600064528A /* 75. Sort Colors.swift in Sources */,
				BA560A152C16B890005F3DB7 /* 33. Search in Rotated Sorted Array.swift in Sources */,
				BF9735272C5B1926005D4BE8 /* 2678. Number of Senior Citizens.swift in Sources */,
				244905F7EE87422AD3260F09 /* LeetCode121Tests.swift in Sources */,
				BA44EB322BE3305500A94445 /* 1927. Min Heap.swift in Sources */,
				ED860DD7204EFEFED588EA5F /* LeetCode514Tests.swift in Sources */,
				F10BA05B916C440AD7BF14C7 /* BOJ17298Tests.swift in Sources */,
				BA10937A2BFAD6DE005CF176 /* 1863. Sum of All Subset XOR Totals.swift in Sources */,
				BAA50C7A2BF1BBF70079ECDE /* 861. Score After Flipping Matrix.swift in Sources */,
				BAFA9BC22C0CC25700DB50D6 /* 344. Reverse String.swift in Sources */,
				BA5C4E542C3174E500C21657 /* 207. Course Schedule.swift in Sources */,
				BAD749022BF31FA000E7D03E /* 1219. Path with Maximum Gold.swift in Sources */,
				BA5F43E22BE61D64000AE158 /* 206. Reverse Linked List.swift in Sources */,
				BAD0548E2BE9BB9400B89545 /* 3015. Reunite Oasis.swift in Sources */,
				BACFFC4F2BFD806200FE308F /* ArrayComparison.swift in Sources */,
				71BCF67A948FE6952FE0A3FC /* LeetCode834Tests.swift in Sources */,
				BA688CAD2BF089BD00009F37 /* 16953. A → B.swift in Sources */,
				BA57C6242C06B6CC000B3EC8 /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift in Sources */,
				BA8AF8602BE63C6800D1737E /* 226. Invert Binary Tree.swift in Sources */,
				BF4073102C61197C005C448A /* 6549. Largest rectangle in a histogram.swift in Sources */,
				BF1F74B12C54675700531F9A /* 48. Rotate Image.swift in Sources */,
				BA560A192C16EEBE005F3DB7 /* 19. Remove Nth Node From End of List.swift in Sources */,
				BA57DEE32BE09BA000073C18 /* 1915. Number of Wonderful Substrings.swift in Sources */,
				BFD798462C6DCE3E00152E13 /* 860. Lemonade Change.swift in Sources */,
				BAAD45DE2C15CC1E00C58A88 /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */,
				BA26DABE2C2EDC4500333F2C /* Node.swift in Sources */,
				C174FA13DF6647CABA406969 /* BOJ2293Tests.swift in Sources */,
				BABD18662C03F59C00EC6CD9 /* 13549. Hide and Seek 3.swift in Sources */,
				C10A6CDAD074405CAC64B0D8 /* LeetCode2997Tests.swift in Sources */,
				BA57C6202C055CD1000B3EC8 /* 1208. Get Equal Substrings Within Budget.swift in Sources */,
				DF1E85940105D4845A53B0B0 /* BOJ15686Tests.swift in Sources */,
				BAC7C2112C2E916700A89457 /* 2285. Maximum Total Importance of Roads.swift in Sources */,
				24BF6E356DC21458CC75D808 /* LeetCode1915Tests.swift in Sources */,
				72B519C20C01453ABD1D690C /* BOJ2805Tests.swift in Sources */,
				BAD951152BEBC5D600806D4C /* 506. Relative Ranks.swift in Sources */,
				DC35452B7543C80A9E697A6C /* LeetCode2000Tests.swift in Sources */,
				BA7B548F2C005D9E00487885 /* 268. Missing Number.swift in Sources */,
				BA5865352C0F2D8B0095DF8B /* 409. Longest Palindrome.swift in Sources */,
				BF1D7DF82C64F47E002DAE27 /* 885. Spiral Matrix III.swift in Sources */,
				BA9157FC2C01F45E00153799 /* 2560. Straw Worm.swift in Sources */,
				BA5F43E32BE62003000AE158 /* ListNode.swift in Sources */,
				BA0611A12BF873630020C171 /* 1520. Downhill.swift in Sources */,
				E14F847269046FDB8DFB2369 /* BOJ11279Tests.swift in Sources */,
				BF3903312C5C776C001F41B2 /* 2134. Minimum Swaps to Group All 1's Together II.swift in Sources */,
				BA74A8022C431B3900495ADF /* 152. Maximum Product Subarray.swift in Sources */,
				7D15BE7562BD0E4035409427 /* LeetCode2441Tests.swift in Sources */,
				13B2FC575BC0C08C5F7E88D3 /* BOJ1927Tests.swift in Sources */,
				BF83E69E2C5D0AC500C00180 /* 2045. Second Minimum Time to Reach Destination.swift in Sources */,
				BA5F43E42BE62007000AE158 /* TreeNode.swift in Sources */,
				EB2F8B6BD40873DC6C7979A3 /* LeetCode165Tests.swift in Sources */,
				BAD749032BF330BA00E7D03E /* 14500. Tetromino.swift in Sources */,
				B7F3A07EF15436FAA05A09FA /* BOJ1753Tests.swift in Sources */,
				A91BBBAADAC5753B36B20622 /* LeetCode881Tests.swift in Sources */,
				BA6DE19D2C0ABE210030A41A /* 238. Product of Array Except Self.swift in Sources */,
				BAD3DBA12BEE40FF002463B7 /* 104. Maximum Depth of Binary Tree.swift in Sources */,
				BFDA1A062C6C40E80083234B /* 719. Find K-th Smallest Pair Distance.swift in Sources */,
				2110AFABEB88CF65E9C1822D /* BOJ11286Tests.swift in Sources */,
				BA5F43E52BE627C2000AE158 /* 21. Merge Two Sorted Lists.swift in Sources */,
				6A0C7E0B4631B3B549EB835F /* LeetCode20Tests.swift in Sources */,
				C9AA781E33E53CA0F2B27B5B /* LeetCode206Tests.swift in Sources */,
				BA1EA9D82C3873A300D1F6B4 /* 198. House Robber.swift in Sources */,
				FBD0578BA334A6AEE0BB4B69 /* LeetCode21Tests.swift in Sources */,
				BA87A36A2C2D3F58003987F7 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift in Sources */,
				DC87DB72942D3E8CEA455C82 /* LeetCode141Tests.swift in Sources */,
				14002FD4EB3CA0FC5590AD59 /* LeetCode226Tests.swift in Sources */,
				BA57D06A2BEF16A500CAF130 /* 2110. Installing a router.swift in Sources */,
				B1497A94E45EBF47364E6ADD /* LeetCode237Tests.swift in Sources */,
				8BEE20091C43BC7EC2617BD2 /* BOJ1987Tests.swift in Sources */,
				BA39D4F12C0028CE00099B72 /* 1504. Specific shortest paths.swift in Sources */,
				2EC991651E7EA33215056405 /* LeetCode2487Tests.swift in Sources */,
				BFE7EF1C2C6EF32500B80E9E /* 624. Maximum Distance in Arrays.swift in Sources */,
				BF8CAF912C6AF520005453DB /* 40. Combination Sum II.swift in Sources */,
				BA2DE3CB2BF4943A003BC8FA /* Heap.swift in Sources */,
				1DEA772E676BD75354229402 /* BOJ2580Tests.swift in Sources */,
				C8ECE6E8F967AF9BDCD9EEE8 /* BOJ1912Tests.swift in Sources */,
				BA87A3672C2D278E003987F7 /* Testing+Tags.swift in Sources */,
				D4F0D8E8E663A63F336D9EB8 /* LeetCode2816Tests.swift in Sources */,
				81888093F324533D436DF72E /* BOJ3015Tests.swift in Sources */,
				BA7127E12C1160510028A48E /* 846. Hand of Straights.swift in Sources */,
				403FBDB8CB8A5BA4AF296E75 /* BOJ1916Tests.swift in Sources */,
				BAE3C9A32C1C0233005EBFA1 /* 945. Minimum Increment to Make Array Unique.swift in Sources */,
				2F04F3B2171C143F43B93171 /* LeetCode506Tests.swift in Sources */,
				BF3FA1332C55705100B78FD0 /* 2976. Minimum Cost to Convert String I.swift in Sources */,
				437714D47CFDB2780613E7D3 /* LeetCode3075Tests.swift in Sources */,
				BAE5D0502BF9929E00BB3D7D /* 3068. Find the Maximum Sum of Node Values.swift in Sources */,
				BF13723F2C5D7ABE002A80AB /* 1636. Sort Array by Increasing Frequency.swift in Sources */,
				A9D1F499D140D497D5916EC6 /* LeetCode786Tests.swift in Sources */,
				BAE7BEB22BF086C2008503CE /* 2373. Largest Local Values in a Matrix.swift in Sources */,
				BAB1F84A2BF9EB6300C2137A /* 3152. Special Array II.swift in Sources */,
				2E89C89BAC6807AC1DB6BE1F /* LeetCode104Tests.swift in Sources */,
				BAACE2C52BF58DC600A29E7B /* 2331. Evaluate Boolean Binary Tree.swift in Sources */,
				BABD18692C0401D100EC6CD9 /* 13913. Hide and Seek 4.swift in Sources */,
				BA9157FB2C01E4B300153799 /* 140. Word Break II.swift in Sources */,
				BAD3DBA32BEE448A002463B7 /* 572. Subtree of Another Tree.swift in Sources */,
				EFAF18D58C399F9720BE65DA /* LeetCode100Tests.swift in Sources */,
				DB36B23DCEE11927089EAC04 /* LeetCode572Tests.swift in Sources */,
				343665131EEABD35FCBA8D44 /* LeetCode70Tests.swift in Sources */,
				BA1093782BFA1831005CF176 /* 338. Counting Bits.swift in Sources */,
				BA1EA9DA2C388FD400D1F6B4 /* 5. Longest Palindromic Substring.swift in Sources */,
				3F23228450060BE574C01F7A /* LeetCode857Tests.swift in Sources */,
				BAFA9BC32C0D995C00DB50D6 /* 2486. Append Characters to String to Make Subsequence.swift in Sources */,
				BA6BE4DF2BFEE699004C2DBE /* 1717. Representation of Sets.swift in Sources */,
				BA20A3802C0FF6930018FA19 /* LeetCode1002Tests.swift in Sources */,
				123BD5BD04CDA4F92E20C728 /* BOJ2110Tests.swift in Sources */,
				BA2E71E62C2E63B3005C45D2 /* 208. Implement Trie (Prefix Tree).swift in Sources */,
				77AA405F3125B7BC1E44D830 /* LeetCode2373Tests.swift in Sources */,
				B3CB0C50A0F5B375CA944754 /* BOJ16953Tests.swift in Sources */,
				BA7B54912C00634400487885 /* 190. Reverse Bits.swift in Sources */,
				A6CC1AF0F31C3135CE20D40A /* LeetCode252Tests.swift in Sources */,
				BAB9B9492BF865FA00DEF653 /* 979. Distribute Coins in Binary Tree.swift in Sources */,
				BAAD45E12C15DA7400C58A88 /* 258709. Pick a die.swift in Sources */,
				BA2E71E52C2E5B9A005C45D2 /* 79. Word Search.swift in Sources */,
				F01E4AB8A934DD5C4EDE3469 /* LeetCode861Tests.swift in Sources */,
				BACFFC4C2BFD7B5700FE308F /* 131. Palindrome Partitioning.swift in Sources */,
				BA57C6282C06CC60000B3EC8 /* Queue.swift in Sources */,
				47539B1D2033692B4F6051B6 /* BOJ2252Tests.swift in Sources */,
				BFBBE5C42C54510400B199DB /* 55. Jump Game.swift in Sources */,
				BF4073092C61195D005C448A /* BOJ1005Tests.swift in Sources */,
				BF40730A2C61195D005C448A /* BOJ1504Tests.swift in Sources */,
				BF40730B2C61195D005C448A /* BOJ1238Tests.swift in Sources */,
				BF40730C2C61195D005C448A /* BOJ1520Tests.swift in Sources */,
				BA1EA9D62C385BFF00D1F6B4 /* 261. Graph Valid Tree.swift in Sources */,
				BAA50C7B2BF1CFB50079ECDE /* 2252. Line up.swift in Sources */,
				9F48B1AC2DFE123B54EB2C41 /* LeetCode1219Tests.swift in Sources */,
				CB4CC72290B1420BED924018 /* BOJ14500Tests.swift in Sources */,
				BA7B54902C00628600487885 /* 191. Number of 1 Bits.swift in Sources */,
				273AF78AB87FD153CE94E361 /* LeetCode2812Tests.swift in Sources */,
				BA9134402BFC2A7300F24C03 /* 78. Subsets.swift in Sources */,
				BA9134412BFC2DA400F24C03 /* 2294. Coins II.swift in Sources */,
				E5B4D9ED3F67E52CC775F6C2 /* LeetCode2331Tests.swift in Sources */,
				BA9DD9A12C02EA07000E523F /* 552. Student Attendance Record II.swift in Sources */,
				5BC50B19D37B97F97B237B96 /* BOJ11404Tests.swift in Sources */,
				C530A0FCD842D8CF1DA82E6E /* LeetCode1325Tests.swift in Sources */,
				F9793127364A2E8B02D9FCED /* BOJ1806Tests.swift in Sources */,
				BA1EA9D72C3870CC00D1F6B4 /* 323. Number of Connected Components in an Undirected Graph.swift in Sources */,
				150F01B1AFE39E6872990BCE /* LeetCode979Tests.swift in Sources */,
				EC093217774A0A1A94833C72 /* LeetCode3068Tests.swift in Sources */,
				50A23FF1ADCED88AC441C6CA /* BOJ13460Tests.swift in Sources */,
				4E4E84B91124E949E9F10F97 /* LeetCode3152Tests.swift in Sources */,
				5F3B6A4CB3B479A91620AA47 /* LeetCode338Tests.swift in Sources */,
				E5CCCC8B01E71408C0CC1E92 /* LeetCode49Tests.swift in Sources */,
				BA57C6252C06C6FF000B3EC8 /* 1707. Bipartite graphs.swift in Sources */,
				BFCBD8F32C4B114200D20B6D /* 53. Maximum Subarray.swift in Sources */,
				C8291FE3A2C5B478865C028E /* LeetCode1863Tests.swift in Sources */,
				F133405F354E742CDC577B17 /* BOJ12100Tests.swift in Sources */,
				BAAD45D92C142D0600C58A88 /* 648. Replace Words.swift in Sources */,
				BA74A8002C42F7FD00495ADF /* 91. Decode Ways.swift in Sources */,
				1B501DEAA8D196AD81A270F4 /* LeetCode78Tests.swift in Sources */,
				BA48225C2C0851E10010FEF6 /* 2133. Fill Tiles.swift in Sources */,
				DC2DB3E5F1092447DA942B84 /* BOJ2294Tests.swift in Sources */,
				BAC2DACA2C09630D0090A362 /* 14003. Longest increasing partial sequence 5.swift in Sources */,
				AF77BEBC7881428EB09B1B5C /* LeetCode131Tests.swift in Sources */,
				CF716FC0E29958FD2B5B02CA /* BOJ11054Tests.swift in Sources */,
				0BD52685BB5B00F57B4F37FF /* LeetCode2597Tests.swift in Sources */,
				552CBAEDE98843746B27BDAF /* BOJ1717Tests.swift in Sources */,
				BA4B32192C19BFF7008C16EC /* 235. Lowest Common Ancestor of a Binary Search Tree.swift in Sources */,
				BF5EAAA52C72219A007CC01A /* 264. Ugly Number II.swift in Sources */,
				BB3738DF1B12D36DEB35A4C8 /* LeetCode1255Tests.swift in Sources */,
				686D5AD804928B2B10E66C37 /* LeetCode268Tests.swift in Sources */,
				1491138548C42BB706D9977A /* LeetCode191Tests.swift in Sources */,
				A47FCC21A736D622E5454A03 /* LeetCode190Tests.swift in Sources */,
				44718DE7B30632C2C1A7A4B5 /* LeetCode140Tests.swift in Sources */,
				84DCB8940CED0A7A29A5FDCB /* BOJ2560Tests.swift in Sources */,
				5A75A7B6DB031C355D2DD7DC /* LeetCode552Tests.swift in Sources */,
				E4624DDA6D53C3129D21DF44 /* BOJ14503Tests.swift in Sources */,
				BAAD45DD2C1492F100C58A88 /* 424. Longest Repeating Character Replacement.swift in Sources */,
				2DFE48A70031F393EA306739 /* BOJ13549Tests.swift in Sources */,
				BA6DE1A02C0AD2560030A41A /* 15. 3Sum.swift in Sources */,
				E194F951CFBF795F6FB51BEE /* BOJ13913Tests.swift in Sources */,
				BF776FBF2C53EF82006D2187 /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift in Sources */,
				BF2F41302C68F19200DF4997 /* 1568. Minimum Number of Days to Disconnect Island.swift in Sources */,
				9933E8CFAFDD5B1194997CB7 /* LeetCode1608Tests.swift in Sources */,
				1335CA301AFD1D9B03BE0BCE /* LeetCode1208Tests.swift in Sources */,
				39912D75DAA7A68D6FE33A6A /* BOJ16234Tests.swift in Sources */,
				E3CFE473C7D243A574E56BA0 /* LeetCode1404Tests.swift in Sources */,
				C208E199F55754A08811F951 /* BOJ1707Tests.swift in Sources */,
				BAC7C2142C2E9E3C00A89457 /* 211. Design Add and Search Words Data Structure.swift in Sources */,
				BFC2E3072C59380500B13C7F /* 1653. Minimum Deletions to Make String Balanced.swift in Sources */,
				9FBB2971AA8246F0DA46EC8C /* LeetCode1442Tests.swift in Sources */,
				B9488914D822EF57D82E08DB /* BOJ2133Tests.swift in Sources */,
				BF40730F2C61195F005C448A /* BOJ1010Tests.swift in Sources */,
				F1F41F139A4743AE1135C26A /* LeetCode260Tests.swift in Sources */,
				6FCF5B087C3547306E9BFD63 /* BOJ14003Tests.swift in Sources */,
				195BB0885944C72E35BE318D /* LeetCode347Tests.swift in Sources */,
				C06F845349F4B156265D6BB1 /* LeetCode238Tests.swift in Sources */,
				BF8B5A3C2C708D19001292E0 /* 1937. Maximum Number of Points with Cost.swift in Sources */,
				A5DDB14AC187D7E69CF72D33 /* LeetCode3110Tests.swift in Sources */,
				AAE689066F9DF7CFBD0DAEEC /* LeetCode128Tests.swift in Sources */,
				4AA035505CBF09FD5A543C21 /* LeetCode15Tests.swift in Sources */,
				7250936FC886DB8D041A3602 /* LeetCode344Tests.swift in Sources */,
				FD7E88575DCED5264E7F1319 /* LeetCode2486Tests.swift in Sources */,
				BC1AF46BB1B87896CA3C6404 /* LeetCode409Tests.swift in Sources */,
				3F9DEA9FDA65450D99AD0F5E /* LeetCode846Tests.swift in Sources */,
				A6716F3928BBD482BC2ECEFD /* LeetCode648Tests.swift in Sources */,
				48BD1016F94203FB21BAB4BD /* LeetCode523Tests.swift in Sources */,
				BAC7C2132C2E91B100A89457 /* LeetCode2285Tests.swift in Sources */,
				BA26DABA2C2ED3CA00333F2C /* 200. Number of Islands.swift in Sources */,
				9DF24406CB27CF92DE64C355 /* LeetCode11Tests.swift in Sources */,
				2E50BF7125D314BD0066832B /* LeetCode3Tests.swift in Sources */,
				468B4BB3DB2FB4FCA13B2F80 /* LeetCode424Tests.swift in Sources */,
				BA74A7FF2C42C41500495ADF /* 647. Palindromic Substrings.swift in Sources */,
				122B5E51E0CAFB529C1E8F38 /* LeetCode153Tests.swift in Sources */,
				2EEAAA008EFC329EB0572460 /* Programmers258709Tests.swift in Sources */,
				2FDD0420777B9A37A08148B7 /* LeetCode33Tests.swift in Sources */,
				89AAE7E71759F264F31C8A6C /* LeetCode1051Tests.swift in Sources */,
				B89B49B5945B86DF8159850A /* LeetCode143Tests.swift in Sources */,
				BA87A3652C2D2642003987F7 /* 1791. Find Center of Star Graph.swift in Sources */,
				91D9E6105D5428C31F3470B1 /* LeetCode19Tests.swift in Sources */,
				D5894F750FFEBA60E447407F /* LeetCode1122Tests.swift in Sources */,
				394F94A77044B17630DD3963 /* LeetCode75Tests.swift in Sources */,
				A62E25657515282988E165A1 /* LeetCode102Tests.swift in Sources */,
				245B2EA69F774938F2F9317D /* LeetCode98Tests.swift in Sources */,
				4B5CB54DB91162744CE1ADAD /* LeetCode2037Tests.swift in Sources */,
				D595098AAD0857AF4CE80CB1 /* LeetCode945Tests.swift in Sources */,
				7EE2A34064594CA2029A3B27 /* LeetCode1791Tests.swift in Sources */,
				410A97FF7AD98707F5CEA965 /* LeetCode230Tests.swift in Sources */,
				2FA764DB955BF0C965C02BB6 /* LeetCode105Tests.swift in Sources */,
				44D67C659CD5DFDF4632B6B5 /* LeetCode39Tests.swift in Sources */,
				7F104D8647A9FCA69F23BA94 /* LeetCode79Tests.swift in Sources */,
				B36A1D9B5122ACAFBAE8E744 /* LeetCode208Tests.swift in Sources */,
				3A344471135D5870D0FADEC2 /* LeetCode211Tests.swift in Sources */,
				BFD6192A2C573A2D00C3230A /* 2191. Sort the Jumbled Numbers.swift in Sources */,
				CF79780E921D63D4DE2052CC /* LeetCode200Tests.swift in Sources */,
				DBB06802AE28A5B03DBDFE44 /* LeetCode133Tests.swift in Sources */,
				933C427858869A5E4F5A0DF8 /* LeetCode417Tests.swift in Sources */,
				199954E8CE53E60746BAD7F7 /* LeetCode207Tests.swift in Sources */,
				2C8ADD248582DF7F3159C0AF /* LeetCode261Tests.swift in Sources */,
				CBC39204811D97F072A049B0 /* LeetCode323Tests.swift in Sources */,
				97D78C475F999B1B342BC77B /* LeetCode198Tests.swift in Sources */,
				BFED97312C559357008D4110 /* 912. Sort an Array.swift in Sources */,
				D6F91A80D07F5BE8176F007F /* LeetCode213Tests.swift in Sources */,
				6AD7D2C6482347BCE7EEC61B /* LeetCode5Tests.swift in Sources */,
				8BFC45E1449004BA912E7E0A /* LeetCode647Tests.swift in Sources */,
				1F0D1325E69EC219DD1586A9 /* LeetCode91Tests.swift in Sources */,
				24B60B413299DBDEDB987CA1 /* LeetCode322Tests.swift in Sources */,
				EAC0E1C09216D03FA87E17CA /* LeetCode152Tests.swift in Sources */,
				F68446E14DFD288927013547 /* LeetCode139Tests.swift in Sources */,
				C2B1B4D8B473D90B6A948153 /* LeetCode1380Tests.swift in Sources */,
				FD4AB96C99A49B8FD67661B3 /* LeetCode300Tests.swift in Sources */,
				2578BB84E54039484129E40D /* LeetCode62Tests.swift in Sources */,
				88BA20B4EED7A05807D48E60 /* LeetCode1143Tests.swift in Sources */,
				2ED2BDF6594E9D662DADD012 /* LeetCode53Tests.swift in Sources */,
				BFBF67B32C67914D00DF69C0 /* 959. Regions Cut By Slashes.swift in Sources */,
				BD8B62D4724AFF7346DE23D8 /* LeetCode55Tests.swift in Sources */,
				BDAC34D0018A2DA6F665136A /* LeetCode1334Tests.swift in Sources */,
				E89D9D1F30AD1E2B8961AF97 /* LeetCode48Tests.swift in Sources */,
				673ACDE0AB649A417ABB4EC2 /* LeetCode2976Tests.swift in Sources */,
				56F9F24E32380BC7BF253012 /* LeetCode912Tests.swift in Sources */,
				8B4890B26BD1CF1C8DEB37B0 /* LeetCode2191Tests.swift in Sources */,
				D9B199DF940DAB5E5AC7505D /* LeetCode1653Tests.swift in Sources */,
				4C6A5F6F07FA288568954C8A /* LeetCode1105Tests.swift in Sources */,
				31EA4A7807C6F6F424B4141C /* LeetCode2678Tests.swift in Sources */,
				BFEF74B32C60A33C001E7B1D /* 2053. Kth Distinct String in an Array.swift in Sources */,
				84B4EFB5CDB2C50EA3F25468 /* LeetCode2134Tests.swift in Sources */,
				AF6BFC2C1AB1237772F58C40 /* LeetCode2045Tests.swift in Sources */,
				BEAA02AA699BE9527CC4B7AB /* LeetCode1636Tests.swift in Sources */,
				4D253EC5A8C537AED232E8F0 /* LeetCode1460Tests.swift in Sources */,
				8CC6FED8B398BB23256261A2 /* LeetCode1508Tests.swift in Sources */,
				E2582B0ED20777C5AE9123C1 /* LeetCode2053Tests.swift in Sources */,
				E40BD41874F5060786E08120 /* BOJ6549Tests.swift in Sources */,
				55BA8EEBA082923E2FB17007 /* LeetCode3016Tests.swift in Sources */,
				BF25ECF52C62274E00191641 /* 57. Insert Interval.swift in Sources */,
				807E0C8DE0323E5430622A1A /* LeetCode57Tests.swift in Sources */,
				3B03C4962CD8815DD97E4566 /* LeetCode273Tests.swift in Sources */,
				F06B5182A755352522AF9173 /* LeetCode885Tests.swift in Sources */,
				8CE5980C6D41A1379557CF54 /* LeetCode840Tests.swift in Sources */,
				DA6C0DA89DE78DCD5E9546BD /* LeetCode959Tests.swift in Sources */,
				D54B908E85CBC4513075E558 /* LeetCode1568Tests.swift in Sources */,
				69FA8CD2EF12849BF8A48CB2 /* LeetCode703Tests.swift in Sources */,
				76B38EDFA27DA15C718B7EC7 /* LeetCode40Tests.swift in Sources */,
				577669C4D73CF4C24D2946D0 /* LeetCode719Tests.swift in Sources */,
				833E312D313B7D13BD0C1260 /* LeetCode860Tests.swift in Sources */,
				784D909FC29F23F4DFC7406F /* LeetCode624Tests.swift in Sources */,
				2E890590B510E1F4DD7EF54F /* LeetCode1937Tests.swift in Sources */,
				505F68CF4EF5B94F497C9C83 /* LeetCode264Tests.swift in Sources */,
				BFFB4A102C72F0BC005422E3 /* 650. 2 Keys Keyboard.swift in Sources */,
				096D6FC7B694471D32B8B934 /* LeetCode650Tests.swift in Sources */,
				362B8A80D477B438D9B6CCEC /* LeetCode1140Tests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		BAF746D7299B78D600182311 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BAF746DF299B78D600182311 /* main.swift in Sources */,
				BAF443E42BCD1256007D25A6 /* TreeNode.swift in Sources */,
				BA9BA9662BD4B2980060047E /* 100294. Count the Number of Special Characters I.swift in Sources */,
				BA402F572B848BC600E86AAD /* Utils.swift in Sources */,
				AF2867E443D338416AD5647D /* 129. Sum Root to Leaf Numbers.swift in Sources */,
				9B678B0352E8D6A7FDE87D31 /* 623. Add One Row to Tree.swift in Sources */,
				FF44CB3EB03092BEEBD8215E /* 42. Trapping Rain Water.swift in Sources */,
				05BB03033C19747B0BDDA1DC /* 85. Maximal Rectangle.swift in Sources */,
				7E7BED2D34087F88D2F5A70B /* 84. Largest Rectangle in Histogram.swift in Sources */,
				647453E29C0FB86384D43325 /* 987. Reveal Cards In Increasing Order.swift in Sources */,
				BA5F43E12BE61D2E000AE158 /* ListNode.swift in Sources */,
				65C21D1432E3C8E2D257AF6D /* 402. Remove K Digits.swift in Sources */,
				246764F8389A24E26E4F8BA5 /* 347. Top K Frequent Elements.swift in Sources */,
				15A8637E4077E16D9675D702 /* 53. Maximum Subarray.swift in Sources */,
				ADAC39048810E6DC3D734B58 /* 678. Valid Parenthesis String.swift in Sources */,
				42515CC0F9B451335AD25BAD /* 1030. Smallest String Starting From Leaf.swift in Sources */,
				F33D623C2BB190E54E3D207D /* 55. Jump Game.swift in Sources */,
				FC374C1BAB7BC1184094E7E6 /* 463. Island Perimeter.swift in Sources */,
				9653D5809AF9F31705F2CAEF /* 1759. Create a password.swift in Sources */,
				9E92CAA8692DE34C31A0793A /* 200. Number of Islands.swift in Sources */,
				04BBC7F80E4CDDD129B927E7 /* 2103. Find All Groups of Farmland.swift in Sources */,
				35F6CFD292D74C88726B9A70 /* 42883. Create a large number.swift in Sources */,
				1799268B03B55CF7E545D978 /* 10844. number of easy stairs.swift in Sources */,
				BA9BA9682BD4B4B00060047E /* 100291. Count the Number of Special Characters II.swift in Sources */,
				D1CD436EF833C0306B3F4F8A /* 3408. Count the Number of Special Characters I.swift in Sources */,
				ED659B162A0990858CF4DA6F /* 3405. Count the Number of Special Characters II.swift in Sources */,
				0298F96EDD1C0CEE2F678853 /* 2121. Find if Path Exists in Graph.swift in Sources */,
				5B1407FC43CB7EB8D99A308B /* 3404. Minimum Number of Operations to Satisfy Conditions.swift in Sources */,
				F9CF510FA1B30BF96E5E3334 /* 753. Open the Lock.swift in Sources */,
				CE6A213992B34D2B4ABF6816 /* 9935. string explosion.swift in Sources */,
				936DBA36E92A4264C883C2E6 /* 3111. Censorship.swift in Sources */,
				065FB6159E74C405D97C95C8 /* 310. Minimum Height Trees.swift in Sources */,
				C499DD65E10628A9B228AC27 /* 18231. destroyed city.swift in Sources */,
				86113DAC5600E7252DC6E18E /* 18429. root loss.swift in Sources */,
				EFED1CD0862E4245430E1C06 /* 1137. N-th Tribonacci Number.swift in Sources */,
				D5A7A34381EB73112802F70B /* 1894. 4th dot.swift in Sources */,
				261265B42F0696E0300B0DAD /* 10775. Airport.swift in Sources */,
				E7F90C1C3425675050CD71B8 /* 2370. Longest Ideal Subsequence.swift in Sources */,
				24ABAE9803AC8108CAE8F7B9 /* 3197. The Lake of Swan.swift in Sources */,
				E6402D73EB141156F1D4F6E1 /* 4. Median of Two Sorted Arrays.swift in Sources */,
				F34928B1B8FFFC0C8B142662 /* 2212. Sensors.swift in Sources */,
				276AFFC688E963A4CE1C5424 /* 1289. Minimum Falling Path Sum II.swift in Sources */,
				197093287BFABCAD763F943A /* 20366. Do you want to build a snowman?.swift in Sources */,
				BA688CB12BF094B900009F37 /* Interval.swift in Sources */,
				E36093434D7C646997140739 /* 217. Contains Duplicate.swift in Sources */,
				922639D7DD1CAC0B19672BBA /* 242. Valid Anagram.swift in Sources */,
				CEA813ED69A0FCF2681D2DD1 /* 1. Two Sum.swift in Sources */,
				BE61E278EC8D865A0D5A4726 /* 125. Valid Palindrome.swift in Sources */,
				A3A83F852CFB29C40FB8306F /* 121. Best Time to Buy and Sell Stock.swift in Sources */,
				410E9BE82EC1D30D80C2ED52 /* 514. Freedom Trail.swift in Sources */,
				54AB38AF9E98CD4DA705541C /* 17298. Right Larger Numbers.swift in Sources */,
				25EE03CC12D4D87C0E24DB06 /* 834. Sum of Distances in Tree.swift in Sources */,
				39EC1CFB669DBB0D92864C7B /* 2293. Coin I.swift in Sources */,
				4BEBA57EC537F4869C12FEA8 /* 2997. Minimum Number of Operations to Make Array XOR Equal to K.swift in Sources */,
				A1D260FBE826ED2057AC26A2 /* 15686. Chicken delivery.swift in Sources */,
				4EC93C2E678396AFB1C0C6F9 /* 1915. Number of Wonderful Substrings.swift in Sources */,
				E6F07A0579F17CF856496A56 /* 2805. Cutting trees.swift in Sources */,
				51138571E50094B927D8F70D /* 2000. Reverse Prefix of Word.swift in Sources */,
				D1F5505C9FFB2481E1C8E9D2 /* 11279. Max Heap.swift in Sources */,
				53660B840A04131325C6A739 /* 2441. Largest Positive Integer That Exists With Its Negative.swift in Sources */,
				760102D79A16D3CC121F2DFD /* 1927. Min Heap.swift in Sources */,
				18FF4EE16FC147EAA1A00EA3 /* 165. Compare Version Numbers.swift in Sources */,
				7CD2F76BE035760F99EF54BA /* 1753. Shortest path.swift in Sources */,
				BA57C6272C06C9AF000B3EC8 /* Queue.swift in Sources */,
				6716C73AF1F01020B7AD7E62 /* 881. Boats to Save People.swift in Sources */,
				2EBAAA36C5A141AE714E507C /* 11286. Heap of absolute values.swift in Sources */,
				3C8A1E8794F04E4A675BFD87 /* 20. Valid Parentheses.swift in Sources */,
				3C2F7ABAD91AB5B16A9A0158 /* 206. Reverse Linked List.swift in Sources */,
				4DE10A7E1B762225A2189222 /* 21. Merge Two Sorted Lists.swift in Sources */,
				8BD03C69B8AEA87FC9494733 /* 141. Linked List Cycle.swift in Sources */,
				8E91B5FF24DDAE2C6F650A37 /* 226. Invert Binary Tree.swift in Sources */,
				BA2DE3CA2BF493F6003BC8FA /* Heap.swift in Sources */,
				5D990747032C8514E7CFC029 /* 237. Delete Node in a Linked List.swift in Sources */,
				BA26DABD2C2EDC4500333F2C /* Node.swift in Sources */,
				58E24341C4C5DA5B7FB80224 /* 1987. Alphabet.swift in Sources */,
				749CB7A5DFB18DC8B6D763C2 /* 2487. Remove Nodes From Linked List.swift in Sources */,
				72D150AF878FB509D0C744BA /* 2580. Sudoku.swift in Sources */,
				9266939C2A222E285DF9FBBA /* 1912. Continuous sum.swift in Sources */,
				D63B9DC8BCAF86678DFBA708 /* 2816. Double a Number Represented as a Linked List.swift in Sources */,
				4CDEA531960EB2203089A2B7 /* 3015. Reunite Oasis.swift in Sources */,
				5E34A0B13371633E581E9DB3 /* 1916. Finding the minimum cost.swift in Sources */,
				E0FCA9FF1181808EAC80F4C3 /* 506. Relative Ranks.swift in Sources */,
				ACB86D2B638188017CB2D792 /* 3075. Maximize Happiness of Selected Children.swift in Sources */,
				2814DA6A2FCECAA8CEDE6FE1 /* 1005. ACM Craft.swift in Sources */,
				5BDCB9416AD674C9A470BFED /* 786. K-th Smallest Prime Fraction.swift in Sources */,
				F17B6C1DBECDBCAC30C386EE /* 1010. Laying bridges.swift in Sources */,
				15FEB4185CB82F43AE345640 /* 104. Maximum Depth of Binary Tree.swift in Sources */,
				63CF486202E3291B4E9CA38E /* 100. Same Tree.swift in Sources */,
				A012C31B7C91B79C0BE6BD54 /* 572. Subtree of Another Tree.swift in Sources */,
				BABD18682C03F71300EC6CD9 /* Deque.swift in Sources */,
				7EC3DE335660AE5578CB4A1D /* 70. Climbing Stairs.swift in Sources */,
				E35D9CC0ED1381DA48C88546 /* 857. Minimum Cost to Hire K Workers.swift in Sources */,
				33C1A1BA18975978C0E00405 /* 2110. Installing a router.swift in Sources */,
				04449173453B83164B7F6907 /* 2373. Largest Local Values in a Matrix.swift in Sources */,
				450755F5CE5103192C27FCE2 /* 16953. A → B.swift in Sources */,
				7B0EA7CB6F912B549A2151E5 /* 252. Meeting Rooms.swift in Sources */,
				081303FE1C1151966DE5A514 /* 861. Score After Flipping Matrix.swift in Sources */,
				6FF2498DF4E1C7B29E00165C /* 2252. Line up.swift in Sources */,
				AB50D1D026BDE6FD073A2CF7 /* 1219. Path with Maximum Gold.swift in Sources */,
				86017F9E5B57AAC1EABF763D /* 14500. Tetromino.swift in Sources */,
				C593A17CE2D17EA8453EC727 /* 2812. Find the Safest Path in a Grid.swift in Sources */,
				6F3AD3FCB6CE3C777BFBDE17 /* 1238. Parties.swift in Sources */,
				B7F424D20403BAF71E4AC202 /* 2331. Evaluate Boolean Binary Tree.swift in Sources */,
				6032530B24E68B27FD075612 /* 11404. Floyd.swift in Sources */,
				CA135C55F174CA9DC56742DA /* 1325. Delete Leaves With a Given Value.swift in Sources */,
				B3790EC1E48A360121C5DE4A /* 1806. Partial sum.swift in Sources */,
				54280C5E4C61E0C91DB2126D /* 979. Distribute Coins in Binary Tree.swift in Sources */,
				5AE46419931029708EFEEA9B /* 1520. Downhill.swift in Sources */,
				6B6137C5ED033A3705CBCD61 /* 3068. Find the Maximum Sum of Node Values.swift in Sources */,
				BE5BBA9ADF4C8ED964938D5C /* 13460. Marbles Escape 2.swift in Sources */,
				F02CE7E02C1CBEE220F63E8E /* 3152. Special Array II.swift in Sources */,
				CF51D795B88F0BD8833FBA1D /* 338. Counting Bits.swift in Sources */,
				9E42D726992875BD0FEDC467 /* 49. Group Anagrams.swift in Sources */,
				CDE0CB5B9C4F4F405831619B /* 1863. Sum of All Subset XOR Totals.swift in Sources */,
				93F2A7CB6F8AC8F9B984B42B /* 12100. 2048 (Easy).swift in Sources */,
				FC655B919EF62A4A8997BA10 /* 78. Subsets.swift in Sources */,
				5A0883A216C56BEE6567EA93 /* 2294. Coins II.swift in Sources */,
				0E78A5CFA0D74D82DD9A20FB /* 131. Palindrome Partitioning.swift in Sources */,
				247300E89CB11ACC68CD8A66 /* 11054. Longest Sequence of Vitonic Parts.swift in Sources */,
				BBD1AA5BA71E14CCE2367BB5 /* 2597. The Number of Beautiful Subsets.swift in Sources */,
				DDF6695C6A8188F30054D1AB /* 1717. Representation of Sets.swift in Sources */,
				0D215D5FFD540F1936417513 /* 1255. Maximum Score Words Formed by Letters.swift in Sources */,
				8ED9B157BF9556B3E9B48EC0 /* 1504. Specific shortest paths.swift in Sources */,
				E824D7B94D1B6862EDDD8D7E /* 268. Missing Number.swift in Sources */,
				01864D3E328993AF916E3F7E /* 191. Number of 1 Bits.swift in Sources */,
				712E035A0D175713C3DA6577 /* 190. Reverse Bits.swift in Sources */,
				DE8BAADDEBF212C89E8317E9 /* 140. Word Break II.swift in Sources */,
				4B2B2FB3DF126EA66593B3A3 /* 2560. Straw Worm.swift in Sources */,
				7CC9F55574D0F860F77CC80F /* 552. Student Attendance Record II.swift in Sources */,
				86E93AF6D67BFDC991376AD9 /* 14503. Robot vacuum cleaners.swift in Sources */,
				30C6B30A67076653A51EF333 /* 13549. Hide and Seek 3.swift in Sources */,
				5CCCB9B184C07865C4ECE8D1 /* 13913. Hide and Seek 4.swift in Sources */,
				644D88238F847B8933B02435 /* 1608. Special Array With X Elements Greater Than or Equal X.swift in Sources */,
				1D6ADFB1E0DE3824BF0FC8A6 /* 1208. Get Equal Substrings Within Budget.swift in Sources */,
				B89B23C6192BB57D11BCA64D /* 16234. Population movement.swift in Sources */,
				4D7EAE9A57CFD0AF58052430 /* 1404. Number of Steps to Reduce a Number in Binary Representation to One.swift in Sources */,
				0269ADD79E62FCDEF4235DEC /* 1707. Bipartite graphs.swift in Sources */,
				45A388F6BC7A1FD2A25EAA31 /* 1442. Count Triplets That Can Form Two Arrays of Equal XOR.swift in Sources */,
				5B73C918BC817CBD91B768CC /* 2133. Fill Tiles.swift in Sources */,
				CE3B7C3E3BBC45B2A4F73BEC /* 260. Single Number III.swift in Sources */,
				B2409DD3E81B15953DC318CE /* 14003. Longest increasing partial sequence 5.swift in Sources */,
				8E81AC45BF7F5E8B42D11BC9 /* 238. Product of Array Except Self.swift in Sources */,
				0B7D27432C99B263E73BEE19 /* 3110. Score of a String.swift in Sources */,
				0EDA44B337352A092B193BC2 /* 128. Longest Consecutive Sequence.swift in Sources */,
				DBF563261B613F276FF56F53 /* 15. 3Sum.swift in Sources */,
				87CA2E9A550E6F6CCC87F16E /* 344. Reverse String.swift in Sources */,
				6FDD86CE0B3A3552DE665496 /* 2486. Append Characters to String to Make Subsequence.swift in Sources */,
				7980CEF227363A54260E113F /* 409. Longest Palindrome.swift in Sources */,
				F3B151CE8D870CBD1A406D4F /* 1002. Find Common Characters.swift in Sources */,
				4238EC1156E924333A93F6F8 /* 846. Hand of Straights.swift in Sources */,
				AB772A32A13DEDF289E9E7F7 /* 648. Replace Words.swift in Sources */,
				538BA4FEE496B8F67BF0BDB0 /* 523. Continuous Subarray Sum.swift in Sources */,
				13EE9C404E2628C69B88BEAB /* 11. Container With Most Water.swift in Sources */,
				CC3C035935A88BCB7EB99E51 /* 3. Longest Substring Without Repeating Characters.swift in Sources */,
				946DC1F64C89F6969FC2FB3A /* 424. Longest Repeating Character Replacement.swift in Sources */,
				96DDE2F65420ED0689D12F7E /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */,
				5ABD504274370722B80E8A69 /* 258709. Pick a die.swift in Sources */,
				4A667D2A98E66FFF13B4ECA4 /* 33. Search in Rotated Sorted Array.swift in Sources */,
				A60F1EE892E346556B4B0E1C /* 1051. Height Checker.swift in Sources */,
				86EC10A33CDFFE701442FD52 /* 143. Reorder List.swift in Sources */,
				045159BA8A10FEE8F1205CB2 /* 19. Remove Nth Node From End of List.swift in Sources */,
				74DED2C2FEBC0FED792B5625 /* 1122. Relative Sort Array.swift in Sources */,
				FE1E972714FFCB086EEC75BA /* 75. Sort Colors.swift in Sources */,
				C50A71FB04650BC427B8F123 /* 235. Lowest Common Ancestor of a Binary Search Tree.swift in Sources */,
				90A7DFBABBEBFC4BD9B74A8B /* 102. Binary Tree Level Order Traversal.swift in Sources */,
				5EF9BF220AF43B8C030B5E19 /* 98. Validate Binary Search Tree.swift in Sources */,
				40E0227779BF476DCC081A8E /* 2037. Minimum Number of Moves to Seat Everyone.swift in Sources */,
				25D350EB37D8A708F6363EE7 /* 945. Minimum Increment to Make Array Unique.swift in Sources */,
				4F31F3C07B80B83A5B5626B6 /* 1791. Find Center of Star Graph.swift in Sources */,
				6C3F29ADBCB6BEF0B54F99D8 /* 230. Kth Smallest Element in a BST.swift in Sources */,
				D75DF0F8D3F8EDECB3720815 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.swift in Sources */,
				0B4CA4E786B92E49DDEFA333 /* 39. Combination Sum.swift in Sources */,
				9E94DE5CB30A378423730FB8 /* 79. Word Search.swift in Sources */,
				2B6BBD3490E4F230A88A058B /* 208. Implement Trie (Prefix Tree).swift in Sources */,
				FFC41F2D479AFAE162F468AF /* 2285. Maximum Total Importance of Roads.swift in Sources */,
				99ED3454E1267BD065AD3C9A /* 211. Design Add and Search Words Data Structure.swift in Sources */,
				62D8F044A907D7895D9ABD2C /* 133. Clone Graph.swift in Sources */,
				7B69A21FFA9401C4EBABFC3F /* 417. Pacific Atlantic Water Flow.swift in Sources */,
				F6BB28678B4463A2F9D2A609 /* 207. Course Schedule.swift in Sources */,
				131B1AEAD44A3805D738B437 /* 261. Graph Valid Tree.swift in Sources */,
				8D2A0686FF1A7F3A33B3EDD5 /* 323. Number of Connected Components in an Undirected Graph.swift in Sources */,
				F2CB6959B16EF74970A14DE6 /* 198. House Robber.swift in Sources */,
				642FAB9A10E127A05B06C26F /* 213. House Robber II.swift in Sources */,
				97F2277D13973505D261EB57 /* 5. Longest Palindromic Substring.swift in Sources */,
				7B53D7F6D2C37E864758CF0B /* 647. Palindromic Substrings.swift in Sources */,
				34B912B2ACD3A890F97AA5CC /* 91. Decode Ways.swift in Sources */,
				0513F5E997CCBD2BB41C07C4 /* 322. Coin Change.swift in Sources */,
				2FE5ED8F0C1E0067AE2598CA /* 152. Maximum Product Subarray.swift in Sources */,
				173953DD20DBE25B4287B58F /* 139. Word Break.swift in Sources */,
				CD5E31BC97D4FC74BBB6E42E /* 1380. Lucky Numbers in a Matrix.swift in Sources */,
				D9B426BDB614D9216477D2FC /* 300. Longest Increasing Subsequence.swift in Sources */,
				DC99C660256226EC3DDD3C36 /* 62. Unique Paths.swift in Sources */,
				E48C760D2319001964854A5F /* 1143. Longest Common Subsequence.swift in Sources */,
				FE748639EBF0EC7AEA3B6C9B /* 1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance.swift in Sources */,
				C8C1054426D0C9F6383D5D22 /* 48. Rotate Image.swift in Sources */,
				40007B4A543F11F40802C6BE /* 2976. Minimum Cost to Convert String I.swift in Sources */,
				026A07B19166A847BA308BCD /* 912. Sort an Array.swift in Sources */,
				BDB6720A6E4E679695CDEAA3 /* 2191. Sort the Jumbled Numbers.swift in Sources */,
				AA779C6428C45DB96CCCD3C8 /* 1653. Minimum Deletions to Make String Balanced.swift in Sources */,
				6755DC3922B6D5BA21D8D66C /* 1105. Filling Bookcase Shelves.swift in Sources */,
				52E59627677BAF75FCC1A461 /* 2678. Number of Senior Citizens.swift in Sources */,
				DEC4E98DDE27276342178FB3 /* 2134. Minimum Swaps to Group All 1's Together II.swift in Sources */,
				A1D7F43D1BBF6B73296B95C2 /* 2045. Second Minimum Time to Reach Destination.swift in Sources */,
				E5FD6774F639021C4C21636C /* 1636. Sort Array by Increasing Frequency.swift in Sources */,
				954DCB9D2391D09555B53622 /* 1460. Make Two Arrays Equal by Reversing Subarrays.swift in Sources */,
				1AF7381FF0A55B877E9DBA85 /* 1508. Range Sum of Sorted Subarray Sums.swift in Sources */,
				73B84306F995CE976F732DE9 /* 2053. Kth Distinct String in an Array.swift in Sources */,
				E4ABE005795BFD94E3C44DB5 /* 6549. Largest rectangle in a histogram.swift in Sources */,
				0C6591D6DA42BCE542523547 /* 3016. Minimum Number of Pushes to Type Word II.swift in Sources */,
				5EC396C3A7B5D865829CA740 /* 57. Insert Interval.swift in Sources */,
				234F008D470BF6AB78E647DA /* 273. Integer to English Words.swift in Sources */,
				D8E0F696DABBCE4C59202B12 /* 885. Spiral Matrix III.swift in Sources */,
				83FA90C45FECA4EB1AEC2766 /* 840. Magic Squares In Grid.swift in Sources */,
				82FE51DFDC095AB888FB7A74 /* 959. Regions Cut By Slashes.swift in Sources */,
				D3FBB7F5A750407BD1C73A2F /* 1568. Minimum Number of Days to Disconnect Island.swift in Sources */,
				0F728EB95A22463CCD2BE8B3 /* 703. Kth Largest Element in a Stream.swift in Sources */,
				EB0CEBB7E8C5BCA46E1D0255 /* 40. Combination Sum II.swift in Sources */,
				EAB00324767701BD18372463 /* 719. Find K-th Smallest Pair Distance.swift in Sources */,
				DB67AC0830653F632A87F19D /* 860. Lemonade Change.swift in Sources */,
				F5B5EE786C2E6689F48E309C /* 624. Maximum Distance in Arrays.swift in Sources */,
				2A42CC69CC1D258A51012ABE /* 1937. Maximum Number of Points with Cost.swift in Sources */,
				515549E4101913791A6614E0 /* 264. Ugly Number II.swift in Sources */,
				1F22770D69A1043818381B50 /* 650. 2 Keys Keyboard.swift in Sources */,
				9DA313CA3E699C3BA887510C /* 1140. Stone Game II.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		BA1BB8892BD75C9800CA174B /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GENERATE_INFOPLIST_FILE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.pyeonhaeng.AlgorithmTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		BA1BB88A2BD75C9800CA174B /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GENERATE_INFOPLIST_FILE = YES;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.pyeonhaeng.AlgorithmTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = NO;
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		BAF746E0299B78D600182311 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.4;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		BAF746E1299B78D600182311 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 14.4;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		BAF746E3299B78D600182311 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "Apple Development";
				CODE_SIGN_STYLE = Automatic;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_BUNDLE_IDENTIFIER = "com.whitehyun.algorithm-journey";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_STRICT_CONCURRENCY = complete;
				SWIFT_VERSION = 6.0;
			};
			name = Debug;
		};
		BAF746E4299B78D600182311 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "Apple Development";
				CODE_SIGN_STYLE = Automatic;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_TEAM = 2ZQR76M3UH;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_BUNDLE_IDENTIFIER = "com.whitehyun.algorithm-journey";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_STRICT_CONCURRENCY = complete;
				SWIFT_VERSION = 6.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		BA1BB88B2BD75C9800CA174B /* Build configuration list for PBXNativeTarget "AlgorithmTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BA1BB8892BD75C9800CA174B /* Debug */,
				BA1BB88A2BD75C9800CA174B /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		BAF746D6299B78D600182311 /* Build configuration list for PBXProject "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BAF746E0299B78D600182311 /* Debug */,
				BAF746E1299B78D600182311 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		BAF746E2299B78D600182311 /* Build configuration list for PBXNativeTarget "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				BAF746E3299B78D600182311 /* Debug */,
				BAF746E4299B78D600182311 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = BAF746D3299B78D600182311 /* Project object */;
}
