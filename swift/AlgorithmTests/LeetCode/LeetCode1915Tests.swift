//
//  LeetCode1915Tests.swift
//  AlgorithmTests
//
//  Created by 홍승현 on 2024/04/30.
//

import XCTest

final class LeetCode1915Tests: XCTestCase {
  private let problem = LeetCode1915()

  func testExample1() {
    let result = problem.wonderfulSubstrings("aba")
    XCTAssertTrue(result == 4)
  }

  func testExample2() {
    let result = problem.wonderfulSubstrings("aabb")
    XCTAssertTrue(result == 9)
  }

  func testExample3() {
    let result = problem.wonderfulSubstrings("he")
    XCTAssertTrue(result == 2)
  }

  func testExample4() {
    let expectation = XCTestExpectation(description: "Timeout expectation")

    DispatchQueue.global().async {
      let result = self.problem.wonderfulSubstrings("iibhicfjiejfcejhaiebdcefjdcjfafcdcaiecddhfjaffidihdcbacfgjacbdjddfcjhaibhebfijbabheifjeejfgbgccfgibabbejaieafiejibghicdfhbcgjceejgijiebjdbbhhicdjggegacdcbiaacdijgbhdjacdbddgbfccfhiiddjadhebagedhjcfgaajcdfedfjfbhaaehedfggeiddjcccefbbfjejfcjbgcjcchijigfgadfcgfjchjadfihbdbdibbbbdgjiidhajggbhdfgccgegbgehibahfiebiefhdghbbabagjbdfieehdcjchadjghbbgcdgfgjifeggicefaciiigehiehdchcjfdghfbbfdihjhajgbddggjfafjdcbfhhgbaididcaadcafhabgdabdgedafhhehbjbefedjjfejbbbhaeeceejifdecbjhjihafbfigbjhgedaeiebjadjbdhbhhhhabchiedbieabeegfabijfeccbdjefggajiejhigdhbfjbifjchhbdfffbddgcjadbaahbagedacefjfchadjdabcaehahbjahfchbcgchjbddjcbebjcgjabiiibdeaedajdhiagebaichdciiggedbigeibgadjbgabafjiifbhceaaiefcdgfcbcahhhicegfiiggbbabfabajeeddgfdeafccibaihahcbifeeeabdicihhahfjjidhbfecgehhggcebjbcbihccfdejfjdjcbfegiajfciijdfdfaecbbccdbhechgeedbigefdjhcdbghgafebahaceghgbaheheigjhgchhjafjdacegfcjbidbajejhghfdccebiaaehcegbadgbicjcbhjbdfigceajhbaafgebfaabfjibedeghicbdgeeeccbadebdcffhcafdcfgcdiiheidbaadaiifefeijhhebiebgahjbefejbiebebcjjacifcbaagdbddigbacdfeidajefahbfcidiaffbaaaddhgcjbcebaafcbechbaagidgeegcaahihedaheacbahbbeigchgdhachcffdbjejehebbahcfdaabiefecabdffgfdbjbeehfgabebifcjdajjgbfdihbagbidbefdjdbedchhdaigghehfdfajcefecdhdghhbdicidedeeicciehcjecehfjiaebecdaefdgdjahgfdjgbegiaejcghjcabcifbaigjbdgfiaaffgddeccedcgecfeeiceajhcfejhecdcfdhjjeiafgbbebfdacjcebjebahgbbbajedeidbaeeijafdaidgccfdcdgjeeibdbdgejgbjeegegjjgabdgjghicfeecdhegfhdhhbihjefhfadiigefefjcdijhcheehbggbhhcgchchafgdgedjdhdiijcieaeddbhedfeidhbifjddgahjafjfaiehabfhejhjgigfhcfdjfdfhggjeaiijeiajgghjijjicibfedafgciffgifbeajgddbejffhcdafchbecabiecedaehggaacabhgfeihaabehggbfjcgajgjfceaifcigcfhbbbdcieiihadabhhfaejjbdffhabehhefadcaabdffeggfhgcgifcgaceacccgaaiagaafcdijdggeaeahafhjichecgddbiicgdjbaajcciehfihdgdihiicehdafdadegabbifddggahgbiedfdbhfebiggdcijajgedefjbfcjedijjbagcifjfcacjfhahjjbdgfaifehfhhbfbceecccigfbfjhcgbdgjhadfcjicdaggjbhfaaeahihiehaabbgfebcdgdbihbhfheajedigfigeebdhigaicgbgbhjgigddfagieachdfijbbbcigebhhheaiicjdaabjaidjjibcjdjbbgccecdbdfdachaeigdeihbdijceggjccgfcigcefgebehbhfdjccjadfhdeejgaddhdfihjcbibbjcabbcgddfffgcbhehjggjafdjddcebfajjccfhedbiecbbbjbceiifcfddiaiffacedgfgjbjhcbahjeedfghbjijcceedcdgaacccgdaichjhaffcfcfijjhchfiecgbajjjgacifffajhadgaicgdhdffijhjeaddgdjeagdihjbfiffdbeheadbaicgcbhjgbddhbcagehffgecijdjejacafheheefhjfeihigjafddccgbcgjaehgjefidbhbifedgejcjhddfbfchegjagbagafihfceihijidejgegcfcdejfddchdfcdhhfifjefifaddcggaheiiicahjihhehjbiebiiaegbbbgfehiifgiddgdfgghjiehddgfgdgigbfeaefccfegajiaegaheffaiiejacjiifhgjcahbjdidiffbbdhjdifihfbhjaeehghbccjbahbeifabcjiibejcjcdgceiigjcacjbicafadbejiecchfbajjhadcfhgbcbfeccjiiiejjhijdhidbadaagbihaeafiafibejcjdhbgibiagdhijhjeefeccdfaheejcdiiadfjeeaejeaaidiggjghggagcgcbffehadafhgegfcciegjbdiabagcffbfadecjaaeifgfidcfbhhibgbhfggjfgccdccabfaacbgjfijbgaaejjbhgifedcbafddiabfhehdabdjjiadgfjdjeaecahhhgijdcfaajjjeegcfidfbbggcbbafeddjbieeahfaccjdfhjhdhddbfhhafagddhhgbgbhcfiefdhfdgjbbbjdddcdfjdagcichfijedffigeijjgchdiihadagjbgidcegfhaeaiheaacjhfhbdbfgajagececefddcadfbhihgjciaddgjiijbadehiddaighheigfghggcgagehjiaahcgcfecheddehcijffgiidjjcfidjeifaicbaaiddjedhcihhabcidggjeaceehiiieecigfcibcffjdjbbbgieefhdieddjchegicigajdebieiiabdbadfdcjigegdcgdjbdbggjidajhbfcigihdefgfcfjidhdeejahfachiaaiiecfcgdbcdiiigbgbfbghfgfifhbeehegigfchafjbjgieeiechdbidcijfjeciechidfcfgfciaaafcbdgbhdbgdcijeddfbgchbgjeeggidiigaijacejijfiejbhebicagcgjdbjefefegejdachfjjeaifeacadfcffeegbidaieicedjjihdigbjffcfedchhfhjcgjeceiaajgecifgdahcacjchjgafcfibjicegfahdgicbagaedacgagcijddgbbhiafeiaijcidebfbhjgaegdajjgiiediaejijfcdbjieaficdbddjgheageiffjfeggdghheijbdcbcfcicaccdhhcehfbiafcgdajeefjajijgbefjebehaffjhfgjifhheadgijijgfefbgifbabjjbdfgfbhcgdgdcjcgdfjacebdhcacjfchhhegedceggdjjdaigbbcajhiahffjbiajeahgibjecfdbffgjgeehacggjiejfhhjchcghicgggdbhacdfdadiggdcfifcbfaaecihagdeffhdhgehbjbabdadcgicdhjeecibeicjbbhahebjjgjjjjbhfcibcgehjbbgiddgciiaaaijadbaechjdjbfaiffbabjhggjecgggbdihifibadbafhfcbdaddaccjigjcdgghbbbcajccifecfbabaedaiaccdhihbffdegahhhaaiidhdijidfghcdddfgfihfdecijhjdiejjbhjjbeghhhejafhegjjhbecjgbcdbcjcgcdfedcehhecfcefbhagcchegabacedfdcagfbiebhfajhdedgfiebihdbfachfaaheichaffcdeefhacdiafdddhfhbbjjbifjegcefjegfbjdgfedfcbcddfeajjdadbhajjjacgahcjeeibiedhgedhccaiadadjcjjbaddiefbcegcgcjbegfadijicgjcedcjhhbgjijgjhbhhhjifdhddhgcefjjjihebffdfejjaajicfcdfdabjbfefhjcjahidagbchddibjdgdcjfhhagfacfghdeagddbieeeifhbdjjdgafcfdbbgfadeigigefijjghggbecaidgaagefefcebgebeaajadjcfcfhgcdjcbbiegdhchcaheijcggajjbjfcicahafjbbbahfeecejibgbfjeichffcdhfhfefciahjcbddbhaaijjfjchhbjicdhcccdccifdgfjehhjdecdcagijdddhggfhfbgagfefdfbabcdbiaeeiibgabfjheaajccfjjhjbijchafjfibdedegchdcbhieaiccegbacgdihdjigdcagaffhjghhejceaeaeiaadfhbgbdbdgjccjiacjijfjbecedeahcfbabjhiidihcjbgeefdiabgaiffabiajifcigfjgehcbjahbefjcadijhhhbgdfdhhdgbabjagfbcjfagffjdgaadfjibedjcjfhjbccdhbfdeaegefachbebjbiijcdeddbeiacdigbgbfaaiajhcccagehadjiibjfejdeacihhbgajcagbacabhcfdeifeiaegfgieahbeifccahheifjjbfejgiadjbifebbaidaaaiiddibhaidbabhgfeijdafjafhcfbhdhjgdigddaeheheecbiighabcabjgbgbaiiccjgcgejafdhaaiadcdebegjaidhghdjahbihabaifcdjhhaicecaibiciejchiajfiegddejaehfbgcfaadegcjhjheecigjdfhiehcihjdiaiehcgcgdabcfedbcgbbecghidcejecbeffddhhfbidhbhdcfhcbcjbefdahifihfhdhgjbiaejfafjfijdbiagfiijjhaiadehjgghcaajjefjddhbdhcbjahhaehiddffcfbdeggegdfeieafigehhjccbjijegbcaahbejhahaiacghibhdjbiefgihbgecdajdfdjfdbjjceajdadhfgdfjibeeajibhijbfegfhiijjggcbcagffbcgieeechbghgbaagagehbghafhbideahghchfdjhfdbiebhigjedjibdcjfeedbgjbgcibbbhdigihjjcegcebejahefifigebefcdgegeabbcegffcdbafijfbabefecgafjdfhbiggeffbcfbjiciceebhgbeahghihahgefigdfjbcdbjgiabcegdhhaiiiabcbcdhcjccgggbadefieagcaegbdddcihciagagjeafdafeedjegaccgghifbhedagdgdidbgfcjadegcaebbbddaebjifbidfefbgbajdfacecaddgfebdiaagijedhjjfiggjcbjhhbciigfdecfebdddejjiafbbfchdbaehfaeaefbfjbcebheahdjafccaibbfiagfccidjhbicfachbahcecbgdieideaajhcfcgifebedeffdiibhceidaihjejjdacccgbfeggghgebbebeadjahbhcjidjfcibeaehhbbbdfchbhjbichdfghgbejadffadhbjicijdjeidhbfbaacbjbiegifdfbeajajaejiafhfghjegbjafdgfiggjecaeehaicegcbfghfeeechaebdjbihdacjdebjjaigdajdbghhbjiigffedfdadfchcibaibgdfhhchgcaigbhbefgdcafhhghiadifedagedjbgcfcbigeafjffajhcdddchiidhhgdjijgcccgejcgdfagbceeeiidcbdfaigdeiafegihdjgdiijbjifihaifbddibdjbhfejjjcdhabafdfbcajjdfjfhacadfbcbjhafbjgdgeiijjhffgdifjegfhehfbabhhjhadediggdaabibbhjajbajbddegjjagihbcefcfdegjbgaafdbahbjgabfhdbheebbajccfbaeiefbghjcefjjjhihiacagajfjaajicfggfbfggaheieddfdihbdfchecdchcggabchbcahdiahdghhfabcdejbfgjgdaajhfdcbecbcbjbbjgchbgcdjgbhiaicccbhaihfbebaijiichhfgfahhhefieheihfcbcegiffhfjfgfjcdejiijhhedjdccdeabjahjjceecihbbfhdcdgccbdiffiiiacajdheadbeihcgabeaeegecjgdjafbjeggbafahffdcjafdbjaifeagefjdcfabibbgdbfejgahjhibbdacbiggjaacihidjdfaidhjiihbcbfcbbcfijgcchbgedaiicjfiiicbbbbdihgdbgbjfgibbfaacjfhcehfadbabbgjcdijiidehjjgciiceedibbjidacbchcihiifcihccjgcfahaecgjdijgeegdgcgejjiadeijgdeedjdbdebjhddgciiegddfabfaccbdcjggiidjfehdgcegdahecejdifcedijajigcdhdjhbdiacehiegbdbhhihjejgahjecgdciabjgcegjiegaiibfjgafaacbjabcddghcegjeibhjfcgahdedeifbdbhiiiffjbhieaadfcebdficfabbifjbjjfdaahchighcfjgjhchcghejjdbghhecgdahjhajdcdfidgdehjjeehidhgabeidejbcjcjbdigeegabahfcjjfdgiaadidfjigdfhbgejfifhiddcahagdabdaaeagifgjahjhdgajfhfffijjfgdibdafjhiiihbddfbgjfjbddbiddcihhdhdadhfhbjbhghbadecfiegfichjcfdedbiaeigcbbgdcicajbfifjdbbdfhddfegiiebcccbjfgibjgjhahihcacchefhddbefgchcecjhaebgabfjiciichecggidcgjggdcagaibdichdfcchhbjgciijbbjihcdhgcijeibaggiifiiafhhebbabhhhccigbaafjjjjfaeeebcgjcfjhjibbeihfbfbbiajafbjiciibfbgfeaacfcfgbbddfagdehbbdabbbgdfiagicgehaffhhiggdeafjajfejcbjfjchigfhheegbhjhiccaghehjdeihgdaibdfdfeaefaeijhhabbjebcfgdaegejhhdedagehebfebjigiijfiibdcgadecgfgdceiihiebjijhhdhhjheaffhchggeiajiggefaheacibejefdjfajjccjfaeifabaicigfhdaeddehcdeahgjfbaffcchjajdgicdbeiebiedafjcifegadecigahhaggabddfgadcbgdhaechadgbjefajdbcjiddjhefjiiadjifcfiiifgjejjeihbhciajfjifadejcdbdgagagchcbfaehcdhcafdeegbgfdbdjedefchcbiiihfhejgiijffbajcfgdgdhegicbefcbahhfgfbdegjefjejbeefahdggibhaaigibbedghhgcchjfbgaicdaejjcijebifbbacehdfbbaaajciejgeecgjdhieiaadeeejieagecjijbgdejecbcccjbgjadabiiidgegjhchaiacegaiaeeagbfjdficbgifefjagideiibbcfgcacdcgichdiaejejahgiiaiidfhfadaagjcchiajchhcghjgfiddffegdcfgbegiaideebffiiabjjhbcecgcagbfcchcbcgcbaijfdbfghagdffbhbjajdcjidiihejdjbcaaaeaaibdagjfagaajhiijcbiibifgdfihfdahgggecagbgghhdjgjgjhbiihhjgiabdibfidfecgfjhghebbaadbihceeicdcahheddddebdjfigcgdejjdbbcijijfchdedibjegaeahccfhhcfcejhiihaacgdbigedebadbiafadchjcjciibaaafgacadfgbaebcbceedaihhebfjfefjigdfhhbdbhcahdbjigahafeidehgbdiihhdaahjddiafghagdfabcdafdjgdahhehjheibghjhbgjchcbgdahafaiebajgggbdgbfjdjghjfefhhabjfcbgbabedfidafiheigjjgjicajaeigcbafcbijhhbgddhggbechbjgcadffhcdffgfbgffdbbhdfgggcbgjdfbggefhbbaccahfdaibdcggaddacchghhbdafjaeafjeiefejddihhccfdaddbhibjaddehjbeibjidedajigjeeefhehejjjdffggfjdbhgcdigfejabjjicbcheiffigdgdeejjecbajdffecagfaejdhicaagbfjjddggagahjdfgcjiihibfbiahhcgggjagdeiifhccdbbafeefgfdadgbchcdicefhejidfaeaddfichdebbdeeajfdhffagchebhhhbbeaahefaeccfdfdagahhadfifgbdfjbffbfjehfieddbhhbfdccahiadgbfijhcbjjgcchhdecafafbefbfeahjefbhhgffjagijbdehiiefdfejfbfjeeiacgajabgafdfiejfffdhbgdhhfehbehfiiieehbegjhijaidcifcdceibibgjfjbdifdhdciadhagdgdgebhjabgbdafcaajeiiifaddaicaideiebhfehehebfcbaaebhcejfechaiiifbbbbdfdfcdfdbheiidffhbffdaeabbgjgfgcghchigeaehbfcdfgcfhgifjjejcdjehjhjjibbjbbageheihgeeheeejajhafhahcddiajgbbhhhgfafhccdjjajeccbijiaadhecfejgdjfacghfjjdciiagdgecfifbefifhdcjiigchcjggffghcbcefhafhadccahbahdgeeafjfdiehhdijjcjccjcbeeacciebffjeaedacfdihgcdiihegefbeeedeeddihahhjhafgiccjhjjfifecacajdegbjfeaiceihhabdhjfdhjjcgdaedccbefhddicdgbeigdhhcgegghijdeedfgaigeijejgegeahifabbbcihjfcechcjibfdghgbhhccfaafaifaebfcjbafgfjaiiedecefgighehjihhjdhhgbaijfjebcbejgfjfchdacadjcibaghgeiifdjdcecbbgbeaefbcjegecebdfjajfhjbejejdeadaccfgbfbhbchehfiiijdhdhbfcjjdjbjhijdfdecdeecjcbiacbjdcaahahaceejhaifgefcdhahcgbdbgecefgbdjfcdgbaehhdeddcbbjdhahadjfdefffehahageggbcbgjgfaajjeagbbeehhiie")
      XCTAssertTrue(result == 516_375)
      expectation.fulfill()
    }

    wait(for: [expectation], timeout: 1.0)
  }

  func testExample5() {
    let result = problem.wonderfulSubstrings("ababcca")
    XCTAssertTrue(result == 19)
  }
}
